import React,{createContext,useContext}from"react";import format from"string-format";import{createContextConsumerHOC}from"@jutro/platform";import{IntlContext}from"./IntlProvider";import{shouldDisplayStringId,stringIdTranslator}from"./stringIdTranslator";function isIntlMessageObject(key){return void 0!==key.id||void 0!==key.defaultMessage||void 0!==key.args}const createTranslator=intl=>(key,args)=>{if(!key)return key;if("string"==typeof key&&null!=args)return format(key,args);if(isIntlMessageObject(key)&&shouldDisplayStringId())return stringIdTranslator(key);if(isIntlMessageObject(key)){const mergedArgs=key.args?{...args,...key.args}:args;if(intl&&key.id){const formattedMessage=intl.formatMessage&&intl.formatMessage(key,mergedArgs);return formattedMessage===key.id&&""===key.defaultMessage?"":formattedMessage}if("string"==typeof key.defaultMessage)return null!=mergedArgs?format(key.defaultMessage,mergedArgs):key.defaultMessage}return key};export const TranslatorContext=createContext(createTranslator());export const TranslatorProvider=({children:children})=>{const intl=useContext(IntlContext);return React.createElement(TranslatorContext.Provider,{value:createTranslator(intl)},children)};export const withTranslator=ComponentToWrap=>createContextConsumerHOC({component:ComponentToWrap,context:TranslatorContext,displayName:`WithTranslator${ComponentToWrap.displayName||ComponentToWrap.name}`,mapContextToProps:(props,translator)=>({translator:translator})});TranslatorProvider.__docgenInfo={description:"",methods:[],displayName:"TranslatorProvider"},TranslatorProvider.__docgenInfo={componentName:"TranslatorProvider",packageName:"@jutro/locale",description:"",displayName:"TranslatorProvider",methods:[],actualName:"TranslatorProvider"};