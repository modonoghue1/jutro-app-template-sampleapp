import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import{injectIntl}from"react-intl";import React,{useState,useMemo}from"react";import PropTypes from"prop-types";import{getConfigValue}from"@jutro/config";import{warning}from"@jutro/logger";import{IntlProvider}from"./IntlProvider";import{TranslatorProvider}from"./TranslatorProvider";import{LocaleContextProvider}from"./localeContext";import{LanguageContextProvider}from"./languageContext";import{getDateLocale}from"./getDateLocale";import{polyfillDisplayNamesLocale}from"./helpers/displayNamesPolyfill";export function withIntl(ComponentToWrap){const wrapper=injectIntl(ComponentToWrap);return ComponentToWrap.propTypes&&(wrapper.propTypes=ComponentToWrap.propTypes),ComponentToWrap.defaultProps&&(wrapper.defaultProps=ComponentToWrap.defaultProps),wrapper}export const GlobalizationProvider=props=>{const _ref=props,_ref$defaultLocale=_ref.defaultLocale,defaultLocale=void 0===_ref$defaultLocale?"en-US":_ref$defaultLocale,defaultLanguage=_ref.defaultLanguage,messages=_ref.messages,children=_ref.children,onLanguageChange=_ref.onLanguageChange,onLocaleChange=_ref.onLocaleChange,intlTextComponent=_ref.intlTextComponent,_useState=useState(defaultLocale),_useState2=_slicedToArray(_useState,2),locale=_useState2[0],setLocale=_useState2[1],_useState3=useState(defaultLanguage||defaultLanguage),_useState4=_slicedToArray(_useState3,2),language=_useState4[0],setLanguage=_useState4[1],dateLocale=useMemo((()=>getDateLocale(locale)),[locale]),defaultTimeZone=getConfigValue("localeSettings.defaultTimeZone"),localeContext={locale:locale,dateLocale:dateLocale,defaultTimeZone:defaultTimeZone,localeOnChangeCallback:newLocale=>{polyfillDisplayNamesLocale(newLocale).finally((()=>setLocale(newLocale))),null==onLocaleChange||onLocaleChange(newLocale)}},languageContext={language:language,languageOnChangeCallback:newLanguage=>{setLanguage(newLanguage),null==onLanguageChange||onLanguageChange(newLanguage)}};return React.createElement(LanguageContextProvider,{value:languageContext},React.createElement(LocaleContextProvider,{value:localeContext},React.createElement(IntlProvider,{defaultLocale:defaultLocale,locale:locale,messages:messages,textComponent:intlTextComponent},React.createElement(TranslatorProvider,null,children))))};const defaultProps={defaultLocale:"en-US",messages:{},onLanguageChange:()=>warning("GlobalizationProvider: The language has been changed but no onLanguageChange callback provided."),onLocaleChange:()=>warning("GlobalizationProvider: The locale has been changed but no onLocaleChange callback provided.")},globalizationProviderPropTypes={defaultLocale:PropTypes.string,defaultLanguage:PropTypes.string,messages:PropTypes.objectOf(PropTypes.string.isRequired),onLanguageChange:PropTypes.func,onLocaleChange:PropTypes.func,intlTextComponent:PropTypes.elementType};GlobalizationProvider.defaultProps=defaultProps,GlobalizationProvider.displayName="GlobalizationProvider",GlobalizationProvider.propTypes=globalizationProviderPropTypes,GlobalizationProvider.__docgenInfo={description:"A GlobalizationProvider that can be placed in the app component hierarchy.",methods:[],displayName:"GlobalizationProvider",props:{defaultLocale:{defaultValue:{value:"'en-US'",computed:!1},type:{name:"string"},required:!1,description:"Default locale. Changes to this property will be ignored. Change locale with GlobalizationChooser.",tsType:{name:"string"}},messages:{defaultValue:{value:"{}",computed:!1},type:{name:"objectOf",value:{name:"string"}},required:!1,description:"Messages used by IntlProvider. You need to handle loading and passing new messages when language changes.\nSee MessagesLoader.",tsType:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}},onLanguageChange:{defaultValue:{value:"() =>\nwarning(\n    'GlobalizationProvider: The language has been changed but no onLanguageChange callback provided.'\n)",computed:!1},type:{name:"func"},required:!1,description:"Triggered when language is changed\n(language: string) => void",tsType:{name:"signature",type:"function",raw:"(val: string) => void",signature:{arguments:[{name:"val",type:{name:"string"}}],return:{name:"void"}}}},onLocaleChange:{defaultValue:{value:"() =>\nwarning(\n    'GlobalizationProvider: The locale has been changed but no onLocaleChange callback provided.'\n)",computed:!1},type:{name:"func"},required:!1,description:"Triggered when locale is changed\n(locale: string) => void",tsType:{name:"signature",type:"function",raw:"(val: string) => void",signature:{arguments:[{name:"val",type:{name:"string"}}],return:{name:"void"}}}},defaultLanguage:{type:{name:"string"},required:!1,description:"Default language. Changes to this property will be ignored. Change language with GlobalizationChooser.",tsType:{name:"string"}},intlTextComponent:{type:{name:"custom",raw:"PropTypes.elementType as Requireable<\n    GlobalizationProviderProps['intlTextComponent']\n>"},required:!1,description:"The tag to render text inside of react-intl <Formatted*> components; defaults to React.Fragment (https://formatjs.io/docs/react-intl/upgrade-guide-3x)",tsType:{name:"IntlProviderProps['textComponent']",raw:"IntlProviderProps['textComponent']"}},id:{required:!1,tsType:{name:"string"},description:""},defaultMessage:{required:!1,tsType:{name:"string"},description:""},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}},GlobalizationProvider.__docgenInfo={componentName:"GlobalizationProvider",packageName:"@jutro/locale",description:"A GlobalizationProvider that can be placed in the app component hierarchy.",displayName:"GlobalizationProvider",methods:[],actualName:"GlobalizationProvider",props:{defaultLocale:{type:{name:"string"},required:!1,description:"Default locale. Changes to this property will be ignored. Change locale with GlobalizationChooser.",defaultValue:{value:"'en-US'",computed:!1}},defaultLanguage:{type:{name:"string"},required:!1,description:"Default language. Changes to this property will be ignored. Change language with GlobalizationChooser."},messages:{type:{name:"objectOf",value:{name:"string"}},required:!1,description:"Messages used by IntlProvider. You need to handle loading and passing new messages when language changes.\nSee MessagesLoader.",defaultValue:{value:"{}",computed:!1}},onLanguageChange:{type:{name:"func"},required:!1,description:"Triggered when language is changed\n(language: string) => void",defaultValue:{value:"() => warning('GlobalizationProvider: The language has been changed but no onLanguageChange callback provided.')",computed:!1}},onLocaleChange:{type:{name:"func"},required:!1,description:"Triggered when locale is changed\n(locale: string) => void",defaultValue:{value:"() => warning('GlobalizationProvider: The locale has been changed but no onLocaleChange callback provided.')",computed:!1}},intlTextComponent:{type:{name:"elementType"},required:!1,description:"The tag to render text inside of react-intl <Formatted*> components; defaults to React.Fragment (https://formatjs.io/docs/react-intl/upgrade-guide-3x)"}}};