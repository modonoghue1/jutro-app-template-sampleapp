import isFunction from"lodash/isFunction";import isNaN from"lodash/isNaN";import isEmpty from"lodash/isEmpty";import trim from"lodash/trim";export function isEmptyValue(value){return!isFunction(value)&&(isNilValue(value)||0===value.length||isNaN(value))}export function isNilValue(value){return null==value}export function isValueSame(val1,val2){return isEmptyValue(val1)&&isEmptyValue(val2)||val1===val2}export function getValueForInput(fieldType,value){return"number"===fieldType?isNumber(value)?Number(value):"":value||""}export function isNumber(n){const type=typeof n;if("string"===type){const original=trim(n);if(0===(n=+n)&&isEmpty(original))return!1}else if("number"!==type)return!1;return n-n<1}export function isSafeNumber(number){return number.replace(/[^0-9]/g,"")<=Number.MAX_SAFE_INTEGER}export function getDecimalRegex(decimals=2){const withDecimalRegex="^-?(\\s*|\\d+\\.?\\d{0,decimalPlaces})$".replace("decimalPlaces",`${decimals}`);return decimals>0?new RegExp(withDecimalRegex):new RegExp(/^-?(\s*|\d+)$/)}export function truncateValue(value,decimalPlaces){if(isNilValue(value))return value;const decimalRegex="^-?\\d+(?:\\.\\d{0,decimalPlaces})?".replace("decimalPlaces",`${decimalPlaces}`),truncatedValue=value.toString().match(new RegExp(decimalRegex));return isEmptyValue(value)||isEmptyValue(truncatedValue)?value:parseFloat(truncatedValue[0])}