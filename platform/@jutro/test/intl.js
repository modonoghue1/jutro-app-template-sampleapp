import React from"react";import{createIntl}from"react-intl";import{enUS}from"date-fns/locale";import{MemoryRouter}from"react-router-dom";import{ShallowWrapper,ReactWrapper}from"enzyme";import{IntlProvider,TranslatorContext,LocaleContext}from"@jutro/locale";import{translatorForTests}from"./helpers";export function shallowIntl(node,{locale:locale,messages:messages,context:context,textComponent:textComponent}={locale:"en-US"}){const intl=createIntl({locale:locale,messages:messages,textComponent:textComponent});return shallow(React.cloneElement(node,{intl:intl}),{context:{...context,intl:intl}})}export function mountIntl(node,{locale:locale,messages:messages,context:context,childContextTypes:childContextTypes,textComponent:textComponent}={locale:"en-US"}){const intl=createIntl({locale:locale,messages:messages,textComponent:textComponent});return mount(React.cloneElement(node,{intl:intl}),{context:{...context,intl:intl},childContextTypes:{intl:intl,...childContextTypes}})}export const skipContextConsumer=wrapper=>wrapper.find("ContextConsumer").shallow();export const mountWithIntlContext=(node,locale="en",textComponent)=>mount(React.createElement(IntlProvider,{key:locale,locale:locale,textComponent:textComponent},node));export const mountWithTranslatorContext=(node,locale,textComponent,translator=translatorForTests)=>mountWithIntlContext(React.createElement(TranslatorContext.Provider,{value:translator},node),locale,textComponent);export const mountWithTranslatorAndRouterContext=(node,locale="en",textComponent,translator=translatorForTests)=>mountWithIntlContext(React.createElement(TranslatorContext.Provider,{value:translator},React.createElement(MemoryRouter,null,node)),locale,textComponent);export const TranslatorContextForTest=(node,locale="en",textComponent,dateLocale=enUS,translator=translatorForTests)=>React.createElement(TranslatorContext.Provider,{value:translator},React.createElement(LocaleContext.Provider,{value:{dateLocale:dateLocale,locale:locale}},React.createElement(IntlProvider,{key:locale,locale:locale,textComponent:textComponent},node)));export const mountWithLocaleContext=(node,locale="en",dateLocale=enUS,translator=translatorForTests)=>mountWithTranslatorContext(React.createElement(LocaleContext.Provider,{value:{dateLocale:dateLocale,locale:locale}},node),locale,void 0,translator);TranslatorContextForTest.__docgenInfo={description:"Wraps node with TranslatorContext that can be used in tests\n@param {React.ReactNode} node\n@param {string} locale\n@param {string} textComponent - The tag to render text inside of react-intl <Formatted*> components; defaults to React.Fragment\n@param {string} dateLocale\n@param {Function} translator - Optional custom translator function\n@returns {React.ReactElement}",methods:[],displayName:"TranslatorContextForTest"},TranslatorContextForTest.__docgenInfo={componentName:"TranslatorContextForTest",packageName:"@jutro/test",description:"Wraps node with TranslatorContext that can be used in tests",displayName:"TranslatorContextForTest",methods:[],actualName:"TranslatorContextForTest"};