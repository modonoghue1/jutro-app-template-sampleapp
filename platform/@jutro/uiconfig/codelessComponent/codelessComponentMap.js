import get from"lodash/get";import{error}from"@jutro/logger";import{defineCodelessComponent}from"./defineCodelessComponent";import{appendSimpleNamedComponentMap,resolveComponentFromName}from"../render/componentMap";export const extractCodelessComponentMap=(metadata,propTypesMap={})=>{const componentMap={},keyByName=new Map,definitions=extractDefinitions(metadata);return Object.values(definitions).forEach((({key:key,definition:definition})=>{const name=definition.name;keyByName.has(name)?error(`Cannot use component defined at "${key}": component "${name}" was already defined at "${keyByName.get(name)}"`):resolveComponentFromName(name)?error(`Cannot use component defined at "${key}": component "${name}" already exists.`):(componentMap[name]=defineCodelessComponent(definition,propTypesMap),keyByName.set(name,key))})),componentMap};export const registerCodelessComponents=(metadata,propTypesMap={})=>{appendSimpleNamedComponentMap(extractCodelessComponentMap(metadata,propTypesMap))};const extractDefinitions=metadata=>isCodelessComponentDefinition(metadata)?[{key:"<root>",definition:metadata}]:Object.entries(metadata).reduce(((definitions,[key,value])=>isCodelessComponentDefinition(value)?[...definitions,{key:key,definition:value}]:definitions),[]),isCodelessComponentDefinition=value=>"component"===get(value,"type");