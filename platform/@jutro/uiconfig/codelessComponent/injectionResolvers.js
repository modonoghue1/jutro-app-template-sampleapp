import isString from"lodash/isString";import get from"lodash/get";import{_ITEM_ID_,_ITEM_CHILDREN_,_ITEM_DATA_,_ITEM_VALUE_}from"@jutro/uimetadata";import{formatTemplatedContent}from"./formatTemplatedContent";import{formatTemplatedString}from"./formatTemplatedString";const NON_STRING_TYPES_WITH_POSSIBLE_REOCCURRENCE=["boolean","number","bigint","undefined"],PURE_VARIABLE_TEMPLATE=/^{[^{}]*}$/;export function injectId({template:template,props:props,variable:variable}){if(variable!==_ITEM_ID_)return;const id=props.id;return path=>{const valueTemplate=get(template,path);return{path:path,value:formatTemplatedString(valueTemplate,variable,id)}}}export function injectData({variable:variable,dataContainer:dataContainer}){if([_ITEM_VALUE_,_ITEM_DATA_].some((dataPlaceholder=>variable===dataPlaceholder)))return path=>({path:path,value:dataContainer})}export function injectChildren({template:template,variable:variable,props:props}){if(variable!==_ITEM_CHILDREN_)return;const children=props.children;return path=>{const _formatTemplatedConte=formatTemplatedContent(template,path,children);return{path:_formatTemplatedConte.contentPath,value:_formatTemplatedConte.content}}}const runtimePropValueInjector=(template,variable,propValue)=>path=>{const valueTemplate=get(template,path);if(!isString(valueTemplate))return{};if(PURE_VARIABLE_TEMPLATE.test(valueTemplate))return{path:path,value:propValue};if(null===(value=propValue)||NON_STRING_TYPES_WITH_POSSIBLE_REOCCURRENCE.some((type=>typeof value===type))){return{path:path,value:formatTemplatedString(valueTemplate,variable,propValue)}}var value;return{}};export function injectValue({template:template,props:props,variable:variable,translator:translator}){const propValue=props[variable];return propValue&&("string"==typeof propValue||(value=propValue)&&"object"==typeof value&&2===Object.keys(value).length&&value.id&&value.defaultMessage)?((template,variable,propValue)=>path=>{const valueTemplate=get(template,path);return isString(valueTemplate)?{path:path,value:formatTemplatedString(valueTemplate,variable,propValue)}:{}})(template,variable,translator(propValue)):runtimePropValueInjector(template,variable,propValue);var value}