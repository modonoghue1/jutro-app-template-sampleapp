import React from"react";import PropTypes from"prop-types";import pickBy from"lodash/pickBy";import identity from"lodash/identity";import{metadataTypes}from"@jutro/uimetadata";import{resolvePropType}from"./resolvePropType";import{getCodelessComponent}from"./getCodelessComponent";export const DATA_CONTAINER_PROP_TYPE=PropTypes.oneOfType([PropTypes.object,PropTypes.string,PropTypes.array,PropTypes.bool]);export function defineCodelessComponent(componentDefinition,propTypesMap={}){const displayName=componentDefinition.displayName,metadataTypeConfig=componentDefinition.metadataType,_componentDefinition$=componentDefinition.propTypes,propTypesConfig=void 0===_componentDefinition$?{}:_componentDefinition$,_componentDefinition$2=componentDefinition.defaultProps,defaultPropsConfig=void 0===_componentDefinition$2?{}:_componentDefinition$2,content=componentDefinition.content,contentLayout=componentDefinition.contentLayout,_componentDefinition$3=componentDefinition.usePassThroughDataHandling,usePassThroughDataHandling=void 0!==_componentDefinition$3&&_componentDefinition$3,_componentDefinition$4=componentDefinition.wrapperTag,CodelessComponent=getCodelessComponent(displayName,metadataTypeConfig,propTypesConfig,content,contentLayout,usePassThroughDataHandling,void 0===_componentDefinition$4?"div":_componentDefinition$4),defaultPropTypes={id:PropTypes.string.isRequired,path:[metadataTypes.FIELD,metadataTypes.CONTAINER].some((dataHandlingType=>metadataTypeConfig===dataHandlingType))?PropTypes.string:void 0,value:metadataTypeConfig===metadataTypes.FIELD?DATA_CONTAINER_PROP_TYPE:void 0,onValueChange:metadataTypeConfig===metadataTypes.FIELD?PropTypes.func:void 0,data:metadataTypeConfig===metadataTypes.CONTAINER?DATA_CONTAINER_PROP_TYPE:void 0,onDataChange:metadataTypeConfig===metadataTypes.CONTAINER?PropTypes.func:void 0},configuredPropTypes=Object.entries(propTypesConfig).reduce(((types,[prop,type])=>{let typeDef;if("object"==typeof type){const typeConfig=type.propType,required=type.required;var _typeDef$isRequired;if(typeDef=resolvePropType(typeConfig,propTypesMap),required)typeDef=null!==(_typeDef$isRequired=typeDef.isRequired)&&void 0!==_typeDef$isRequired?_typeDef$isRequired:typeDef}else typeDef=resolvePropType(type,propTypesMap);return{...types,[prop]:typeDef}}),{});return CodelessComponent.propTypes=pickBy({...defaultPropTypes,...configuredPropTypes},identity),CodelessComponent.defaultProps=Object.entries(defaultPropsConfig).reduce(((defaults,[prop,value])=>({...defaults,[prop]:value})),{}),CodelessComponent.displayName=displayName,CodelessComponent.isCodelessComponent=!0,CodelessComponent}