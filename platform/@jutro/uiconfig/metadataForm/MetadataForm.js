import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useCallback,useEffect,useRef,useState}from"react";import PropTypes from"prop-types";import{deprecated}from"@jutro/prop-types";import get from"lodash/get";import isEmpty from"lodash/isEmpty";import{MetadataContent}from"../metadataContent/MetadataContent";function MetadataForm(props){const callbackMap=props.callbackMap,classNameMap=props.classNameMap,componentMap=props.componentMap,data=props.data,onDataChange=props.onDataChange,onValidationChange=props.onValidationChange,overrideProps=props.overrideProps,resolveComponent=props.resolveComponent,resolveDataProps=props.resolveDataProps,resolveValidation=props.resolveValidation,resolveValueProp=props.resolveValue,showErrors=props.showErrors,showOptional=props.showOptional,showRequired=props.showRequired,uiProps=props.uiProps,parentPath=props.parentPath,fieldValidationMessagesRef=useRef(null),fieldValidationMessages=fieldValidationMessagesRef.current,_useState=useState(fieldValidationMessages),_useState2=_slicedToArray(_useState,2),pageMessages=_useState2[0],setPageMessages=_useState2[1],_useState3=useState(!1),_useState4=_slicedToArray(_useState3,2),hasDoneInitialValidation=_useState4[0],setHasDoneInitialValidation=_useState4[1],onFieldValidationChanged=useCallback(((isValid,path,message)=>{const fullPath=parentPath?`${parentPath}.${path}`:path,messages={...fieldValidationMessagesRef.current};isValid?delete messages[fullPath]:messages[fullPath]=[message],setPageMessages({...messages}),fieldValidationMessagesRef.current={...messages},hasDoneInitialValidation||setHasDoneInitialValidation(!0)}),[fieldValidationMessagesRef,hasDoneInitialValidation]),resolveValue=null!=resolveValueProp?resolveValueProp:(_id,path)=>get(data,path),resolveCommonOverrides=type=>({...overrideProps?overrideProps[`@${type}`]:{},resolvers:{resolveComponentMap:componentMap,resolveClassNameMap:classNameMap}}),extendedProps={...overrideProps,"@field":{onValueChange:onDataChange,onValidationChange:onFieldValidationChanged,showErrors:showErrors,showOptional:showOptional,showRequired:showRequired,...resolveCommonOverrides("field")},"@container":(id,path)=>{const containerOverrides=resolveCommonOverrides("container");return path?{onDataChange:onDataChange,...containerOverrides}:containerOverrides}};return useEffect((()=>{const areFieldsValid=isEmpty(fieldValidationMessages);onValidationChange&&onValidationChange(areFieldsValid,fieldValidationMessages)}),[data,onValidationChange,fieldValidationMessages,pageMessages]),React.createElement(MetadataContent,{uiProps:uiProps,overrideProps:extendedProps,resolveCallbackMap:callbackMap,resolveComponent:resolveComponent,resolveComponentMap:componentMap,resolveClassNameMap:classNameMap,resolveDataProps:resolveDataProps,resolveValidation:resolveValidation,resolveValue:resolveValue})}MetadataForm.displayName="MetadataForm",MetadataForm.propTypes={callbackMap:PropTypes.objectOf(PropTypes.func.isRequired),classNameMap:PropTypes.objectOf(PropTypes.string.isRequired),componentMap:PropTypes.objectOf(PropTypes.elementType.isRequired),data:PropTypes.object,onDataChange:PropTypes.func,onValidationChange:PropTypes.func,overrideProps:PropTypes.object,resolveValidation:PropTypes.func,resolveDataProps:PropTypes.func,resolveComponent:deprecated(PropTypes.func,"7.0.0",'Pass "resolveComponent" to a ComponentMapProvider around this component to consume from context instead'),resolveValue:PropTypes.func,showErrors:PropTypes.bool,showOptional:PropTypes.bool,showRequired:PropTypes.bool,uiProps:PropTypes.object.isRequired},MetadataForm.__docgenInfo={description:"MetadataForm\n\n@param {PropTypes.InferProps<typeof MetadataForm.propTypes>} props",methods:[],displayName:"MetadataForm",props:{callbackMap:{type:{name:"objectOf",value:{name:"func"}},required:!1,description:"Resolve callback string to callback function"},classNameMap:{type:{name:"objectOf",value:{name:"string"}},required:!1,description:"Resolve class names to css module names"},componentMap:{type:{name:"objectOf",value:{name:"elementType"}},required:!1,description:"Resolve component string to component"},data:{type:{name:"object"},required:!1,description:"Data for this form"},onDataChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and path for this component"},onValidationChange:{type:{name:"func"},required:!1,description:"Callback when validation is changed; receives isValid and validation props for this component"},overrideProps:{type:{name:"object"},required:!1,description:"Override default data props for rendered content"},resolveValidation:{type:{name:"func"},required:!1,description:"Resolve validation from json schema"},resolveDataProps:{type:{name:"func"},required:!1,description:"Resolve data props from json schema"},resolveComponent:{type:{name:"custom",raw:"deprecated(\n    PropTypes.func,\n    '7.0.0',\n    'Pass \"resolveComponent\" to a ComponentMapProvider around this component to consume from context instead'\n)"},required:!1,description:"Resolve component from string and/or datatype\n@deprecated"},resolveValue:{type:{name:"func"},required:!1,description:"Resolve value from data using path"},showErrors:{type:{name:"bool"},required:!1,description:"Override to force showing input errors"},showOptional:{type:{name:"bool"},required:!1,description:"If true, displays the `Optional` span"},showRequired:{type:{name:"bool"},required:!1,description:"If true, displays the require symbol on required fields"},uiProps:{type:{name:"object"},required:!0,description:"Content metadata or an array of metadata"}}};export default MetadataForm;MetadataForm.__docgenInfo={componentName:"MetadataForm",packageName:"@jutro/uiconfig",description:"MetadataForm",displayName:"MetadataForm",methods:[],actualName:"MetadataForm",props:{callbackMap:{type:{name:"objectOf",value:{name:"func"}},required:!1,description:"Resolve callback string to callback function"},classNameMap:{type:{name:"objectOf",value:{name:"string"}},required:!1,description:"Resolve class names to css module names"},componentMap:{type:{name:"objectOf",value:{name:"elementType"}},required:!1,description:"Resolve component string to component"},data:{type:{name:"object"},required:!1,description:"Data for this form"},onDataChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and path for this component"},onValidationChange:{type:{name:"func"},required:!1,description:"Callback when validation is changed; receives isValid and validation props for this component"},overrideProps:{type:{name:"object"},required:!1,description:"Override default data props for rendered content"},resolveValidation:{type:{name:"func"},required:!1,description:"Resolve validation from json schema"},resolveDataProps:{type:{name:"func"},required:!1,description:"Resolve data props from json schema"},resolveComponent:{type:{name:"func"},required:!1,description:"Resolve component from string and/or datatype\n@deprecated",deprecationInfo:{version:"7.0.0",mapTo:"resolveComponent"}},resolveValue:{type:{name:"func"},required:!1,description:"Resolve value from data using path"},showErrors:{type:{name:"bool"},required:!1,description:"Override to force showing input errors"},showOptional:{type:{name:"bool"},required:!1,description:"If true, displays the `Optional` span"},showRequired:{type:{name:"bool"},required:!1,description:"If true, displays the require symbol on required fields"},uiProps:{type:{name:"object"},required:!0,description:"Content metadata or an array of metadata"}}};