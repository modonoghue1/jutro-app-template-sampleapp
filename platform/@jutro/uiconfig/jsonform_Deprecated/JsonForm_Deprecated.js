import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useEffect,useRef,useCallback}from"react";import PropTypes from"prop-types";import{deprecated}from"@jutro/prop-types";import isString from"lodash/isString";import getKeys from"lodash/keys";import get from"lodash/get";import isEmpty from"lodash/isEmpty";import merge from"lodash/merge";import{useDeprecationWarning}from"@jutro/platform";import{generateUIFromSchema}from"../jsonSchema/jsonSchemaHelpers";import MetadataForm from"../metadataForm/MetadataForm";import{useJsonSchema}from"../jsonSchema/useJsonSchema";const strictEqual=(value1,value2)=>value1===value2,deepEqual=(object1,object2)=>{if(isString(object1)&&isString(object2))return object1===object2;if(object1===object2)return!0;const keys=getKeys(object1);return keys.length===getKeys(object2).length&&keys.every((key=>deepEqual(object1[key],object2[key])))};function JsonForm(props){const callbackMap=props.callbackMap,className=props.className,classNameMap=props.classNameMap,componentMap=props.componentMap,parentPath=props.parentPath,formData=props.data,dataSchema=props.dataSchema,dataSchemaExtension=props.dataSchemaExtension,onDataChange=props.onDataChange,onValidationChange=props.onValidationChange,overrideProps=props.overrideProps,showErrors=props.showErrors,uiProps=props.uiProps,resolveComponent=props.resolveComponent,jsonFormResolveDataProps=props.resolveDataProps,jsonFormResolveValidation=props.resolveValidation,resolveValue=props.resolveValue,overrideDataProps=props.overrideDataProps,ValidationService=props.ValidationService,showOptional=props.showOptional,showRequired=props.showRequired,_useJsonSchema=useJsonSchema(dataSchema,dataSchemaExtension,formData,overrideDataProps,ValidationService),_useJsonSchema2=_slicedToArray(_useJsonSchema,3),dataProps=_useJsonSchema2[0],validationProps=_useJsonSchema2[1],isSchemaValid=_useJsonSchema2[2],memoizedValidationProps=((value,compareFunction=strictEqual)=>{const ref=useRef(value);return compareFunction(value,ref.current)||(ref.current=value),ref.current})(validationProps,deepEqual),fieldValidationMessages=useRef(null).current,areFieldsValid=isEmpty(fieldValidationMessages);useDeprecationWarning("JsonForm","useValidation","Migrate to Jutros new validation mechanism using @jutro/validation and use a json schema rule","8.0"),useEffect((()=>{null!==fieldValidationMessages&&onValidationChange&&onValidationChange(isSchemaValid&&areFieldsValid,{...memoizedValidationProps,...fieldValidationMessages})}),[onValidationChange,areFieldsValid,isSchemaValid,memoizedValidationProps,fieldValidationMessages]),useEffect((()=>{null!==fieldValidationMessages&&onValidationChange&&onValidationChange(isSchemaValid&&areFieldsValid,{...memoizedValidationProps,...fieldValidationMessages})}),[areFieldsValid,fieldValidationMessages,isSchemaValid,memoizedValidationProps,onValidationChange,uiProps]);const readValue=useCallback(((id,path)=>get(formData,parentPath?`${parentPath}.${path}`:path)),[formData,parentPath]),writeValue=useCallback(((value,path)=>{onDataChange&&onDataChange(value,parentPath?`${parentPath}.${path}`:path)}),[onDataChange,parentPath]),defaultResolveDataProps=useCallback(((id,path)=>dataProps?dataProps[path]:void 0),[dataProps,parentPath]),defaultResolveValidation=useCallback(((id,path)=>fieldValidationMessages&&fieldValidationMessages[path]||memoizedValidationProps&&memoizedValidationProps[path]),[memoizedValidationProps,fieldValidationMessages,parentPath]);return React.createElement("div",{className:className},React.createElement(MetadataForm,{uiProps:uiProps||generateUIFromSchema(dataProps),resolveDataProps:(id,path)=>{const testPath=(parentPath?`${parentPath}.${path}`:path).replace(/\.\d\./g,".*.").replace(/\[\d\]\./g,".*."),result=jsonFormResolveDataProps&&jsonFormResolveDataProps(id,testPath);return merge(defaultResolveDataProps(id,testPath),result)},resolveValidation:(id,path,value)=>{const fullPath=parentPath?`${parentPath}.${path}`:path;if(jsonFormResolveValidation){const result=jsonFormResolveValidation(id,fullPath,value);if(!isEmpty(result))return result}return defaultResolveValidation(id,fullPath,value)},resolveValue:resolveValue||readValue,resolveComponent:resolveComponent,onDataChange:writeValue,onValidationChange:onValidationChange,data:parentPath?get(formData,parentPath):formData,showErrors:showErrors,callbackMap:callbackMap,overrideProps:overrideProps,classNameMap:classNameMap,componentMap:componentMap,showOptional:showOptional,showRequired:showRequired,parentPath:parentPath}))}JsonForm.displayName="JsonForm",JsonForm.propTypes={callbackMap:PropTypes.object,className:PropTypes.string,classNameMap:PropTypes.object,componentMap:PropTypes.object,parentPath:PropTypes.string,data:PropTypes.object,dataSchema:PropTypes.object.isRequired,dataSchemaExtension:PropTypes.func,onDataChange:PropTypes.func,onValidationChange:PropTypes.func,overrideProps:PropTypes.object,resolveComponent:deprecated(PropTypes.func,"7.0.0",'Pass "resolveComponent" to a ComponentMapProvider around this component to consume from context instead'),resolveDataProps:PropTypes.func,resolveValidation:PropTypes.func,resolveValue:PropTypes.func,showErrors:PropTypes.bool,uiProps:PropTypes.object,overrideDataProps:PropTypes.object,ValidationService:PropTypes.object,showOptional:PropTypes.bool,showRequired:PropTypes.bool},JsonForm.__docgenInfo={description:"JsonForm\n@deprecated\n@param {PropTypes.InferProps<typeof JsonForm.propTypes>} props",methods:[],displayName:"JsonForm",props:{callbackMap:{type:{name:"object"},required:!1,description:"Resolve callback name to callback function"},className:{type:{name:"string"},required:!1,description:"Additional style to apply to the form"},classNameMap:{type:{name:"object"},required:!1,description:"Resolve class name to hashed class name"},componentMap:{type:{name:"object"},required:!1,description:"Resolve component map"},parentPath:{type:{name:"string"},required:!1,description:"Data for this form"},data:{type:{name:"object"},required:!1,description:"Data for this form"},dataSchema:{type:{name:"object"},required:!0,description:"Schema for this form; used for data props and validation"},dataSchemaExtension:{type:{name:"func"},required:!1,description:"Function to process schema data types with custom attributes"},onDataChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and path for this component"},onValidationChange:{type:{name:"func"},required:!1,description:"Callback when validation is changed; receives isValid and validation props for this component"},overrideProps:{type:{name:"object"},required:!1,description:"Override props by all, type or id"},resolveComponent:{type:{name:"custom",raw:"deprecated(\n    PropTypes.func,\n    '7.0.0',\n    'Pass \"resolveComponent\" to a ComponentMapProvider around this component to consume from context instead'\n)"},required:!1,description:"Resolve component from string and/or datatype\n@deprecated"},resolveDataProps:{type:{name:"func"},required:!1,description:"Resolve data props from json schema passsed"},resolveValidation:{type:{name:"func"},required:!1,description:"Resolve validation from json schema"},resolveValue:{type:{name:"func"},required:!1,description:"Resolve value from data using path"},showErrors:{type:{name:"bool"},required:!1,description:"Show errors for all invalid fields; true after user attempts to submit/perform an action"},uiProps:{type:{name:"object"},required:!1,description:"Content metadata or an array of metadata"},overrideDataProps:{type:{name:"object"},required:!1,description:"Override default data props for rendered content"},ValidationService:{type:{name:"object"},required:!1,description:"service used for validation. If none is provided then AJV will be used"},showOptional:{type:{name:"bool"},required:!1,description:"If true, displays the `Optional` span"},showRequired:{type:{name:"bool"},required:!1,description:"If true, displays the required symbon on required fields"}}};export default JsonForm;JsonForm.__docgenInfo={componentName:"JsonForm",packageName:"@jutro/uiconfig",description:"JsonForm",displayName:"JsonForm",methods:[],actualName:"JsonForm",props:{callbackMap:{type:{name:"object"},required:!1,description:"Resolve callback name to callback function"},className:{type:{name:"string"},required:!1,description:"Additional style to apply to the form"},classNameMap:{type:{name:"object"},required:!1,description:"Resolve class name to hashed class name"},componentMap:{type:{name:"object"},required:!1,description:"Resolve component map"},parentPath:{type:{name:"string"},required:!1,description:"Data for this form"},data:{type:{name:"object"},required:!1,description:"Data for this form"},dataSchema:{type:{name:"object"},required:!0,description:"Schema for this form; used for data props and validation"},dataSchemaExtension:{type:{name:"func"},required:!1,description:"Function to process schema data types with custom attributes"},onDataChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and path for this component"},onValidationChange:{type:{name:"func"},required:!1,description:"Callback when validation is changed; receives isValid and validation props for this component"},overrideProps:{type:{name:"object"},required:!1,description:"Override props by all, type or id"},resolveComponent:{type:{name:"func"},required:!1,description:"Resolve component from string and/or datatype\n@deprecated",deprecationInfo:{version:"7.0.0",mapTo:"resolveComponent"}},resolveDataProps:{type:{name:"func"},required:!1,description:"Resolve data props from json schema passsed"},resolveValidation:{type:{name:"func"},required:!1,description:"Resolve validation from json schema"},resolveValue:{type:{name:"func"},required:!1,description:"Resolve value from data using path"},showErrors:{type:{name:"bool"},required:!1,description:"Show errors for all invalid fields; true after user attempts to submit/perform an action"},uiProps:{type:{name:"object"},required:!1,description:"Content metadata or an array of metadata"},overrideDataProps:{type:{name:"object"},required:!1,description:"Override default data props for rendered content"},ValidationService:{type:{name:"object"},required:!1,description:"service used for validation. If none is provided then AJV will be used"},showOptional:{type:{name:"bool"},required:!1,description:"If true, displays the `Optional` span"},showRequired:{type:{name:"bool"},required:!1,description:"If true, displays the required symbon on required fields"}}};