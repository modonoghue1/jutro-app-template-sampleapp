import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React from"react";import isObject from"lodash/isObject";import isArray from"lodash/isArray";import isString from"lodash/isString";import omitBy from"lodash/omitBy";import isEmpty from"lodash/isEmpty";import isUndefined from"lodash/isUndefined";import get from"lodash/get";import omit from"lodash/omit";import{log,makeUniqueWarningLog}from"@jutro/logger";import{ResponsiveElement,IntlElement}from"@jutro/components";import{isSupportedHTMLElement,isSupportedHTMLContainer,iterateMetadata,SchemaValidator,metadataSchema,resolveContentReference}from"@jutro/uimetadata";import{logDeprecationMessage,removeDangerousProps}from"@jutro/platform";import{resolveComponentFromDatatype,resolveComponentFromName}from"./componentMap";import{UnresolvedComponent}from"./UnresolvedComponent/UnresolvedComponent";const schemaValidator=new SchemaValidator(metadataSchema),callbackRegex=/^(on|render)[A-Z]/,classNameRegex=/^className$|\w+ClassName$/;export function resolveCallbackProps(props,callbackMap){return resolvePropsWithMap(props,callbackMap,isValidCallbackProp,resolveCallback)}export function resolveClassNamesProps(props,classNameMap){return resolvePropsWithMap(props,classNameMap,isValidClassNameProp,resolveClassNames)}const resolvePropComponentsClassnames=(props,classNameMap,routeComponent)=>props[routeComponent]?{...props,[routeComponent]:resolveClassNamesProps(props[routeComponent],classNameMap)}:props;export function resolveNestedPropClassNames(prop,callbackMap,classNameMap){const entries=Object.entries(prop).filter((([,val])=>"object"==typeof val&&!!val.className));if(!isEmpty(entries)){return resolveProps(entries.reduce(((props,[componentWithClassNameToResolve])=>({...props,...resolvePropComponentsClassnames(prop,classNameMap,componentWithClassNameToResolve)})),prop),callbackMap,classNameMap)}return resolveProps(prop,callbackMap,classNameMap)}export function resolveProps(props,callbackMap,classNameMap){return resolveCallbackProps(resolveClassNamesProps(props,classNameMap),callbackMap)}const resolvePropsWithMap=(props,map,matcher,resolver)=>Object.keys(props).reduce(((result,key)=>{const originalValue=props[key],id=props.id;return{...result,[key]:matcher(key,originalValue)?resolver(id,originalValue,map):originalValue}}),{});function isValidCallbackProp(callbackProp,callbackValue){return!!callbackProp.match(callbackRegex)&&(!!callbackValue&&(isString(callbackValue)||isObject(callbackValue)&&callbackValue.callback))}function isValidClassNameProp(classNameProp,classNameValue){return!!classNameProp.match(classNameRegex)&&(!!classNameValue&&isString(classNameValue))}function mapLookup(map,key,defaultValue){if(key)return map&&map[key]||defaultValue}export function resolveClassName(id,className,classNameMap){return mapLookup(classNameMap,className,className)}export function resolveClassNames(id,classNames,classNameMap,resolver=resolveClassName){return classNames.split(" ").map((className=>resolver(id,className,classNameMap))).join(" ")}export function resolveCallback(id,callbackName,callbackMap){return mapLookup(callbackMap,callbackName)}const deprecationWarningForComponentCasing=makeUniqueWarningLog("Support for componentMaps with case-insensitive keys has been deprecated. Adjust the keys in your componentMap to match the name of the component");export function resolveComponent(component,datatype,componentMap){if(!component&&!datatype)return;let componentInfo;return componentInfo||!component||isString(component)||(componentInfo={component:component}),isString(component)&&(!componentInfo&&componentMap&&(componentInfo=mapLookup(componentMap,component)),!componentInfo&&componentMap&&(componentInfo=mapLookup(componentMap,component.toLowerCase()),componentInfo&&deprecationWarningForComponentCasing()),componentInfo||(componentInfo=resolveComponentFromName(component)),componentInfo||(componentInfo={component:component})),isString(datatype)&&(!componentInfo&&componentMap&&(componentInfo=mapLookup(componentMap,datatype.toLowerCase())),componentInfo||(componentInfo=resolveComponentFromDatatype(datatype,!1)),componentInfo||log.warning(`unable to resolve component by datatype: "${datatype}"`)),componentInfo}function getContentArray(contentMetadata){return isArray(contentMetadata)?contentMetadata:isObject(contentMetadata)&&contentMetadata.content&&isArray(contentMetadata.content)?contentMetadata.content:[]}export function prepareComponentFromMetadata(metadata,overrideProps,resolvers={},rootMetadata,metadataPath){if(!metadata)return null;if(React.isValidElement(metadata))return metadata;const id=metadata.id,type=metadata.type,datatype=metadata.datatype,component=metadata.component,_metadata$componentPr=metadata.componentProps,componentProps=void 0===_metadata$componentPr?{}:_metadata$componentPr,content=metadata.content,contentAfter=metadata.contentAfter,contentBefore=metadata.contentBefore,contentEmpty=metadata.contentEmpty,contentRepeat=metadata.contentRepeat,contentRepeatAfter=metadata.contentRepeatAfter,contentRepeatBefore=metadata.contentRepeatBefore,contentLayout=metadata.contentLayout,selfLayout=metadata.selfLayout,_prepareOverrides=function(id,type,path,overrideProps){let additionalProps={};const resolveOverrides=key=>{const overrides=overrideProps[key];return"function"==typeof overrides?overrides(id,path):overrides};overrideProps&&overrideProps["@all"]&&(additionalProps={...additionalProps,...resolveOverrides("@all")});overrideProps&&overrideProps[`@${type}`]&&(additionalProps={...additionalProps,...resolveOverrides(`@${type}`)});overrideProps&&overrideProps[id]&&(additionalProps={...additionalProps,...resolveOverrides(id)});return additionalProps}(id,type,componentProps.path,overrideProps),contentOverride=_prepareOverrides.content;let dataProps,baseDatatype,baseComponent,additionalProps=_objectWithoutProperties(_prepareOverrides,["content"]);const fieldPath=additionalProps&&additionalProps.path||componentProps&&componentProps.path;if(["element","field","container","iterable","layout"].includes(type)&&fieldPath&&resolvers.resolveDataProps){const resolvedDataProps=resolvers.resolveDataProps(id,fieldPath);resolvedDataProps&&(baseDatatype=resolvedDataProps.datatype,baseComponent=resolvedDataProps.component,dataProps=resolvedDataProps.componentProps)}const componentInfo=prepareComponentInfo(component||baseComponent,datatype||baseDatatype,type,content,{...dataProps,...componentProps,...additionalProps},resolvers,metadataPath),Component=componentInfo&&componentInfo.component,componentMapProps=componentInfo&&componentInfo.componentProps;resolvers.resolveCallbackMap&&(additionalProps=function(componentProps,additionalProps){const resolvedProps=additionalProps;componentProps&&Object.keys(componentProps).forEach((callbackProp=>{const callbackValue=componentProps[callbackProp];isValidCallbackProp(callbackProp,callbackValue)&&(resolvedProps[callbackProp]=callbackValue)}));return resolvedProps}(componentProps,additionalProps));const combinedProps=removeDangerousProps({...dataProps,...componentMapProps,...componentProps,...additionalProps});let preparedChildrenLayout,children=contentOverride||content,resolvedContent=contentOverride||resolveContent(metadata,resolvers);if("iterable"===type&&contentRepeat&&!1!==combinedProps.visible){const repeatPath=contentRepeat.path||combinedProps.path,repeatData=contentRepeat.data||combinedProps.data||resolvers.resolveValue&&resolvers.resolveValue(id,repeatPath);resolvedContent=iterateMetadata({contentAfter:contentAfter,contentRepeatAfter:contentRepeatAfter,contentBefore:contentBefore,contentRepeatBefore:contentRepeatBefore,contentEmpty:contentEmpty,contentRepeat:contentRepeat,repeatData:repeatData,repeatPath:repeatPath})}if(isArray(resolvedContent)){const preparedContent=prepareContentFromMetadata({content:resolvedContent,contentLayout:contentLayout},overrideProps,resolvers,rootMetadata,metadataPath);children=preparedContent.content,preparedChildrenLayout=preparedContent.contentLayout}void 0!==Component&&prepareComponentProps(id,type,Component,combinedProps,resolvers);const preparedSelfLayout=selfLayout?prepareLayout(selfLayout,resolvers):void 0,result={id:id,type:type,datatype:datatype,component:Component,componentProps:isEmpty(combinedProps)?void 0:combinedProps,content:children,contentLayout:preparedChildrenLayout,selfLayout:preparedSelfLayout};return omitBy(result,isUndefined)}function prepareLayout(layout,resolvers){const componentInfo=prepareComponentInfo(layout.component,void 0,"layout",void 0,void 0,resolvers);return resolvers&&prepareComponentProps(null,null,layout.component,layout.componentProps,resolvers),{...layout,componentProps:removeDangerousProps(layout.componentProps),component:componentInfo&&componentInfo.component}}function prepareComponentInfo(component,datatype,type,content,componentProps,resolvers,metadataPath){let transformComponentMap;if(isString(component)&&"element"===type&&isSupportedHTMLElement(component)){const hasIntlContent=content&&void 0!==content.id&&void 0!==content.defaultMessage,_ref=componentProps||{},phone=_ref.phone,phoneWide=_ref.phoneWide,tablet=_ref.tablet,hasBreakpointProps=phone||phoneWide||tablet;hasBreakpointProps&&hasIntlContent?transformComponentMap={[component]:{component:ResponsiveElement,componentProps:{tag:component,parentTag:IntlElement}}}:hasIntlContent?transformComponentMap={[component]:{component:IntlElement,componentProps:{tag:component}}}:hasBreakpointProps&&(transformComponentMap={[component]:{component:ResponsiveElement,componentProps:{tag:component}}})}const componentResolver=resolvers&&resolvers.resolveComponent||resolveComponent,componentMap=resolvers&&resolvers.resolveComponentMap,componentInfo=componentResolver(component,datatype,transformComponentMap?{...transformComponentMap,...componentMap}:componentMap,type,metadataPath,componentProps);return componentInfo&&!componentInfo.component?{component:componentInfo}:componentInfo}function prepareComponentProps(id,type,component,props,resolvers){const componentProps=props,_ref2=componentProps||{},path=_ref2.path,startPath=_ref2.startPath,endPath=_ref2.endPath,_ref3=(null==component?void 0:component.defaultProps)||{},startPathValueProp=_ref3.startPathValueProp,endPathValueProp=_ref3.endPathValueProp;if("element"!==type&&"field"!==type||!resolvers.resolveValue||(path&&(componentProps.value=resolvers.resolveValue(id,path)),startPath&&endPath&&(componentProps.value={[startPathValueProp]:resolvers.resolveValue(`${id}_${startPathValueProp}`,startPath),[endPathValueProp]:resolvers.resolveValue(`${id}_${endPathValueProp}`,endPath)})),("container"===type||"iterable"===type)&&path&&resolvers.resolveValue&&(componentProps.data=resolvers.resolveValue(id,path)),"field"===type&&resolvers.resolveDefaultValue&&(path&&(componentProps.defaultValue=resolvers.resolveDefaultValue(id,path)),startPath&&endPath&&(componentProps.defaultValue={[startPathValueProp]:resolvers.resolveDefaultValue(`${id}_${startPathValueProp}`,startPath),[endPathValueProp]:resolvers.resolveDefaultValue(`${id}_${endPathValueProp}`,endPath)})),resolvers.resolveClassName||resolvers.resolveClassNameMap){const classNameResolver=resolvers.resolveClassName||resolveClassName,classNameMap=resolvers.resolveClassNameMap;if(componentProps){Object.keys(componentProps).filter((prop=>isValidClassNameProp(prop,componentProps[prop]))).forEach((classNameProp=>{componentProps[classNameProp]=resolveClassNames(id,componentProps[classNameProp],classNameMap,classNameResolver)}));const callbackMap=resolvers.resolveCallbackMap,routes=props.routes;routes&&(componentProps.routes=routes.map((route=>resolveNestedPropClassNames(route,callbackMap,classNameMap))))}}prepareCallbacksInComponentProps({resolvers:resolvers,id:id,componentProps:componentProps}),"field"===type&&resolvers.resolveValidation&&(componentProps.validationMessages=resolvers.resolveValidation(id,path,componentProps&&componentProps.value)),"field"===type&&resolvers.resolveFormValidation&&(componentProps.errorMessage=resolvers.resolveFormValidation(path,componentProps&&componentProps.value,id))}export const prepareCallbacksInComponentProps=({resolvers:resolvers,id:id,componentProps:componentProps})=>{if(resolvers.resolveCallback||resolvers.resolveCallbackMap){const callbackResolver=resolvers.resolveCallback||resolveCallback,callbackMap=resolvers.resolveCallbackMap;if(!isEmpty(componentProps)){return Object.keys(componentProps).filter((callbackProp=>isValidCallbackProp(callbackProp,componentProps[callbackProp]))).forEach((callbackProp=>{const callbackValue=componentProps[callbackProp],callbackFunction=callbackResolver(id,get(callbackValue,"callback",callbackValue),callbackMap);callbackMap&&!callbackFunction&&log.warning(`unable to resolve callback: ${JSON.stringify(callbackValue,null,2)}`);const wrappedFn=callbackValue.callback&&callbackFunction?(...args)=>callbackFunction({...callbackValue.callbackProps},...args):callbackFunction;componentProps[callbackProp]=wrappedFn})),{...componentProps}}}return componentProps};export function prepareContentFromMetadata(contentMetadata,overrideProps,resolvers,rootMetadata,metadataPath=""){const content=getContentArray(contentMetadata).map(((item,i)=>prepareComponentFromMetadata(resolveContentReference(item,rootMetadata),overrideProps,resolvers,rootMetadata,`${metadataPath?`${metadataPath}.`:metadataPath}content.${i}`))),contentLayoutMetadata=contentMetadata&&contentMetadata.contentLayout;return{content:content,contentLayout:contentLayoutMetadata?prepareLayout(contentLayoutMetadata,resolvers):void 0}}export function renderComponentFromMetadata(metadata,showHidden=!1){if(!metadata)return null;if(React.isValidElement(metadata))return metadata;const id=metadata.id,Component=metadata.component,componentProps=metadata.componentProps,content=metadata.content,contentLayout=metadata.contentLayout,selfLayout=metadata.selfLayout,_ref4=componentProps||{},visible=_ref4.visible,path=_ref4.path,key=id||path;let children,renderOutput,refinedcomponentProps=componentProps;if(!showHidden&&(!1===visible||"false"===visible))return null;showHidden||(refinedcomponentProps=omit(componentProps,["visible"])),children=isArray(content)?renderContent(content,contentLayout,showHidden):content;const componentString=Component&&Component.toString();if(Component&&(componentString.includes("react.fragment")||componentString.includes("React.Fragment")))renderOutput=React.createElement(React.Fragment,{key:id},children);else if(isComponentUnresolved(Component))renderOutput=React.createElement(UnresolvedComponent,{id:id,key:key,componentName:Component});else{const sanitizedProps=removeDangerousProps(refinedcomponentProps),props=Object.assign(sanitizedProps,{resolvers:Component.isCodelessComponent?sanitizedProps.resolvers:void 0});renderOutput=React.createElement(Component,_extends({id:key,key:key},props),children)}return selfLayout?renderLayout(renderOutput,{...selfLayout,componentProps:{key:key,...selfLayout.componentProps}}):renderOutput}export function renderContent(contentMetadata,contentLayout,showHidden=!1){const content=contentMetadata.map((metadata=>renderComponentFromMetadata(metadata,showHidden)));return isEmpty(contentLayout)?content:renderLayout(content,contentLayout)}export function renderLayout(content,contentLayout){const LayoutComponent=contentLayout.component,componentProps=contentLayout.componentProps;return LayoutComponent?React.createElement(LayoutComponent,removeDangerousProps(componentProps),content):content}export function renderContentFromMetadataInternal(contentMetadata,overrideProps,resolvers,showHidden=!1){const _prepareContentFromMe=prepareContentFromMetadata(contentMetadata,overrideProps,resolvers,contentMetadata),content=_prepareContentFromMe.content,_prepareContentFromMe2=_prepareContentFromMe.contentLayout;return renderContent(content,void 0===_prepareContentFromMe2?{}:_prepareContentFromMe2,showHidden)}export function renderContentFromMetadata(contentMetadata,overrideProps,resolvers,showHidden=!1){return logDeprecationMessage("renderContentFromMetadata","MetadataContent","For example: renderContentFromMetadata(uiProps, overrideProps, resolvers, showHidden) -> <MetadataContent uiProps={uiProps} overrideProps={overrideProps} showHidden={showHidden} {...resolvers} />","7.0.0"),renderContentFromMetadataInternal(contentMetadata,overrideProps,resolvers,showHidden)}export function validateMetadata(metadata,onValidationFailure){const validationResult=schemaValidator.validate(metadata);validationResult.valid||(onValidationFailure&&onValidationFailure("Metadata validation failed","warning"),log.warning(`Metadata is invalid:\nFor easier debugging consider opening in an IDE (VSCode or Intellij):\n${JSON.stringify(validationResult.errorMessages)}`))}export function findComponentFromMetadata(metadata,filterFn,skipHidden=!0,list=[]){if(!metadata)return list;const component=metadata.component,componentProps=metadata.componentProps,content=metadata.content,_ref5=componentProps||{},value=_ref5.value,visible=_ref5.visible;if(skipHidden&&!1===visible)return list;if(filterFn&&!filterFn(metadata)||list.push(metadata),isArray(content)){if(skipHidden&&component&&component.isContentVisible){if(!component.isContentVisible(value,componentProps))return list}findContentFromMetadata(content,filterFn,skipHidden,list)}return list}export function findContentFromMetadata(contentMetadata,filterFn,skipHidden=!0,list=[]){return getContentArray(contentMetadata).reduce(((foundArray,item)=>findComponentFromMetadata(item,filterFn,skipHidden,foundArray)),list)}export function resolveContent(metadata,{resolveContent:contentResolver,resolveContentOptions:resolveContentOptions}={}){if(!contentResolver&&!resolveContentOptions)return metadata.content;const content=(resolveContentOptions||["content"]).reduce(((resolvedContent,path)=>resolvedContent||get(metadata,path)),void 0);return contentResolver&&contentResolver(content)||content}export const isComponentUnresolved=Component=>null==Component||isString(Component)&&!(isSupportedHTMLElement(Component)||isSupportedHTMLContainer(Component));export function findComponentPropsById(meta,id){if((null==meta?void 0:meta.id)===id)return(null==meta?void 0:meta.componentProps)||null;const content=null==meta?void 0:meta.content;if(Array.isArray(content))for(const metaItem of content){const foundItem=findComponentPropsById(metaItem,id);if(foundItem)return foundItem}return null}renderComponentFromMetadata.__docgenInfo={description:"Renders a single component from metadata\nInvoked with resolved metadata returned from 'prepareComponent()'\n\n@param {object|null} metadata - resolved metadata for a single component\n@param {boolean} [showHidden=false] - show hidden content in results\n@returns {React.Element|null} - React component instance",methods:[],displayName:"renderComponentFromMetadata"},renderContent.__docgenInfo={description:"Renders an array of components from metadata\nInvoked with resolved metadata returned from 'prepareContent()'\n\n@param {Array<any>} contentMetadata - array of resolved metadata\n@param {object} contentLayout - layout to be applied to content\n@param {boolean} [showHidden=false] - show hidden content in results\n@returns {React.Element} - React component instance",methods:[],displayName:"renderContent"},renderLayout.__docgenInfo={description:"Renders a layout around the provided content\nInvoked with resolved metadata returned from 'prepareContent()'\n\n@param {React.Element} content - React content to render in layout\n@param {object} contentLayout - layout to be applied to content\n@returns {React.Element} - React component instance",methods:[],displayName:"renderLayout"},renderContentFromMetadataInternal.__docgenInfo={description:"Renders content metadata\n\n@param {object|Array} contentMetadata - content metadata or an array of metadata\n@param {object} [overrideProps] - override props by all, type or id\n@param {object} resolvers - a collection of resolve functions and maps\n@param {boolean} [showHidden=false] - show hidden content in results\n@returns {React.Element} React component instances",methods:[],displayName:"renderContentFromMetadataInternal"},renderContentFromMetadata.__docgenInfo={description:"Renders content metadata\n\n@param {object|Array} contentMetadata - content metadata or an array of metadata\n@param {object} [overrideProps] - override props by all, type or id\n@param {object} resolvers - a collection of resolve functions and maps\n@param {boolean} [showHidden=false] - show hidden content in results\n@returns {React.Element} React component instances",methods:[],displayName:"renderContentFromMetadata"},renderComponentFromMetadata.__docgenInfo={componentName:"renderComponentFromMetadata",packageName:"@jutro/uiconfig",description:"Renders a single component from metadata\nInvoked with resolved metadata returned from 'prepareComponent()'",displayName:"renderComponentFromMetadata",methods:[],actualName:"renderComponentFromMetadata"},renderContent.__docgenInfo={componentName:"renderContent",packageName:"@jutro/uiconfig",description:"Renders an array of components from metadata\nInvoked with resolved metadata returned from 'prepareContent()'",displayName:"renderContent",methods:[],actualName:"renderContent"},renderLayout.__docgenInfo={componentName:"renderLayout",packageName:"@jutro/uiconfig",description:"Renders a layout around the provided content\nInvoked with resolved metadata returned from 'prepareContent()'",displayName:"renderLayout",methods:[],actualName:"renderLayout"},renderContentFromMetadataInternal.__docgenInfo={componentName:"renderContentFromMetadataInternal",packageName:"@jutro/uiconfig",description:"Renders content metadata",displayName:"renderContentFromMetadataInternal",methods:[],actualName:"renderContentFromMetadataInternal"},renderContentFromMetadata.__docgenInfo={componentName:"renderContentFromMetadata",packageName:"@jutro/uiconfig",description:"Renders content metadata",displayName:"renderContentFromMetadata",methods:[],actualName:"renderContentFromMetadata"};