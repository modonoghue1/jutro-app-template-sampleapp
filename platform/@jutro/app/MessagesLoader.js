import React,{useEffect,memo}from"react";import PropTypes from"prop-types";import isEqual from"lodash/isEqual";const messagesLoaderPropTypes={language:PropTypes.string.isRequired,loaders:PropTypes.arrayOf(PropTypes.func),onLoad:PropTypes.func.isRequired},MessagesLoaderInternal=({language:language,loaders:loaders,onLoad:onLoad})=>(useEffect((()=>{let hasLanguageChanged=!1;return(async()=>{const promises=loaders.map((loader=>loader(language))),messages=(await Promise.all(promises)).reduce(((acc,next)=>Object.assign(acc,next)),{});hasLanguageChanged||onLoad(messages)})(),()=>{hasLanguageChanged=!0}}),[language,...loaders,onLoad]),null);MessagesLoaderInternal.propTypes=messagesLoaderPropTypes,MessagesLoaderInternal.displayName="MessagesLoader";export const MessagesLoader=memo(MessagesLoaderInternal,isEqual);