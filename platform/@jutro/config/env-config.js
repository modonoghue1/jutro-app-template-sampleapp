import _URLSearchParams from"@babel/runtime-corejs3/core-js-stable/url-search-params";import get from"lodash/get";import mergeWith from"lodash/mergeWith";import merge from"lodash/merge";import isArray from"lodash/isArray";import substituteParametersValues from"./load-config";import defaultConfig from"./defaults/defaultConfig.json";export function loadAndMergeConfiguration(config,params={}){return loadConfiguration(config,params,defaultConfig)}export function loadConfiguration(config={},params={},baseConfig=defaultConfig){return baseConfig&&(config=mergeWith(baseConfig,config,((target,src)=>{if(isArray(target)&&isArray(src))return src}))),setConfiguration(config=substituteParametersValues(config,params)),config}const CONFIG_DATA_KEY=Symbol("jutro.config.data");export default function getConfiguration(){return global[CONFIG_DATA_KEY]}export function setConfiguration(config){global[CONFIG_DATA_KEY]={...config}}export function resolveValue(value){return function(value){return"true"===value||"false"!==value&&value}(value)}export function getConfigValue(path,defaultValue){var _envVariable$;let value=null;if(value=null!==(_envVariable$=__FULL_ENV__[`REACT_APP_${path.replace(/\./g,"_")}`])&&void 0!==_envVariable$?_envVariable$:__FULL_ENV__[path],value)return resolveValue(value);const config=getConfiguration();return value=get(config,path),void 0===value?defaultValue:resolveValue(value)}export function getAndExtendConfigValue(path,extension){const configValue=getConfigValue(path);return merge(configValue,extension)}export function isFeatureEnabled(path){const allEnabled=getConfigValue("feature.all",!0);return getConfigValue(`feature.${path}`,allEnabled)}