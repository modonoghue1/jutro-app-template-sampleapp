import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import{log}from"@jutro/logger";import ServiceRegistry from"./ServiceRegistry";let ServiceManager=function(){function ServiceManager(){_classCallCheck(this,ServiceManager),this.registry=new ServiceRegistry}return _createClass(ServiceManager,[{key:"register",value:function(id,Service,options){this.registry.register(id,Service,options)}},{key:"getService",value:function(id){if(this.registry.hasRegistration(id))return this.registry.getRegistration(id).getService();log.warning(`No service available for id '${id}'`)}},{key:"getServiceByContract",value:function(contract,resolver){const implementors=this.registry.getImplementorsOf(contract);if(0===implementors.length)return;if(!resolver)return implementors.length>1&&log.warning(`Contract "${contract}" has multiple implementations, but no resolver provided`),this.getService(implementors[0].id);const selected=implementors.map((reg=>reg.getMetadata())).find(resolver);if(void 0!==selected)return this.getService(selected.id);log.warning("Resolver callback did not find any implementations")}},{key:"listRegistrations",value:function(){log.info(`Currently registered services: ${this.registry.getRegistrationIds().join(", ")}`)}}]),ServiceManager}();const SERVICE_MANAGER_KEY=Symbol.for("jutro.services.serviceManager");-1===Object.getOwnPropertySymbols(global).indexOf(SERVICE_MANAGER_KEY)&&(global[SERVICE_MANAGER_KEY]=new ServiceManager);export default global[SERVICE_MANAGER_KEY];