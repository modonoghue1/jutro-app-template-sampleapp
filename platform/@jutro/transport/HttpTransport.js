import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";import{fastOptionsMerge}from"./helper";import{HttpEventTypes}from"./common";function defaultOnResponse(value){return Promise.resolve(value)}function defaultOnError(value){return Promise.reject(value)}function defaultOnException(error){return Promise.reject(error)}function defaultOnTrace(){}function defaultOnFetch(url,options,fetchCall=fetch){return fetchCall(url,options)}export let HttpTransport=function HttpTransport(handlers){_classCallCheck(this,HttpTransport),_defineProperty(this,"onAuth",void 0),_defineProperty(this,"onResponse",void 0),_defineProperty(this,"onErrorResponse",void 0),_defineProperty(this,"onException",void 0),_defineProperty(this,"onTrace",void 0),_defineProperty(this,"onFetch",void 0),_defineProperty(this,"fetch",(async(url,method,opts)=>{const options={...opts,method:method},start=Date.now(),fetchWithTrace=async()=>{this.onTrace(HttpEventTypes.request,{url:url,options:options});let fetchOptions=options;if(this.onAuth){const authOptions=await this.onAuth();fetchOptions=fastOptionsMerge(options,authOptions)}return fetch(url,fetchOptions)};try{const response=await this.onFetch(url,options,fetchWithTrace);return response.ok?(this.onTrace(HttpEventTypes.response,{url:url,options:options,response:response,duration:Date.now()-start}),this.onResponse(response)):(this.onTrace(HttpEventTypes.error,{url:url,options:options,error:response,duration:Date.now()-start}),this.onErrorResponse(response))}catch(exception){return this.onTrace(HttpEventTypes.exception,{url:url,options:options,exception:exception.toString(),duration:Date.now()-start}),this.onException(exception)}}));const _ref=handlers||{},onAuth=_ref.onAuth,onErrorResponse=_ref.onErrorResponse,onException=_ref.onException,onFetch=_ref.onFetch,onResponse=_ref.onResponse,onTrace=_ref.onTrace;this.onAuth=onAuth,this.onFetch=onFetch||defaultOnFetch,this.onResponse=onResponse||defaultOnResponse,this.onErrorResponse=onErrorResponse||defaultOnError,this.onException=onException||defaultOnException,this.onTrace=onTrace||defaultOnTrace};