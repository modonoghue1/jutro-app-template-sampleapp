import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import _ from"lodash";import{log}from"@jutro/logger";import{refTypeMap,REF_PROPERTY,REF_PROPERTY_SHORTCUT}from"../common/refs";export function resolveContentReference(item,rootMetadata){return _.isString(item)&&item.startsWith(REF_PROPERTY_SHORTCUT)?extendMetadata(void 0,item.substr(REF_PROPERTY_SHORTCUT.length),rootMetadata):item[REF_PROPERTY]?extendMetadata(item,item[REF_PROPERTY],rootMetadata):item}export function extendMetadata(targetItem,refKey,rootMetadata){if(!refKey)return targetItem;const parts=refKey.split("/"),baseItem=_.get(rootMetadata,parts);if(!baseItem)return log.warning(`unable to resolve @ref: "${refKey}"`),targetItem;let extendedItem=baseItem;return targetItem&&(extendedItem={...baseItem,...targetItem},delete extendedItem[REF_PROPERTY],baseItem.componentProps&&targetItem.componentProps&&(extendedItem.componentProps={...baseItem.componentProps,...targetItem.componentProps})),function(extendedItem,parts,refKey){if(!extendedItem.id||!extendedItem.type){const _parts=_slicedToArray(parts,2),idFromRefKey=_parts[0],typeFromRefKey=_parts[1];extendedItem.id||(idFromRefKey?extendedItem.id=idFromRefKey:log.warning(`unable to resolve 'id' from: "${refKey}"`)),extendedItem.type||(typeFromRefKey?extendedItem.type=refTypeMap[typeFromRefKey]:log.warning(`unable to resolve 'type' from: "${refKey}"`))}}(extendedItem,parts.reverse(),refKey),extendedItem}