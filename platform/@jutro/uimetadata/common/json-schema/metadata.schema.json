{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "version": "6.5.0",
  "title": "Jutro Metadata",
  "description": "Metadata for rendering Jutro UI components, containers, elements and actions",
  "definitions": {
    "metadata": {
      "layout": {
        "type": "object",
        "required": [
          "component"
        ],
        "additionalProperties": false,
        "allOf": [
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ColumnsLayout"
                    },
                    {
                      "const": "columnslayout"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "columns": {
                      "description": "Grid's columns width/ratio configuration. The columns length for desktop have to be equal to number of children (columns). If not provided, it will be inferred as the number of children with a width of one fraction for each column."
                    },
                    "onColumnsRearrange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "variant": {
                      "type": "string",
                      "enum": [
                        "mergeColumnsToFirst",
                        "mergeColumnsToLast",
                        "stackColumnsToFirst",
                        "stackColumnsToLast",
                        "default"
                      ],
                      "description": "Specifies how the columns will be stacked or merged on the breakpoint. Ignored if `onColumnsRearrange` provided",
                      "defaultValue": "default"
                    },
                    "gap": {
                      "defaultValue": "large"
                    },
                    "tablet": {
                      "defaultValue": {
                        "columns": [
                          1
                        ],
                        "gridItems": []
                      }
                    },
                    "phoneWide": {
                      "defaultValue": {
                        "columns": [
                          1
                        ],
                        "gridItems": []
                      }
                    },
                    "phone": {
                      "defaultValue": {
                        "columns": [
                          1
                        ],
                        "gridItems": []
                      }
                    },
                    "tag": {
                      "defaultValue": "section"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders number of independent columns and manages its order for different breakpoints. Extends GridLayout component. By default for desktop, it divides columns to have equal width (e.g 3 columns => [1, 1, 1]), for tablet and mobile renders single column grid."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FlexItem"
                    },
                    {
                      "const": "flexitem"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "visible": {
                      "type": "boolean",
                      "description": "Define whether FlexItem is visible"
                    },
                    "grow": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Whether flex item can grow"
                    },
                    "shrink": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Whether flex item can shrink"
                    },
                    "textAlign": {
                      "type": "string",
                      "enum": [
                        "left",
                        "center",
                        "right"
                      ],
                      "description": "Horizontally align the contents of the column"
                    },
                    "alignSelf": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "left",
                        "center",
                        "right",
                        "baseline",
                        "stretch"
                      ],
                      "description": "Align the flex item according to the cross axis of the flex direction."
                    },
                    "tag": {
                      "type": "string",
                      "description": "Dom tag to use",
                      "defaultValue": "div"
                    },
                    "className": {
                      "type": "string",
                      "description": "Css class(es) to append to tag"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any FlexItem property for use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any FlexItem property for use at 'phoneWide' breakpoint;"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any FlexItem property for use at 'tablet' breakpoint;"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Defines a css grid 'FlexItem'. This is used in conjunction with 'Grid' parent."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Flex"
                    },
                    {
                      "const": "flex"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "gap": {
                      "type": "string",
                      "enum": [
                        "none",
                        "small",
                        "medium",
                        "large"
                      ],
                      "description": "Gap between rows and columns ('none', 'small', 'medium', 'large')",
                      "defaultValue": "medium"
                    },
                    "alignItems": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "left",
                        "center",
                        "right",
                        "baseline",
                        "stretch"
                      ],
                      "description": "Align all items within the grid in the axis opposite to its direction; default is stretch"
                    },
                    "alignContent": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "left",
                        "center",
                        "right",
                        "baseline",
                        "stretch"
                      ],
                      "description": "Align the flex within its container in the axis opposite to its direction; default is stretch"
                    },
                    "justifyContent": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "left",
                        "center",
                        "right",
                        "around",
                        "between",
                        "evenly"
                      ],
                      "description": "Justify the content in the flex direction: horizontally if direction is 'row' (default) or vertically if direction is 'column'"
                    },
                    "direction": {
                      "type": "string",
                      "enum": [
                        "row",
                        "rowReverse",
                        "column",
                        "columnReverse"
                      ],
                      "description": "Set the flex direction (row, rowReverse, column, columnReverse)",
                      "defaultValue": "row"
                    },
                    "tag": {
                      "type": "string",
                      "description": "Optional dom tag to render",
                      "defaultValue": "div"
                    },
                    "className": {
                      "type": "string",
                      "description": "Optional css class(es) to add to the flex tag"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any Flex property for use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any Flex property for use at 'phoneWide' breakpoint"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any Flex property for use at 'tablet' breakpoint;"
                    },
                    "theme": {
                      "type": "object",
                      "properties": {
                        "getStyle": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Theme to apply to component"
                    },
                    "wrap": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "true",
                            "false",
                            "reverse"
                          ]
                        }
                      ],
                      "description": "Wrap (true), don't wrap (false), reverse wrap (reverse) flex items in the container",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Defines a css grid 'Flex'. This is used in conjunction with 'FlexItem' children."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "GridItem"
                    },
                    {
                      "const": "griditem"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "clone": {
                      "type": "boolean",
                      "description": "Render the child without tag wrapper. It passes classNames and styles directly to child element if possible. If not possible, it falls back to wrapping with a tag (for not valid React elements)"
                    },
                    "fullWidth": {
                      "type": "boolean",
                      "description": "If true, item takes full width of parent grid. Ignored if colStart or colSpan is specified."
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "Specify whether Grid item should be visible"
                    },
                    "rowSpan": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "How many rows it takes"
                    },
                    "rowStart": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Row number to start"
                    },
                    "colSpan": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "How many columns it takes"
                    },
                    "colStart": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Column number to start"
                    },
                    "textAlign": {
                      "type": "string",
                      "enum": [
                        "left",
                        "center",
                        "right"
                      ],
                      "description": "Horizontally align the contents of the column"
                    },
                    "valign": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "baseline",
                        "stretch"
                      ],
                      "description": "Vertically align the column (relative to other columns in the same row). By default the column will be stretched to equal height."
                    },
                    "align": {
                      "type": "string",
                      "enum": [
                        "start",
                        "center",
                        "end",
                        "stretch"
                      ],
                      "description": "Align the column. By default the column will be stretched horizontally."
                    },
                    "tag": {
                      "type": "string",
                      "description": "Dom tag to use",
                      "defaultValue": "div"
                    },
                    "className": {
                      "type": "string",
                      "description": "Css class(es) to append to tag"
                    },
                    "style": {
                      "type": "object",
                      "description": "DOM element styles"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any GridItem property for use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any GridItem property for use at 'phoneWide' breakpoint"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any GridItem property for use at 'tablet' breakpoint"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Defines a css grid 'GridItem'. This is used in conjunction with 'Grid' parent."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "GridLayout"
                    },
                    {
                      "const": "gridlayout"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "defaultGridItem": {
                      "description": "`GridItem` properties that will to be applied to each child by default."
                    },
                    "gridItems": {
                      "type": "array",
                      "items": {},
                      "description": "An array of GridItem properties to be applied to child with the same index. If provided, it will extends/override the `defaultGridItem` properties for each item. Passing `null` or `undefined` will skip applying it to GridItem.",
                      "defaultValue": []
                    },
                    "gap": {
                      "description": "Gap between rows and columns",
                      "defaultValue": "large"
                    },
                    "tag": {
                      "description": "Optional dom tag to render",
                      "defaultValue": "section"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any GridLayout property for use at 'phone' breakpoint",
                      "defaultValue": {
                        "columns": [
                          1
                        ],
                        "gridItems": []
                      }
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any GridLayout property for use at 'phoneWide' breakpoint",
                      "defaultValue": {
                        "columns": [
                          1
                        ],
                        "gridItems": []
                      }
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any GridLayout property for use at 'tablet' and 'phone' breakpoint;",
                      "defaultValue": {
                        "columns": [
                          1
                        ],
                        "gridItems": []
                      }
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a CSS Grid and applies GridItem styles to each child (using GridItem's `clone` property (React.cloneElement)). For tablet and mobile renders single column grid by default."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Grid"
                    },
                    {
                      "const": "grid"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "columns": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "description": "Define explicit columns widths"
                    },
                    "repeat": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "auto-fit",
                            "auto-fill"
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Repeat columns"
                    },
                    "rows": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "description": "Define explicit rows heights"
                    },
                    "autoRows": {
                      "type": "array",
                      "description": "Define implicit rows"
                    },
                    "gap": {
                      "type": "string",
                      "enum": [
                        "none",
                        "small",
                        "medium",
                        "large"
                      ],
                      "description": "Gap between rows and columns ('none', 'small', 'medium', 'large')",
                      "defaultValue": "medium"
                    },
                    "hgap": {
                      "type": "string",
                      "enum": [
                        "none",
                        "small",
                        "medium",
                        "large"
                      ],
                      "description": "Gap between columns ('none', 'small', 'medium', 'large') If unspecified, will fallback to 'gap' property."
                    },
                    "vgap": {
                      "type": "string",
                      "enum": [
                        "none",
                        "small",
                        "medium",
                        "large"
                      ],
                      "description": "Gap between rows ('none', 'small', 'medium', 'large') If unspecified, will fallback to 'gap' property."
                    },
                    "valignContent": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "baseline",
                        "stretch"
                      ],
                      "description": "Vertical align the grid within its container; default - 'stretch'"
                    },
                    "justifyContent": {
                      "type": "string",
                      "enum": [
                        "left",
                        "center",
                        "right",
                        "around",
                        "between",
                        "evenly",
                        "stretch"
                      ],
                      "description": "Justify the grid within its container (left, center, right, around, between, evenly)"
                    },
                    "valignItems": {
                      "type": "string",
                      "enum": [
                        "top",
                        "middle",
                        "bottom",
                        "baseline",
                        "stretch"
                      ],
                      "description": "Vertical align all items within the grid; default - 'stretch'"
                    },
                    "justifyItems": {
                      "type": "string",
                      "enum": [
                        "left",
                        "center",
                        "right",
                        "around",
                        "between",
                        "evenly",
                        "stretch"
                      ],
                      "description": "Justify all items within the grid (left, center, right, around, between, evenly)"
                    },
                    "tag": {
                      "type": "string",
                      "description": "Optional dom tag to render",
                      "defaultValue": "div"
                    },
                    "className": {
                      "type": "string",
                      "description": "Optional css class(es) to add to the grid tag"
                    },
                    "style": {
                      "type": "object",
                      "description": "DOM element styles"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any Grid property for use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any Grid property for use at 'phoneWide' breakpoint"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any Grid property for use at 'tablet' and 'phone' breakpoint;"
                    },
                    "blockPointerEvents": {
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a css grid. For each grid item, place its children in an Jutro `GridItem`."
            }
          }
        ]
      },
      "action": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for action; should be unique per page"
          },
          "type": {
            "const": "action",
            "description": "(required) type of metadata; this must always be 'action' for action definitions"
          },
          "component": {
            "type": "string",
            "description": "(required) component to render"
          },
          "componentProps": {
            "type": "object",
            "description": "component-specific properties"
          },
          "content": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "text content for action"
          },
          "selfLayout": {
            "$ref": "#/definitions/datatypes/selfLayoutShape",
            "description": "layout options for this item when used in another layout (eg. GridItem, FlexItem)"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "component"
        ],
        "description": "used to describe interactive/call-to-action items",
        "allOf": [
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Avatar"
                    },
                    {
                      "const": "avatar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Users first and last names, used as component alt text as well as to display initials if no image selected"
                    },
                    "icon": {
                      "type": "string",
                      "description": "Icon name from the material icons list to be displayed if no image or initials present",
                      "defaultValue": "gw-person"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "Additional component styling class name"
                    },
                    "imageSource": {
                      "type": "string",
                      "description": "Path to user image, preferentially shown before user initials or icon"
                    },
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "userAvatar": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "userAvatar message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "useAuthInfo": {
                      "type": "boolean",
                      "description": "If true, display user information based on Okta instead of passed props",
                      "defaultValue": false
                    },
                    "showImageBorder": {
                      "type": "boolean",
                      "description": "If true, border will be display"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Displays a \"user avatar\" element with an image, icon, or initials."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Breadcrumb"
                    },
                    {
                      "const": "breadcrumb"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class to wrap the component."
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "defaultMessage": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "object",
                                    "properties": {},
                                    "required": [],
                                    "additionalProperties": false
                                  }
                                },
                                "required": [],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "href": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "defaultMessage": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "object",
                                    "properties": {},
                                    "required": [],
                                    "additionalProperties": false
                                  }
                                },
                                "required": [],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "to": {
                            "oneOf": [
                              {
                                "$ref": "#/definitions/datatypes/intlShape"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "pathname": {
                                    "$ref": "#/definitions/datatypes/intlShape",
                                    "description": "Link path"
                                  },
                                  "search": {
                                    "type": "string",
                                    "description": "Query parameters"
                                  },
                                  "hash": {
                                    "$ref": "#/definitions/datatypes/intlShape",
                                    "description": "Hash to put in the URL"
                                  },
                                  "state": {
                                    "type": "object",
                                    "description": "State to persist to the location"
                                  }
                                },
                                "required": [],
                                "additionalProperties": false
                              }
                            ],
                            "description": "Internal link."
                          },
                          "className": {
                            "type": "string"
                          },
                          "history": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "text"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Takes an array of objects, each item having props for the used Link type component."
                    },
                    "theme": {
                      "type": "object",
                      "description": "Theme config to apply."
                    },
                    "renderLinkTrigger": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "lastItemClickable": {
                      "type": "boolean",
                      "description": "Determines if the last item is a link."
                    },
                    "backLinkWithoutText": {
                      "type": "boolean",
                      "description": "Determines if the backLink include \"Back\" text or just \"arrow\" icon."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Displays a \"breadcrumb\" of links to previous pages with anchor tags or Link components"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Button"
                    },
                    {
                      "const": "button"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "iconClassName": {
                      "type": "string",
                      "description": "CSS class name for icon"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "If `true`, this button is disabled",
                      "defaultValue": false
                    },
                    "fullWidth": {
                      "type": "boolean",
                      "description": "If `true`, the button expands to the available width",
                      "defaultValue": false
                    },
                    "icon": {
                      "type": "string",
                      "description": "Optional icon name"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Where the icon is placed relative to the text",
                      "defaultValue": "left"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "renderContent": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "size": {
                      "type": "string",
                      "enum": [
                        "small",
                        "medium"
                      ],
                      "description": "Allows you to select the smaller or larger variant",
                      "defaultValue": "medium"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "filled",
                        "outlined",
                        "text"
                      ],
                      "description": "Determines the display variety (filled, outlined, text)",
                      "defaultValue": "filled"
                    },
                    "href": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "if this prop is used an `<a>` tag will be used instead of `<button>`  this will be the href passed to the `<a>` tag used."
                    },
                    "actionType": {
                      "type": "string",
                      "enum": [
                        "button",
                        "submit",
                        "reset"
                      ],
                      "description": "Type of action button performs",
                      "defaultValue": "button"
                    },
                    "ref": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "React.ForwardedRef or React.MutableRefObject access prop"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ColorSwatch"
                    },
                    {
                      "const": "colorswatch"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Title of the color"
                    },
                    "colorProperties": {
                      "anyOf": [
                        {},
                        {}
                      ],
                      "description": "Color properties containing either color and hex color for solid colors or starting and finishing colors and hexColors of a gradient"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "gradient",
                        "solid"
                      ],
                      "description": "Type of the color. Either gradient or solid",
                      "defaultValue": "solid"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [
                    "title",
                    "colorProperties"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "ColorSwatch"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FooterNavLink"
                    },
                    {
                      "const": "footernavlink"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "header": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Link header."
                    },
                    "url": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "External link."
                    }
                  },
                  "required": [
                    "header"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "The `FooterNavLink` component is designed as a simple component for presenting a navigation link inside the `FooterNavBar` container."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "IconButton"
                    },
                    {
                      "const": "iconbutton"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "iconClassName": {
                      "type": "string",
                      "description": "Additional class names for icon."
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onMouseDown": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onKeyDown": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onKeyPress": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "ariaLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Aria label text"
                    },
                    "icon": {
                      "type": "string",
                      "description": "icon name"
                    },
                    "iconColor": {
                      "type": "string",
                      "enum": [
                        "light",
                        "neutral",
                        "dark"
                      ],
                      "description": "The color of the icon",
                      "defaultValue": "dark"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "If `true`, this button is disabled",
                      "defaultValue": false
                    },
                    "tooltip": {
                      "description": "IconButton tooltip"
                    }
                  },
                  "required": [
                    "icon"
                  ],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Link"
                    },
                    {
                      "const": "link"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "If `true`, this link is disabled",
                      "defaultValue": false
                    },
                    "icon": {
                      "type": "string",
                      "description": "Optional icon name"
                    },
                    "inline": {
                      "type": "boolean",
                      "description": "Indicates whether link located inside of paragraph",
                      "defaultValue": false
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Where the icon is placed relative to the text",
                      "defaultValue": "left"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "to": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "href": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The destination path when link is clicked. Use this for paths external to the application."
                    },
                    "target": {
                      "type": "string",
                      "description": "Where to display linked URL. Used only for external paths."
                    },
                    "rel": {
                      "type": "string",
                      "description": "Relationship of the linked URL. Used only for external paths."
                    },
                    "textClassName": {
                      "type": "string",
                      "description": "CSS class name for the link text"
                    },
                    "activeClassName": {
                      "type": "string",
                      "description": "CSS class name for element when it is active"
                    },
                    "exact": {
                      "type": "boolean",
                      "description": "When true, the activeClassName will only be applied if location is matched exactly"
                    },
                    "history": {
                      "description": "Specific router history to use for navigation"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "NotificationAction"
                    },
                    {
                      "const": "notificationaction"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Notification popover title"
                    },
                    "headerLink": {
                      "type": "object",
                      "properties": {
                        "label": {},
                        "onClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "href": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "message id"
                                },
                                "defaultMessage": {
                                  "type": "string",
                                  "description": "default display text"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "additional message description"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "id",
                                "defaultMessage"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "string",
                                  "body": "$1"
                                },
                                {
                                  "label": "react-intl object",
                                  "body": {
                                    "id": "$1",
                                    "defaultMessage": "$2",
                                    "description": "$3"
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Default button label when no context is active"
                        }
                      },
                      "required": [
                        "label"
                      ],
                      "additionalProperties": false,
                      "description": "Description for header link"
                    },
                    "footerLink": {
                      "type": "object",
                      "properties": {
                        "label": {},
                        "onClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "href": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "message id"
                                },
                                "defaultMessage": {
                                  "type": "string",
                                  "description": "default display text"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "additional message description"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "id",
                                "defaultMessage"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "string",
                                  "body": "$1"
                                },
                                {
                                  "label": "react-intl object",
                                  "body": {
                                    "id": "$1",
                                    "defaultMessage": "$2",
                                    "description": "$3"
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Default button label when no context is active"
                        }
                      },
                      "required": [
                        "label"
                      ],
                      "additionalProperties": false,
                      "description": "Description for footer link"
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "renderTrigger": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "align": {
                      "type": "string",
                      "description": "Popover alignment (relative to trigger element)"
                    },
                    "isFlipEnabled": {
                      "type": "boolean",
                      "description": "Should popover flip when it is about to overflow the visible area"
                    },
                    "onClosed": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [
                    "renderTrigger"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "NotificationAction"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ActionItem"
                    },
                    {
                      "const": "actionitem"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "icon": {
                      "type": "string",
                      "description": "Optional icon name"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "label": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Label for action"
                    },
                    "isEditTrigger": {
                      "type": "boolean",
                      "description": "Determines if action triggers edit mode for row"
                    },
                    "triggerOnRowClick": {
                      "type": "boolean",
                      "description": "Determines if row click should trigger action"
                    },
                    "singleActionType": {
                      "type": "string",
                      "enum": [
                        "icon",
                        "link"
                      ],
                      "description": "If action is single - determines it should be displayed as icon or link"
                    },
                    "tooltip": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "placement": {
                          "type": "string"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Tooltip props"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "ActionItem"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "AsyncButtonLink"
                    },
                    {
                      "const": "asyncbuttonlink"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "failTo": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "failToMessage": {
                      "type": "string",
                      "description": "The message shown when promise is rejected; shown if 'failTo' is not provided"
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message shown when executing trigger/promise"
                    },
                    "replace": {
                      "type": "boolean",
                      "description": "The replace prop will replace the current entry in the history stack"
                    },
                    "to": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "toMessage": {
                      "type": "string",
                      "description": "The message shown when promise is resolved; shown if 'to' is not provided"
                    },
                    "onTrigger": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "innerRef": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Get ref to the inner rendered <a> or <button>"
                    }
                  },
                  "required": [
                    "onTrigger"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "AsyncButtonLink is a Jutro component, designed following the principles of Link (React Router 4). AsyncButtonLink invokes the trigger and wait for promise to be resolved or rejected. Meanwhile the promise is in execution, the component updates its content within the message provided by property {message} Case promise has been resolved, AsyncButtonLink attempts to navigate to destination provided by property {to} Case promise has been rejected, AsyncButtonLink attempts to navigate to destination provided by property {failTo}"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "AsyncLink"
                    },
                    {
                      "const": "asynclink"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "failTo": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "failToMessage": {
                      "type": "string",
                      "description": "The message shown when promise is rejected; shown if 'failTo' is not provided"
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message shown when executing trigger/promise"
                    },
                    "replace": {
                      "type": "boolean",
                      "description": "The replace prop will replace the current entry in the history stack"
                    },
                    "to": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "toMessage": {
                      "type": "string",
                      "description": "The message shown when promise is resolved; shown if 'to' is not provided"
                    },
                    "onTrigger": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    }
                  },
                  "required": [
                    "onTrigger"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "AsyncLink is a Jutro component, designed following the principles of Link (React Router 4). AsyncLink invokes the trigger and wait for promise to be resolved or rejected. Meanwhile the promise is in execution, the component updates its content within the message provided by property {message} Case promise has been resolved, AsyncLink attempts to navigate to destination provided by property {to} Case promise has been rejected, AsyncLink attempts to navigate to destination provided by property {failTo} AsyncLink automatically adds the href for anchor tag having the to property defined; It follows the react-router-4 implementation: https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/Link.js"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ButtonLink"
                    },
                    {
                      "const": "buttonlink"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "replace": {
                      "type": "boolean",
                      "description": "The replace prop will replace the current entry in the history stack",
                      "defaultValue": false
                    },
                    "to": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "href": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The destination path when promise is resolved; Use this for paths external to the application."
                    },
                    "innerRef": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "current": {
                              "type": "object"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Get ref to the inner rendered <a> or <button>"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "allowNoLeadingSlash": {
                      "type": "boolean",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "ButtonLink is an Jutro component,"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownMenuButton"
                    },
                    {
                      "const": "dropdownmenubutton"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "buttonText": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "Content to be rendered as the 'children' for the 'Button' component."
                    },
                    "isOpen": {
                      "type": "boolean",
                      "description": "The prop that indicates if the menu is currently visible."
                    },
                    "dropUp": {
                      "type": "boolean",
                      "description": "If `true`, the menu appears above the trigger component."
                    },
                    "alignRight": {
                      "type": "boolean",
                      "description": "If `true`, menu items are aligned to the right edge of the menu."
                    },
                    "menuClassName": {
                      "type": "string",
                      "description": "Override class for the inner menu of the dropdown menu"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "DropdownMenuButton"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownMenuLink"
                    },
                    {
                      "const": "dropdownmenulink"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "to": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pathname": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Link path"
                            },
                            "search": {
                              "type": "string",
                              "description": "Query parameters"
                            },
                            "hash": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Hash to put in the URL"
                            },
                            "state": {
                              "type": "object",
                              "description": "State to persist to the location"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Internal link."
                    },
                    "href": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "External link."
                    },
                    "target": {
                      "type": "string",
                      "description": "Specifies where to open the external link."
                    },
                    "rel": {
                      "type": "string",
                      "description": "Specifies the relationship between the current and an external document."
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "If `true`, this link is disabled"
                    },
                    "onMenuItemClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "focused": {
                      "type": "boolean",
                      "description": "If `true`, the link is considered as a currently active one"
                    },
                    "className": {
                      "type": "string",
                      "description": "The class name of the link"
                    },
                    "activeClassName": {
                      "type": "string",
                      "description": "The class to give the link when it is active"
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "If true, this link is visible."
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "DropdownMenuLink"
            }
          }
        ]
      },
      "container": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for container; should be unique per page"
          },
          "type": {
            "const": "container",
            "description": "(required) type of metadata; this must always be 'container' for container definitions"
          },
          "component": {
            "type": "string",
            "description": "(required) component or DOM element to render"
          },
          "componentProps": {
            "type": "object",
            "properties": {
              "path": {
                "$ref": "#/definitions/datatypes/pathShape"
              }
            },
            "description": "component-specific properties"
          },
          "content": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "the content to display; single component or array of components"
          },
          "contentLayout": {
            "$ref": "#/definitions/datatypes/contentLayoutShape",
            "description": "layout options for the content of this item"
          },
          "selfLayout": {
            "$ref": "#/definitions/datatypes/selfLayoutShape",
            "description": "layout options for this item when used in another layout (eg. GridItem, FlexItem)"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "component"
        ],
        "description": "used to describe items that contain other items",
        "allOf": [
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "AccordionCard"
                    },
                    {
                      "const": "accordioncard"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "chevron": {
                      "type": "boolean",
                      "description": "Show chevron in header",
                      "defaultValue": false
                    },
                    "chevronAlignment": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Position of chevron",
                      "defaultValue": "left"
                    },
                    "className": {
                      "type": "string",
                      "description": "Additional styles for whole card"
                    },
                    "collapseClassName": {
                      "type": "string",
                      "description": "Additional styles for Collapse"
                    },
                    "cardBodyClassName": {
                      "type": "string",
                      "description": "Additional styles for card body inside Collapse"
                    },
                    "cardHeadingClassName": {
                      "type": "string",
                      "description": "Additional styles for card header"
                    },
                    "errorState": {
                      "type": "boolean",
                      "description": "Indicates if there is an error within the card contents",
                      "defaultValue": false
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "property to render title for header"
                    },
                    "renderHeader": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "isCollapsible": {
                      "type": "boolean",
                      "description": "Indicates if the card should be collapsible",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `AccordionCard` component offers Card-like behavior inside an `Accordion`. It accepts most of the same properties as Card (except 'isOpen' and 'onToggleOpen' which is managed by the containing Accordion)."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Accordion"
                    },
                    {
                      "const": "accordion"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "accordionStates": {
                      "type": "array",
                      "description": "An array containing the expanded accordion ids"
                    },
                    "boldFont": {
                      "type": "boolean",
                      "description": "Changes the font weight of the accordion header, set to `true` by default (bold)",
                      "defaultValue": true
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "closeOthers": {
                      "type": "boolean",
                      "description": "Optional flag indicating whether other accordions should be collapsed when this one is expanded",
                      "defaultValue": true
                    },
                    "defaultOpenedId": {
                      "type": "string",
                      "description": "The optional id of the accordion to be opened by default"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Property to make accordion disabled",
                      "defaultValue": false
                    },
                    "showFrame": {
                      "type": "boolean",
                      "description": "Shows the accordion borders when true, set to `true` by default",
                      "defaultValue": true
                    },
                    "onUpdateAccordionStates": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `Accordion` component is used to surround a set of `Card` components so that the user can open or close them."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Card"
                    },
                    {
                      "const": "card"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The header title to be displayed in the Card"
                    },
                    "subTitle": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Subtitle of Card"
                    },
                    "renderHeader": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "headerClass": {
                      "type": "string",
                      "description": "Additional CSS class name for header"
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "tooltip": {
                      "type": "object",
                      "description": "Card header tooltip",
                      "properties": {
                        "id": {
                          "$ref": "#/definitions/datatypes/idShape",
                          "description": "Used to identify the component. Referenced to find it in the document tree"
                        },
                        "icon": {
                          "type": "string",
                          "description": "Icon to be displayed"
                        },
                        "text": {
                          "$ref": "#/definitions/datatypes/intlShape",
                          "description": "Text to be rendered inside the tooltip"
                        },
                        "title": {
                          "$ref": "#/definitions/datatypes/intlShape",
                          "description": "Title to be rendered inside the tooltip"
                        },
                        "href": {
                          "type": "string",
                          "description": "Url to be opened when user clicks on link text"
                        },
                        "link": {
                          "$ref": "#/definitions/datatypes/intlShape",
                          "description": "Text of link to be rendered inside tooltip"
                        },
                        "renderContent": {
                          "$ref": "#/definitions/datatypes/funcShape",
                          "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
                        },
                        "placement": {
                          "type": "string",
                          "description": "Direction for placing the tooltip against its trigger"
                        }
                      },
                      "additionalProperties": false
                    },
                    "isPanel": {
                      "type": "boolean",
                      "description": "Support for legacy styling, to look like Panel",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a card with a header and a body."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ClickableCard"
                    },
                    {
                      "const": "clickablecard"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "If true, Card component is disabled",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "ClickableCard"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ErrorBoundary"
                    },
                    {
                      "const": "errorboundary"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "onError": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "fallbackComponent": {
                      "type": "string",
                      "description": "An optional custom component to replace the error UI while keeping the error reporting"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Introduces a customizable error boundary capable of reporting errors to Jutro events and rendering acceptable UIs in production"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FooterNavBar"
                    },
                    {
                      "const": "footernavbar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FooterNavBar` component is designed as a container for navigation links inside the `Footer` container. It should be used along with `FooterNavLink` as children."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Footer"
                    },
                    {
                      "const": "footer"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "fluid": {
                      "type": "boolean",
                      "description": "Span the entire width."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `Footer` component is designed as the container for a set of components that should be displayed on the footer of application using `Jutro`. Dedicated components that should be used as children are `FooterNavBar` along with `FooterNavLink`s, `FooterText` and `FooterCopyright`."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "HeaderActions"
                    },
                    {
                      "const": "headeractions"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "HeaderActions"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Header"
                    },
                    {
                      "const": "header"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "containerClassName": {
                      "type": "string",
                      "description": "Additional class name for children container."
                    },
                    "sticky": {
                      "type": "boolean",
                      "description": "Sticky position of header."
                    },
                    "fluid": {
                      "type": "boolean",
                      "description": "Span the entire width."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Header"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "IFrame"
                    },
                    {
                      "const": "iframe"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "src": {
                      "type": "string",
                      "description": "src for iframe"
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "title for iframe"
                    },
                    "aspectRatio": {
                      "type": "string",
                      "enum": [
                        "4/3",
                        "16/9",
                        "17/9",
                        "2/1"
                      ],
                      "description": "aspectRatio for iframe"
                    },
                    "height": {
                      "type": "string",
                      "description": "height for iframe container in pixel or percentage format",
                      "defaultValue": "50%"
                    },
                    "className": {
                      "type": "string",
                      "description": "className for iframe"
                    },
                    "onLoad": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "showLoader": {
                      "type": "boolean",
                      "description": "show loader when iframe still loading",
                      "defaultValue": true
                    },
                    "noBorder": {
                      "type": "boolean",
                      "description": "hide the iframe border"
                    }
                  },
                  "required": [
                    "src",
                    "title"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "IFrame"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Panel"
                    },
                    {
                      "const": "panel"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "Additional styles to be applied to Panel"
                    },
                    "alignment": {
                      "type": "string",
                      "enum": [
                        "center",
                        "left",
                        "right"
                      ],
                      "description": "Alignment of the panel header"
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Title of Panel"
                    },
                    "subTitle": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Subtitle of Panel"
                    },
                    "renderHeader": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "headerClass": {
                      "type": "string",
                      "description": "Additional styles to be applied to Panel header"
                    },
                    "fluid": {
                      "type": "boolean",
                      "description": "Content spans the entire width."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "A container for child components. You can set a title and subtitle through the props. This component is a typical wrapper for a form, but can have any content."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "StickyFooter"
                    },
                    {
                      "const": "stickyfooter"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "hiddenOnLoad": {
                      "type": "boolean",
                      "description": "Sticky version is displayed only after initial view of children",
                      "defaultValue": true
                    },
                    "fullWidth": {
                      "type": "boolean",
                      "description": "If `fullWidth` is set then sticky version expands to full width of the screen using `position: fixed`, otherwise it fills the width of its parent using `position: sticky`",
                      "defaultValue": true
                    },
                    "className": {
                      "type": "string",
                      "description": "Additional class name for component."
                    },
                    "stickyClassName": {
                      "type": "string",
                      "description": "Additional class name for component applied only on sticky version."
                    },
                    "containerClassName": {
                      "type": "string",
                      "description": "Additional class name for children container component."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "StickyFooter"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "TabSet"
                    },
                    {
                      "const": "tabset"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "activeTab": {
                      "type": "string",
                      "description": "The 'tabId' of the active tab; used in conjunction with `onTabChange`"
                    },
                    "onTabChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "Optional class name to apply to this component"
                    },
                    "showFrame": {
                      "type": "boolean",
                      "description": "If `true`, displays a frame surrounding `TabSet`",
                      "defaultValue": false
                    },
                    "defaultActiveTab": {
                      "type": "string",
                      "description": "Which tab is active by default"
                    },
                    "label": {
                      "type": "string",
                      "description": "Optional label describing the purpose of the tablist"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a container for a set of `Tab` components. Extracts the `heading` prop from each of its `Tab` children and uses them to render the tab navigation bar."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Tab"
                    },
                    {
                      "const": "tab"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "If true, this `Tab` is disabled.",
                      "defaultValue": false
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "If true, this `Tab` is visible.",
                      "defaultValue": true
                    },
                    "className": {
                      "type": "string",
                      "description": "Optional class name to apply to this component"
                    },
                    "heading": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "The heading for the `Tab`. This prop is NOT rendered by the `Tab` component directly, but rather is extracted out by the `TabSet` component and rendered by it instead Can either be a simple string or renderer function (which should accept rendering props object as an argument)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `Tab` component is designed to be used as the child of a `TabSet` component. It will render its `children` inside the appropriate tab pane <div> only if its `id` matches the `activeTabId` from the context provided by the `TabSet` AND the component is not `disabled`. Also, the `heading` prop will never be rendered internally by a `Tab` as this will be done by the `TabSet` container instead."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ActionColumn"
                    },
                    {
                      "const": "actioncolumn"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "singleActionType": {
                      "type": "string",
                      "enum": [
                        "icon",
                        "link"
                      ],
                      "description": "Specifies the type of action 'icon' or 'link', when one action is rendered By default renders `Button` action"
                    },
                    "wrapActions": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "allWhen": {
                                  "type": "number"
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "maxItems": {
                                  "type": "number"
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "never",
                            "always"
                          ]
                        }
                      ],
                      "description": "Specifies behavior of wrapping action items in a dropdown. By default dropdown is shown for 3 or more actions. \"never\" - actions are never wrapped, all are visible in a row; \"always\" - all actions are placed in a dropdown regardless of their number; { \"allWhen\": N } - all actions are placed in a dropdown when there are more than N (inclusive),  otherwise are visible (default, N=3); { \"maxItems\": N } - maximum N items are visible (including dropdown), excess is placed in a dropdown.",
                      "defaultValue": {
                        "allWhen": 3
                      }
                    },
                    "hideIconsInDropdown": {
                      "type": "boolean",
                      "description": "If set to true only labels are displayed in the dropdown with actions, icons are hidden",
                      "defaultValue": false
                    },
                    "tooltip": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "Tooltip configuration which is shared between all actions false - disable tooltips in column object - has same fields as regular tooltip component"
                    },
                    "renderCell": {},
                    "renderEditCell": {},
                    "getRowActions": {},
                    "columnClassName": {},
                    "cellClassName": {},
                    "width": {
                      "defaultValue": 120
                    },
                    "sortable": {
                      "defaultValue": false
                    },
                    "textAlign": {
                      "defaultValue": "right"
                    },
                    "onFilter": {}
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "ActionColumn"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DataTable"
                    },
                    {
                      "const": "datatable"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "The full path of view model, it also acts as an accessor for datatable's data"
                    },
                    "showSearch": {
                      "type": "boolean",
                      "description": "Defines whether search bar should be shown",
                      "defaultValue": true
                    },
                    "showPagination": {
                      "type": "boolean",
                      "description": "Defines whether pagination should be shown or not",
                      "defaultValue": true
                    },
                    "config": {
                      "description": "Used to set data table config. Use it together with onConfigChange to control data table from outside. It includes sorting method, filtering value, page, page size, edited row and columns sorting"
                    },
                    "defaultConfig": {
                      "description": "The configuration applied only on component initialization. It includes sorting method, filtering value, page, page size, edited row and columns sorting",
                      "defaultValue": {
                        "filterValue": "",
                        "page": 0,
                        "pageSize": 10
                      }
                    },
                    "onConfigChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "pageSizeOptions": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "description": "List of page size options",
                      "defaultValue": [
                        10,
                        25,
                        50
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Cells data"
                    },
                    "onFilter": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onColumnFilter": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "filterPlaceholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Placeholder text for search input"
                    },
                    "expandable": {
                      "type": "boolean",
                      "description": "Possibility to make rows expandable",
                      "defaultValue": true
                    },
                    "multipleRowsExpandable": {
                      "type": "boolean",
                      "description": "Multiple rows can be expanded at the same time",
                      "defaultValue": true
                    },
                    "renderExpanderContent": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "headerMultiline": {
                      "type": "boolean",
                      "description": "If set to true header can be on 2 lines",
                      "defaultValue": false
                    },
                    "onRowClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "expandOnRowClick": {
                      "type": "boolean",
                      "description": "Row will expand on click"
                    },
                    "selectOnRowClick": {
                      "type": "boolean",
                      "description": "Row will be selected on click"
                    },
                    "selectionType": {
                      "type": "string",
                      "enum": [
                        "none",
                        "single",
                        "multi"
                      ],
                      "description": "Configures row selection capability (none, single row, multi row)",
                      "defaultValue": "none"
                    },
                    "selectedRows": {
                      "type": "array",
                      "items": {},
                      "description": "Currently selected rows (passing value for this prop makes component fully controlled)"
                    },
                    "selectionActions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "icon": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "callback": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "callback": {
                                    "type": "string"
                                  },
                                  "callbackProps": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "callback",
                                  "callbackProps"
                                ],
                                "additionalProps": false,
                                "defaultSnippets": [
                                  {
                                    "label": "Function name",
                                    "body": "${1:function_name}"
                                  },
                                  {
                                    "label": "Function metadata object",
                                    "body": {
                                      "callback": "$1",
                                      "callbackProps": {}
                                    }
                                  },
                                  {
                                    "label": "Function metadata object with props",
                                    "body": {
                                      "callback": "$1",
                                      "callbackProps": {
                                        "${2:property}": "${3:value}"
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                          }
                        },
                        "required": [
                          "icon",
                          "label",
                          "callback"
                        ],
                        "additionalProperties": false
                      },
                      "description": "List of actions available for selection"
                    },
                    "onSelectionChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "columnsConfigurable": {
                      "type": "boolean",
                      "description": "If set to false, end user will not have a possibility to customize visibility of columns",
                      "defaultValue": true
                    },
                    "loadingText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Text to show while data is loading, by default - 'Loading..'"
                    },
                    "noDataText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Text message, when no data present to be shown"
                    },
                    "localSorting": {
                      "type": "boolean",
                      "description": "If set to true, sorting is happening locally after data is fetched Only for async mode",
                      "defaultValue": false
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any DataTable property to use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any DataTable property to use 'phoneWide' and 'phone' breakpoint"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any DataTable property to use at 'tablet', 'phoneWide' and 'phone' breakpoint"
                    },
                    "onSaveRow": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onEditCancel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onEditStart": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onFetchData": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onGetRowId": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "rowIdPath": {
                      "type": "string",
                      "description": "Name of row object property containing the row id. Can accept nested paths. Takes precedence over onGetRowId prop."
                    },
                    "tableLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Data table aria label"
                    },
                    "numberOfRows": {
                      "type": "number",
                      "description": "Number of available rows"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Component for displaying tabular data"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DisplayColumn"
                    },
                    {
                      "const": "displaycolumn"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "fieldDatatype": {
                      "type": "string",
                      "defaultValue": "string"
                    },
                    "onAccessor": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "valueProps": {
                      "type": "object",
                      "description": "Props passed to underlying FieldValue. Useful for passing eg. showFractions: true"
                    },
                    "renderCell": {},
                    "renderEditCell": {},
                    "editCellClass": {},
                    "columnProportion": {
                      "defaultValue": 1
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FieldColumn"
                    },
                    {
                      "const": "fieldcolumn"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "model": {
                      "type": "object"
                    },
                    "basePath": {
                      "type": "string"
                    },
                    "uiMetadata": {
                      "type": "object"
                    },
                    "pageProps": {
                      "type": "object"
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "onAccessor": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "renderCell": {},
                    "renderEditCell": {},
                    "columnProportion": {
                      "defaultValue": 1
                    },
                    "fieldDatatype": {
                      "defaultValue": "string"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FilterBar"
                    },
                    {
                      "const": "filterbar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "uiProps": {
                      "type": "object",
                      "description": "Content metadata or an array of metadata"
                    },
                    "classNameMap": {
                      "type": "object",
                      "description": "Resolve class name to hashed class name"
                    },
                    "componentMap": {
                      "type": "object",
                      "description": "Resolve component map"
                    },
                    "callbackMap": {
                      "type": "object",
                      "description": "Resolve callback name to callback function"
                    },
                    "onFiltersChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "initialFilters": {
                      "type": "object",
                      "description": "Object with initial filters to be applied",
                      "defaultValue": {}
                    },
                    "searchKey": {
                      "type": "string",
                      "description": "Name of search filter key in filters data. Can not change during component lifetime",
                      "defaultValue": "search"
                    }
                  },
                  "required": [
                    "onFiltersChange"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "Component for filters rendering, supplied through metadata"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "JsonDataTable"
                    },
                    {
                      "const": "jsondatatable"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "callbackMap": {
                      "type": "object",
                      "description": "Resolve callback string to callback function"
                    },
                    "componentMap": {
                      "type": "object",
                      "description": "Resolve component string to component"
                    },
                    "data": {
                      "type": "object",
                      "description": "Data for this table"
                    },
                    "dataSchema": {
                      "type": "object",
                      "description": "Schema for this form; used for data props and validation"
                    },
                    "onDataSchemaExtension": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onDeleteRow": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onSaveRow": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "overrideProps": {
                      "type": "object",
                      "description": "optional Override props by all, type or id."
                    },
                    "showErrors": {
                      "type": "boolean",
                      "description": "optional Show errors for all invalid fields; true after user attempts to submit/perform an action"
                    },
                    "uiColumns": {
                      "type": "array",
                      "items": {},
                      "description": "Array of ui configs for columns"
                    },
                    "readOnly": {
                      "type": "boolean",
                      "description": "Indicate if the table should be editable or readOnly"
                    }
                  },
                  "required": [
                    "dataSchema"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "DataTable variant allowing to integrate with schema, metadata and data"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "RadioColumn"
                    },
                    {
                      "const": "radiocolumn"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "option": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The option to be displayed in cell"
                    },
                    "onOption": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onAccessor": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "renderCell": {},
                    "getRowActions": {},
                    "onFilter": {},
                    "columnProportion": {
                      "defaultValue": 1
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "TableColumn"
                    },
                    {
                      "const": "tablecolumn"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "The full path of view model, it also acts as an accessor for row's data"
                    },
                    "header": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "String or callback(props) to render the column header in the table"
                    },
                    "renderHeader": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "headerClassName": {
                      "type": "string",
                      "description": "Classname for header <th>"
                    },
                    "cell": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "String or callback(row, index, props) to render the column cell for a row in the table"
                    },
                    "renderCell": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "cellClassName": {
                      "type": "string",
                      "description": "Additional classname for cell (in order to use it in DataTable, specificity of the selector should be higher than 5 classnames)"
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "Is this column shown in the table"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any TableColumn property for use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any TableColumn property for use at 'phoneWide' and 'phone' breakpoint"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any TableColumn property for use at 'tablet', 'phoneWide' and 'phone' breakpoint"
                    },
                    "textAlign": {
                      "type": "string",
                      "enum": [
                        "left",
                        "center",
                        "right"
                      ],
                      "description": "Text-align css property value (default 'center')"
                    },
                    "width": {
                      "type": "number",
                      "description": "The width of current column, when `undefined` columns will share the table accordingly to columns columnProportion prop"
                    },
                    "columnProportion": {
                      "type": "number",
                      "description": "Proportion of the column. Doesn't work when width is defined",
                      "defaultValue": 1
                    },
                    "sortable": {
                      "type": "boolean",
                      "description": "To specify if the column is sortable, when `undefined` the column is sortable"
                    },
                    "renderEditCell": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "editCellClass": {
                      "type": "string",
                      "description": "Custom classname for column cell in the edit mode"
                    },
                    "columnClassName": {
                      "type": "string",
                      "description": "Classname for column"
                    },
                    "onFilter": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onSort": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "TableColumn"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Table"
                    },
                    {
                      "const": "table"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Title which is placed in title bar"
                    },
                    "renderTitle": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "Optional css class(es) to add to the grid tag"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Include any Table property for use at 'phone' breakpoint"
                    },
                    "phoneWide": {
                      "type": "object",
                      "description": "Include any Table property for use at 'phoneWide' and 'phone' breakpoint"
                    },
                    "tablet": {
                      "type": "object",
                      "description": "Include any Table property for use at 'tablet' and 'phone' breakpoint"
                    },
                    "renderTitleAction": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "columnsProportion": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "description": "Proportion of columns (e.g. [2, 2, 1])"
                    },
                    "placeholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Placeholder to show when data is empty"
                    },
                    "renderPhoneCardComponent": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "titleId": {
                      "type": "string",
                      "description": "The id used for the tables title for use in the aria-describedby"
                    },
                    "titlePosition": {
                      "type": "string",
                      "description": "The position of the title in the title bar (left, right, center)"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Optional string for generating keys for rows"
                          }
                        },
                        "required": [],
                        "additionalProperties": false
                      },
                      "description": "Cells data"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a table. You can use it to display data from a model."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ActionTitleBar"
                    },
                    {
                      "const": "actiontitlebar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "phone": {
                      "type": "object",
                      "properties": {
                        "className": {
                          "type": "string",
                          "description": "CSS class name for this component"
                        },
                        "children": {
                          "oneOf": [
                            {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            {
                              "type": "object"
                            }
                          ],
                          "description": "Children to be rendered inside this component"
                        }
                      },
                      "required": [
                        "children"
                      ],
                      "additionalProperties": false
                    },
                    "phoneWide": {
                      "type": "object",
                      "properties": {
                        "className": {
                          "type": "string",
                          "description": "CSS class name for this component"
                        },
                        "children": {
                          "oneOf": [
                            {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            {
                              "type": "object"
                            }
                          ],
                          "description": "Children to be rendered inside this component"
                        }
                      },
                      "required": [
                        "children"
                      ],
                      "additionalProperties": false
                    },
                    "tablet": {
                      "type": "object",
                      "properties": {
                        "className": {
                          "type": "string",
                          "description": "CSS class name for this component"
                        },
                        "children": {
                          "oneOf": [
                            {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            {
                              "type": "object"
                            }
                          ],
                          "description": "Children to be rendered inside this component"
                        }
                      },
                      "required": [
                        "children"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "EditCancelSaveTitleBar"
                    },
                    {
                      "const": "editcancelsavetitlebar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Title to render inside title bar"
                    },
                    "readOnly": {
                      "type": "boolean",
                      "description": "If true action buttons are not rendered"
                    },
                    "onEditClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onSaveClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onCancelClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "labels": {
                      "type": "object",
                      "properties": {
                        "edit": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "save": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "cancel": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "required": [
                        "edit",
                        "save",
                        "cancel"
                      ],
                      "additionalProperties": false,
                      "description": "Labels for rendered buttons"
                    },
                    "isEditMode": {
                      "type": "boolean",
                      "description": "If true save and cancel buttons will be rendered"
                    },
                    "isSaveEnabled": {
                      "type": "boolean",
                      "description": "Enables the save button"
                    },
                    "internalClassNames": {
                      "type": "object",
                      "properties": {
                        "button": {
                          "type": "string"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "ClassNames for internal components"
                    },
                    "phone": {
                      "type": "object",
                      "properties": {
                        "className": {
                          "type": "string",
                          "description": "CSS class name for this component"
                        },
                        "title": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Title to render inside title bar"
                        },
                        "readOnly": {
                          "type": "boolean",
                          "description": "If true action buttons are not rendered"
                        },
                        "onEditClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "onSaveClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "onCancelClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "labels": {
                          "type": "object",
                          "properties": {
                            "edit": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "save": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "cancel": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            }
                          },
                          "required": [
                            "edit",
                            "save",
                            "cancel"
                          ],
                          "additionalProperties": false,
                          "description": "Labels for rendered buttons"
                        },
                        "isEditMode": {
                          "type": "boolean",
                          "description": "If true save and cancel buttons will be rendered"
                        },
                        "isSaveEnabled": {
                          "type": "boolean",
                          "description": "Enables the save button"
                        },
                        "internalClassNames": {
                          "type": "object",
                          "properties": {
                            "button": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false,
                          "description": "ClassNames for internal components"
                        }
                      },
                      "required": [
                        "onEditClick",
                        "onSaveClick",
                        "onCancelClick",
                        "labels"
                      ],
                      "additionalProperties": false
                    },
                    "phoneWide": {
                      "type": "object",
                      "properties": {
                        "className": {
                          "type": "string",
                          "description": "CSS class name for this component"
                        },
                        "title": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Title to render inside title bar"
                        },
                        "readOnly": {
                          "type": "boolean",
                          "description": "If true action buttons are not rendered"
                        },
                        "onEditClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "onSaveClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "onCancelClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "labels": {
                          "type": "object",
                          "properties": {
                            "edit": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "save": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "cancel": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            }
                          },
                          "required": [
                            "edit",
                            "save",
                            "cancel"
                          ],
                          "additionalProperties": false,
                          "description": "Labels for rendered buttons"
                        },
                        "isEditMode": {
                          "type": "boolean",
                          "description": "If true save and cancel buttons will be rendered"
                        },
                        "isSaveEnabled": {
                          "type": "boolean",
                          "description": "Enables the save button"
                        },
                        "internalClassNames": {
                          "type": "object",
                          "properties": {
                            "button": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false,
                          "description": "ClassNames for internal components"
                        }
                      },
                      "required": [
                        "onEditClick",
                        "onSaveClick",
                        "onCancelClick",
                        "labels"
                      ],
                      "additionalProperties": false
                    },
                    "tablet": {
                      "type": "object",
                      "properties": {
                        "className": {
                          "type": "string",
                          "description": "CSS class name for this component"
                        },
                        "title": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Title to render inside title bar"
                        },
                        "readOnly": {
                          "type": "boolean",
                          "description": "If true action buttons are not rendered"
                        },
                        "onEditClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "onSaveClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "onCancelClick": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                        },
                        "labels": {
                          "type": "object",
                          "properties": {
                            "edit": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "save": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            },
                            "cancel": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "defaultMessage": {
                                      "type": "string"
                                    },
                                    "args": {
                                      "type": "object",
                                      "properties": {},
                                      "required": [],
                                      "additionalProperties": false
                                    }
                                  },
                                  "required": [],
                                  "additionalProperties": false
                                }
                              ]
                            }
                          },
                          "required": [
                            "edit",
                            "save",
                            "cancel"
                          ],
                          "additionalProperties": false,
                          "description": "Labels for rendered buttons"
                        },
                        "isEditMode": {
                          "type": "boolean",
                          "description": "If true save and cancel buttons will be rendered"
                        },
                        "isSaveEnabled": {
                          "type": "boolean",
                          "description": "Enables the save button"
                        },
                        "internalClassNames": {
                          "type": "object",
                          "properties": {
                            "button": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false,
                          "description": "ClassNames for internal components"
                        }
                      },
                      "required": [
                        "onEditClick",
                        "onSaveClick",
                        "onCancelClick",
                        "labels"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "onEditClick",
                    "onSaveClick",
                    "onCancelClick",
                    "labels"
                  ],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "GlobalizationSettingsCard"
                    },
                    {
                      "const": "globalizationsettingscard"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ]
                    },
                    "onLocaleChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onLanguageChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onSave": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "skipLocalStoragePersistence": {
                      "type": "boolean",
                      "defaultValue": false
                    },
                    "languageValue": {},
                    "localeValue": {}
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "SettingsCard"
                    },
                    {
                      "const": "settingscard"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string"
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ]
                    },
                    "isValid": {
                      "type": "boolean",
                      "defaultValue": true
                    },
                    "onSaveClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onCancelClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "readOnly": {
                      "type": "boolean"
                    },
                    "formProps": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "title",
                    "formProps"
                  ],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ThemeSettingsCard"
                    },
                    {
                      "const": "themesettingscard"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "defaultValue": "Theme"
                    },
                    "onSave": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "availableThemes": {},
                    "theme": {}
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "TitleElement"
                    },
                    {
                      "const": "titleelement"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FilterBar"
                    },
                    {
                      "const": "filterbar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "uiProps": {
                      "type": "object",
                      "description": "Content metadata or an array of metadata"
                    },
                    "onFiltersChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Component for filters rendering, supplied through metadata"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownMenuAvatar"
                    },
                    {
                      "const": "dropdownmenuavatar"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Menu header title text"
                    },
                    "subtitle": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Menu header subtitle text"
                    },
                    "username": {
                      "type": "string",
                      "description": "Users first and last names, used as component alt text as well as to display initials if no image selected"
                    },
                    "icon": {
                      "type": "string",
                      "description": "Icon name from Material Icons icon list to be displayed if no image or initials present"
                    },
                    "className": {
                      "type": "string",
                      "description": "Additional component styling class name"
                    },
                    "imageSource": {
                      "type": "string",
                      "description": "Path to user image, preferentially shown before user initials or icon"
                    },
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "userAvatar": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "userAvatar message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "isOpen": {
                      "type": "boolean",
                      "description": "The prop that indicates if the menu is currently visible."
                    },
                    "dropUp": {
                      "type": "boolean",
                      "description": "If `true`, the menu appears above the trigger component."
                    },
                    "alignRight": {
                      "type": "boolean",
                      "description": "If `true`, items are aligned to the right edge of the menu."
                    },
                    "useAuthInfo": {
                      "type": "boolean",
                      "description": "If `true`, display header information from Okta, if available, and Logout menu link"
                    },
                    "showImageBorder": {
                      "type": "boolean",
                      "description": "Defines whether image border should be shown or not"
                    },
                    "headerClassName": {
                      "type": "string",
                      "description": "Additional css class to the dropdown menu avatar header"
                    },
                    "authLinksClassName": {
                      "type": "string",
                      "description": "Additional css class to the dropdown menu avatar auth links"
                    },
                    "separatorClassName": {
                      "type": "string",
                      "description": "Optional css class to the dropdown menu separator"
                    },
                    "onBeforeLogout": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "dropdownClassName": {
                      "type": "string",
                      "description": "Optional css class to the dropdown menu"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "DropdownMenuAvatar"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownMenuHeader"
                    },
                    {
                      "const": "dropdownmenuheader"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "title": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "The element node representing the header title, in most cases, will be a plain string."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "DropdownMenuHeader"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownMenu"
                    },
                    {
                      "const": "dropdownmenu"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "renderTrigger": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onRenderTrigger": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "isOpen": {
                      "type": "boolean",
                      "description": "The prop that indicates if the menu is currently visible."
                    },
                    "dropUp": {
                      "type": "boolean",
                      "description": "If `true`, the menu appears above the trigger component."
                    },
                    "alignRight": {
                      "type": "boolean",
                      "description": "If `true`, items are aligned to the right edge of the menu."
                    },
                    "className": {
                      "type": "string",
                      "description": "Override class for dropdown menu"
                    },
                    "menuClassName": {
                      "type": "string",
                      "description": "Override class for the inner menu of the dropdown menu"
                    },
                    "focused": {
                      "type": "boolean",
                      "description": "If `true`, root element is considered as a currently active one"
                    },
                    "openMenuId": {
                      "type": "string",
                      "description": "Optional id of the component instance that's supposed be to currently opened. Mostly useful when rendering multiple instances next to each other (e.g. within Header)"
                    },
                    "onMenuOpen": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onMenuClose": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "keepContext": {
                      "type": "boolean",
                      "description": "Optional boolean that if true sets title to selected value",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "A dropdown menu where you can add your actions to each item."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "SideNavigation"
                    },
                    {
                      "const": "sidenavigation"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "routes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "path": {
                            "$ref": "#/definitions/datatypes/pathShape",
                            "description": "URL path of the route"
                          },
                          "exact": {
                            "description": "When true, will only match if the path matches the location.pathname exactly",
                            "type": "boolean"
                          },
                          "strict": {
                            "description": "When true, a path that has a trailing slash will only match a location.pathname with a trailing slash.",
                            "type": "boolean"
                          },
                          "sensitive": {
                            "description": "Match from case sensitive",
                            "type": "boolean"
                          },
                          "redirect": {
                            "$ref": "#/definitions/datatypes/pathShape",
                            "description": "Path to which redirect when entering current page"
                          },
                          "push": {
                            "description": "When true, redirecting will push a new entry onto the history instead of replacing the current one",
                            "type": "boolean"
                          },
                          "to": {
                            "$ref": "#/definitions/datatypes/toShape",
                            "description": "A location to redirect to"
                          },
                          "from": {
                            "description": "A pathname to redirect from.",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/definitions/datatypes/idShape",
                            "description": "Identifier for route"
                          },
                          "component": {
                            "description": "Component to be rendered as the destination page for this route",
                            "type": "string"
                          },
                          "componentProps": {
                            "description": "Properties for the component to be rendered",
                            "type": "object",
                            "properties": {},
                            "additionalProperties": true
                          },
                          "title": {
                            "$ref": "#/definitions/datatypes/intlShape",
                            "description": "Title to be displayed for route"
                          },
                          "showOnNavBar": {
                            "description": "Defines whether route should be shown in the navigation",
                            "type": "boolean"
                          },
                          "navLink": {
                            "description": "Nav link properties",
                            "$ref": "#/definitions/ts/Route/NavLinkPropTypes"
                          },
                          "routes": {
                            "description": "Array of route subroutes",
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/metadata/route"
                            }
                          },
                          "href": {
                            "description": "External path from application",
                            "type": "string"
                          }
                        },
                        "anyOf": [
                          {
                            "required": [
                              "component"
                            ]
                          },
                          {
                            "required": [
                              "redirect"
                            ]
                          },
                          {
                            "required": [
                              "routes"
                            ]
                          }
                        ]
                      },
                      "description": "Routing metadata object"
                    },
                    "contextSwitcher": {
                      "type": "object",
                      "properties": {
                        "defaultLabel": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "message id"
                                },
                                "defaultMessage": {
                                  "type": "string",
                                  "description": "default display text"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "additional message description"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "id",
                                "defaultMessage"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "string",
                                  "body": "$1"
                                },
                                {
                                  "label": "react-intl object",
                                  "body": {
                                    "id": "$1",
                                    "defaultMessage": "$2",
                                    "description": "$3"
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Default button label when no context is active"
                        },
                        "values": {
                          "type": "array",
                          "items": {},
                          "description": "Array of values for the contexts"
                        }
                      },
                      "required": [
                        "values"
                      ],
                      "additionalProperties": false,
                      "description": "Context switcher object"
                    },
                    "collapsible": {
                      "type": "boolean",
                      "description": "Defines whether component can be collapsed",
                      "defaultValue": false
                    },
                    "collapsed": {
                      "type": "boolean",
                      "description": "Default state for SideNavigation",
                      "defaultValue": false
                    },
                    "expandOverContent": {
                      "type": "boolean",
                      "description": "If true, menu will expand over content. If false, content will be squeezed"
                    }
                  },
                  "required": [
                    "routes"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "The `SideNavigation` component is designed as a container for navigation links and dropdowns"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "TopNavigation"
                    },
                    {
                      "const": "topnavigation"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "path": {},
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component"
                    },
                    "routes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "path": {
                            "$ref": "#/definitions/datatypes/pathShape",
                            "description": "URL path of the route"
                          },
                          "exact": {
                            "description": "When true, will only match if the path matches the location.pathname exactly",
                            "type": "boolean"
                          },
                          "strict": {
                            "description": "When true, a path that has a trailing slash will only match a location.pathname with a trailing slash.",
                            "type": "boolean"
                          },
                          "sensitive": {
                            "description": "Match from case sensitive",
                            "type": "boolean"
                          },
                          "redirect": {
                            "$ref": "#/definitions/datatypes/pathShape",
                            "description": "Path to which redirect when entering current page"
                          },
                          "push": {
                            "description": "When true, redirecting will push a new entry onto the history instead of replacing the current one",
                            "type": "boolean"
                          },
                          "to": {
                            "$ref": "#/definitions/datatypes/toShape",
                            "description": "A location to redirect to"
                          },
                          "from": {
                            "description": "A pathname to redirect from.",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/definitions/datatypes/idShape",
                            "description": "Identifier for route"
                          },
                          "component": {
                            "description": "Component to be rendered as the destination page for this route",
                            "type": "string"
                          },
                          "componentProps": {
                            "description": "Properties for the component to be rendered",
                            "type": "object",
                            "properties": {},
                            "additionalProperties": true
                          },
                          "title": {
                            "$ref": "#/definitions/datatypes/intlShape",
                            "description": "Title to be displayed for route"
                          },
                          "showOnNavBar": {
                            "description": "Defines whether route should be shown in the navigation",
                            "type": "boolean"
                          },
                          "navLink": {
                            "description": "Nav link properties",
                            "$ref": "#/definitions/ts/Route/NavLinkPropTypes"
                          },
                          "routes": {
                            "description": "Array of route subroutes",
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/metadata/route"
                            }
                          },
                          "href": {
                            "description": "External path from application",
                            "type": "string"
                          }
                        },
                        "anyOf": [
                          {
                            "required": [
                              "component"
                            ]
                          },
                          {
                            "required": [
                              "redirect"
                            ]
                          },
                          {
                            "required": [
                              "routes"
                            ]
                          }
                        ]
                      },
                      "description": "Routing metadata object"
                    },
                    "contextSwitcher": {
                      "type": "object",
                      "properties": {
                        "defaultLabel": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "message id"
                                },
                                "defaultMessage": {
                                  "type": "string",
                                  "description": "default display text"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "additional message description"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "id",
                                "defaultMessage"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "string",
                                  "body": "$1"
                                },
                                {
                                  "label": "react-intl object",
                                  "body": {
                                    "id": "$1",
                                    "defaultMessage": "$2",
                                    "description": "$3"
                                  }
                                }
                              ]
                            }
                          ],
                          "description": "Default button label when no context is active"
                        },
                        "values": {
                          "type": "array",
                          "items": {},
                          "description": "Array of values for the contexts"
                        }
                      },
                      "required": [
                        "values"
                      ],
                      "additionalProperties": false,
                      "description": "Context switcher object"
                    },
                    "wrap": {
                      "type": "boolean",
                      "description": "Defines if items should wrap when not enough space",
                      "defaultValue": true
                    },
                    "navBarRef": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "object"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Reference to the navigation bar HTML element"
                    }
                  },
                  "required": [
                    "routes"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "The `TopNavigation` component is designed as a container for navigation links and dropdowns in Header."
            }
          }
        ]
      },
      "element": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for element; should be unique per page"
          },
          "type": {
            "const": "element",
            "description": "(required) type of metadata; this must always be 'element' for element definitions"
          },
          "component": {
            "type": "string",
            "description": "(required) component or DOM element to render"
          },
          "componentProps": {
            "type": "object",
            "properties": {
              "path": {
                "$ref": "#/definitions/datatypes/pathShape"
              }
            },
            "description": "component-specific properties"
          },
          "content": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "text content for element"
          },
          "selfLayout": {
            "$ref": "#/definitions/datatypes/selfLayoutShape",
            "description": "layout options for this item when used in another layout (eg. GridItem, FlexItem)"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "component"
        ],
        "description": "used to describe static/non-interactive items",
        "allOf": [
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "AddressDisplay"
                    },
                    {
                      "const": "addressdisplay"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "object",
                      "description": "The address to display"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The array of address fields to display, for example ['addressLine1', 'addressLine2', 'addressLine3', 'city', 'state', 'postalCode']",
                      "defaultValue": [
                        "addressLine1",
                        "addressLine2",
                        "addressLine3",
                        "city",
                        "state",
                        "postalCode"
                      ]
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    }
                  },
                  "required": [
                    "address"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "Displays an address from a data object in read-only mode."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Badge"
                    },
                    {
                      "const": "badge"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number",
                      "description": "The value of the Badge"
                    },
                    "maxValue": {
                      "type": "number",
                      "description": "The maximum value for the badge if value prop is greater then maxValue, then Badge will display 'maxValue+'"
                    },
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "success",
                        "error",
                        "warning",
                        "info",
                        "neutral",
                        "notification",
                        "primary",
                        "inverse"
                      ],
                      "description": "Phrase allowing to set custom flavor (success, general, neutral, etc.)",
                      "defaultValue": "notification"
                    },
                    "liveRegionContext": {
                      "type": "string",
                      "description": "Used to describe the live region for assistive technologies (E.g. Unread Emails)"
                    }
                  },
                  "required": [
                    "value"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "Displays a \"badge\" element with child components, such as text or images."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Chevron"
                    },
                    {
                      "const": "chevron"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "chevronIcon": {
                      "type": "string",
                      "description": "The optional icon of this chevron",
                      "defaultValue": "gw-chevron-right"
                    },
                    "isOpen": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "Optional flag indicating whether this chevron is open",
                      "defaultValue": false
                    },
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "accordion icon aria-label"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `Chevron` component is used to render the Chevron icon for an `Accordion` or `Card`. This component is built with optional props: `className`, `chevronIcon` and `isOpen`. The optional `className` prop is used to provide any custom styling to the chevron. The optional `chevronIcon` prop will alter the chevron styling using a well-known, pre-defined variant of the icon. The optional `isOpen` prop, when `true`, will alter the style of the chevron icon to indicate the chevron is opened. Properties: {@link ChevronProps}"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "CurrencyValue"
                    },
                    {
                      "const": "currencyvalue"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "path": {
                      "type": "string",
                      "description": "Hint path to value"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The html tag to use when rendering the outermost element of this component",
                      "defaultValue": "div"
                    },
                    "prefix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional prefix message to be attached in front of the value"
                    },
                    "suffix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional suffix message to be attached at the end the value"
                    }
                  },
                  "required": [],
                  "additionalProperties": true
                }
              },
              "description": "Renders a formatted currency using the `tag` property to wrap the value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FieldIcon"
                    },
                    {
                      "const": "fieldicon"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "icon": {
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "FieldIcon component definition"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FieldValue"
                    },
                    {
                      "const": "fieldvalue"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "datatype": {
                      "type": "string",
                      "description": "Hint for value's datatype"
                    },
                    "path": {
                      "type": "string",
                      "description": "Hint path to value"
                    },
                    "placeholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The string to display if 'value' is undefined/null"
                    },
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "The value to display"
                    },
                    "prefix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional prefix message to be attached in front of the value"
                    },
                    "suffix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional suffix message to be attached at the end the value"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The html tag to use when rendering the outermost element of this component",
                      "defaultValue": "span"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a formatted value using the `tag` and `datatype` property to wrap the value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FooterCopyright"
                    },
                    {
                      "const": "footercopyright"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "copyrightMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Location aware text of copyright"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Copyright message props"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FooterCopyright` component is designed as a simple component presenting copyright inside the `Footer` container."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FooterText"
                    },
                    {
                      "const": "footertext"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "text": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Text to render"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FooterText` component is designed as a simple component presenting text inside the `Footer` container."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FormattedCurrency"
                    },
                    {
                      "const": "formattedcurrency"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "The numeric value to display"
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency name to display for localization"
                    },
                    "currencyDisplay": {
                      "type": "string",
                      "enum": [
                        "code",
                        "symbol",
                        "name"
                      ],
                      "description": "How to display the currency in currency formatting, 'code', 'symbol' or 'name'",
                      "defaultValue": "symbol"
                    },
                    "showFractions": {
                      "type": "boolean",
                      "description": "If true, displays fractions with the amount"
                    },
                    "showGrouping": {
                      "type": "boolean",
                      "description": "If true, displays grouping separators with the value",
                      "defaultValue": true
                    },
                    "value": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "oneOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "currency": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Value to display in the format of string|number|object"
                    },
                    "placeholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The string to display in the UI if 'amount' is undefined/null"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FormattedCurrency` component is used to render a formatted currency value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FormattedDateRange"
                    },
                    {
                      "const": "formatteddaterange"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "startDate": {
                      "type": "object",
                      "description": "The start date to display"
                    },
                    "endDate": {
                      "type": "object",
                      "description": "The end date to display"
                    },
                    "startValue": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Start value to display in the format of string|number|object"
                    },
                    "endValue": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "End value to display in the format of string|number|object"
                    },
                    "placeholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The string to display if start or end 'date' is undefined/null"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "vshort",
                        "short",
                        "long",
                        "abbreviated",
                        "full"
                      ],
                      "description": "The date format: 'vshort', 'short', 'long', 'abbreviated', 'full'",
                      "defaultValue": "long"
                    },
                    "separator": {
                      "type": "string",
                      "description": "The range separator (between start and end date)",
                      "defaultValue": " - "
                    },
                    "showTime": {
                      "type": "boolean",
                      "description": "If true, displays the time with the date",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FormattedDateRange` component is used to render `Date` values localized and in specific preset formats"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FormattedDate"
                    },
                    {
                      "const": "formatteddate"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "object",
                      "description": "The date to display"
                    },
                    "value": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Value to display in the format of string|number|object"
                    },
                    "placeholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The string to display if 'date' is undefined/null"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "vshort",
                        "short",
                        "long",
                        "abbreviated",
                        "full"
                      ],
                      "description": "The date format: 'vshort', 'short', 'long', 'abbreviated', 'full'",
                      "defaultValue": "long"
                    },
                    "showTime": {
                      "type": "boolean",
                      "description": "If true, displays the time with the date",
                      "defaultValue": false
                    },
                    "onlyTime": {
                      "type": "boolean",
                      "description": "If true, displays only time",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FormattedDate` component is used to render `Date` values localized and in specific preset formats, e.g. short or long."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FormattedNumber"
                    },
                    {
                      "const": "formattednumber"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "placeholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The string to display in the UI if 'value' is undefined/null"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "decimal",
                        "percent"
                      ],
                      "description": "How to display the number in this format, 'decimal' or 'percentage'",
                      "defaultValue": "decimal"
                    },
                    "showFractions": {
                      "type": "boolean",
                      "description": "If true, displays fractions with the value"
                    },
                    "maximumFractionDigits": {
                      "type": "number",
                      "description": "Number of fraction digits",
                      "defaultValue": 3
                    },
                    "showGrouping": {
                      "type": "boolean",
                      "description": "If true, displays grouping separators with the value",
                      "defaultValue": true
                    },
                    "value": {
                      "type": "number",
                      "description": "The numeric value to display"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FormattedNumber` component is used to render number value localized."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FormattedPhoneNumber"
                    },
                    {
                      "const": "formattedphonenumber"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "countryCode": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            },
                            "phoneNumber": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Value to display"
                    },
                    "showCountryCodeForReadOnly": {
                      "type": "boolean",
                      "description": "Set country code visibility if rendered in readOnly mode.",
                      "defaultValue": true
                    },
                    "dataType": {
                      "description": "Type of returned value",
                      "defaultValue": "object"
                    },
                    "defaultCountry": {
                      "type": "string",
                      "description": "Default country code to be rendered. Must be in iso2 country code string."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `FormattedPhoneNumber` component is used to render international phone number value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "GlobalizationChooser"
                    },
                    {
                      "const": "globalizationchooser"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "containerStyle": {
                      "type": "string",
                      "description": "Additional class names for component container."
                    },
                    "innerStyle": {
                      "type": "string",
                      "description": "Additional class names for component inner container. Used only in Storybook mode."
                    },
                    "localeId": {
                      "type": "string",
                      "description": "Id of the locale select element.",
                      "defaultValue": "localeSelect"
                    },
                    "languageId": {
                      "type": "string",
                      "description": "Id of the language select element.",
                      "defaultValue": "languageSelect"
                    },
                    "localeValue": {
                      "type": "string",
                      "description": "Selected locale."
                    },
                    "languageValue": {
                      "type": "string",
                      "description": "Selected language."
                    },
                    "languageLabelText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Message key for the language label."
                    },
                    "localeLabelText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Message key for the locale label."
                    },
                    "availableLanguageValues": {
                      "type": "array",
                      "description": "Languages available for selection."
                    },
                    "availableLocaleValues": {
                      "type": "array",
                      "description": "Locales available for selection."
                    },
                    "onLocaleValueChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onLanguageValueChange": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "renderLocaleLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "renderLanguageLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "showLocaleLabel": {
                      "type": "boolean",
                      "description": "Flag for showing or hiding locale label",
                      "defaultValue": true
                    },
                    "showLanguageLabel": {
                      "type": "boolean",
                      "description": "Flag for showing or hiding language label",
                      "defaultValue": true
                    },
                    "showLocaleSelect": {
                      "type": "boolean",
                      "description": "Flag for showing/hiding the locale select",
                      "defaultValue": true
                    },
                    "showLanguageSelect": {
                      "type": "boolean",
                      "description": "Flag for showing/hiding the language select",
                      "defaultValue": true
                    },
                    "style": {
                      "type": "object",
                      "description": "Object containing the style overrides for component. Used only in Storybook mode.",
                      "defaultValue": {}
                    },
                    "storybookMode": {
                      "type": "boolean",
                      "defaultValue": false
                    },
                    "readOnly": {
                      "type": "boolean",
                      "description": "If set to true the dropdowns are readonly. Ignored in the storybook mode.",
                      "defaultValue": false
                    },
                    "skipPropagation": {
                      "type": "boolean",
                      "description": "If set to true the config is not updated on value change and GlobalizationChooser becomes a controlled component.",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Component that allows the user to select the preferred application language and locale."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "HelpHeading"
                    },
                    {
                      "const": "helpheading"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "content": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "Content to render"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `HelpHeading` component is designed as a simple component presenting heading inside the `HelpPopover` container."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "HelpLink"
                    },
                    {
                      "const": "helplink"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "content": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "Content of link"
                    },
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "href": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "External location"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `HelpLink` component is designed as a simple component presenting link inside the Help dropdown on Application Header."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "HelpParagraph"
                    },
                    {
                      "const": "helpparagraph"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional class names for component."
                    },
                    "content": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "Content to render"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "The `HelpParagraph` component is designed as a simple component presenting text inside the Help dropdown on Application Header."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Icon"
                    },
                    {
                      "const": "icon"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "icon": {
                      "type": "string",
                      "description": "icon name to be used"
                    },
                    "size": {
                      "type": "string",
                      "enum": [
                        "small",
                        "medium",
                        "large"
                      ],
                      "description": "Determines the size of icon"
                    },
                    "color": {
                      "type": "string",
                      "description": "Determines the color (HEX code) of icon"
                    },
                    "isFixedWidth": {
                      "type": "boolean",
                      "description": "Flag for fixed width icons"
                    },
                    "tag": {
                      "type": "string",
                      "description": "Tag used to render icon"
                    }
                  },
                  "required": [
                    "icon"
                  ],
                  "additionalProperties": true
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Image"
                    },
                    {
                      "const": "image"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "src": {
                      "type": "string",
                      "description": "Specifies the URL of an Image"
                    },
                    "alt": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Specifies an alternate text for an Image"
                    },
                    "className": {
                      "type": "string",
                      "description": "Additional img styling class name"
                    },
                    "figcaption": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The caption for the figure"
                    },
                    "width": {
                      "type": "number",
                      "description": "Specifies the width of an Image"
                    },
                    "onError": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onLoad": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "showLoader": {
                      "type": "boolean",
                      "description": "Show loader when Image still loading",
                      "defaultValue": true
                    }
                  },
                  "required": [
                    "src"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "Image"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "InfoLabel"
                    },
                    {
                      "const": "infolabel"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "icon": {
                      "type": "string",
                      "description": "The short-name of the optional Material icons"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Where the icon is placed relative to the text",
                      "defaultValue": "left"
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Label message that is either a string or an object representing internationalized message ({id: `key`, defaultMessage: `default text`}) will be shown when children is not provided"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "success",
                        "error",
                        "warning",
                        "info",
                        "neutral"
                      ],
                      "description": "Phrase allowing to set custom flavor (success, info, neutral, etc.)",
                      "defaultValue": "info"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Displays an \"InfoLabel\" element with child components, such as text or images."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "InlineLoader"
                    },
                    {
                      "const": "inlineloader"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "loading": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "Controls whether the Inline Loader is shown; For boolean values, if `true` is passed then the Inline Loader is shown; For Promise value(s), the Inline Loader will be shown until the promise has completed."
                    },
                    "loadingIcon": {
                      "type": "string",
                      "description": "icon name to be used when executing trigger/promise"
                    },
                    "loadingMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message shown when executing trigger/promise"
                    },
                    "successIcon": {
                      "type": "string",
                      "description": "icon name to be shown when execution trigger/promise is successfully resolved",
                      "defaultValue": "check"
                    },
                    "successMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message shown when execution trigger/promise is succesfully done"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "InlineLoader"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "InlineNotification"
                    },
                    {
                      "const": "inlinenotification"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Text to display on notification"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "success",
                        "info",
                        "warning",
                        "error"
                      ],
                      "description": "Phrase allowing to set color and appearance of notification (success, warning, error, info)",
                      "defaultValue": "info"
                    },
                    "onClosed": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "isDismissable": {
                      "type": "boolean",
                      "description": "If true, the dismiss button appears with this component",
                      "defaultValue": true
                    },
                    "isEmbeddedNotification": {
                      "type": "boolean",
                      "description": "If true, attributes 'aria-hidden' and 'role' will be added",
                      "defaultValue": false
                    },
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "prefix text for success type message"
                        },
                        "warning": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "prefix text for warning type message"
                        },
                        "info": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "prefix text for info type message"
                        },
                        "error": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "prefix text for error type message"
                        },
                        "dismissLabel": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "dismiss button aria-label"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Displays a message within the body of the page. You show it on event, and the user can dismiss it."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "IntlElement"
                    },
                    {
                      "const": "intlelement"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "tag": {
                      "type": "string",
                      "description": "The html tag to use when rendering the translated message"
                    }
                  },
                  "required": [
                    "tag"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "IntlElement"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Loader"
                    },
                    {
                      "const": "loader"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "loaded": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array"
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "description": "Controls whether the Loader UI is shown vs the `children`;  For boolean values, if `false` is passed then the Loader UI is shown otherwise the `children` are; For  Promise value(s), the Loader UI will be shown until the promise has completed then the `children` are."
                    },
                    "text": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "Optional message text to display when the Loader UI is shown"
                    },
                    "renderLoader": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an animated component that you can show when loading some other content."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "LogoTitle"
                    },
                    {
                      "const": "logotitle"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "src": {
                      "type": "string",
                      "description": "Src for logo image."
                    },
                    "alt": {
                      "type": "string",
                      "description": "Alternative text for logo if image is not exists."
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ]
                        }
                      ],
                      "description": "Title as string, intl message or func."
                    },
                    "renderTitle": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "className": {
                      "type": "string",
                      "description": "Custom class names."
                    },
                    "logoClassName": {
                      "type": "string",
                      "description": "Custom class name for the logo"
                    },
                    "titleClassName": {
                      "type": "string",
                      "description": "Custom class name for the title"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "LogoTitle"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "NumberValue"
                    },
                    {
                      "const": "numbervalue"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "path": {
                      "type": "string",
                      "description": "Hint path to value"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The html tag to use when rendering the outermost element of this component",
                      "defaultValue": "div"
                    },
                    "prefix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional prefix message to be attached in front of the value"
                    },
                    "suffix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional suffix message to be attached at the end the value"
                    }
                  },
                  "required": [],
                  "additionalProperties": true
                }
              },
              "description": "Renders a formatted number using the `tag` property to wrap the value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "PhoneNumberValue"
                    },
                    {
                      "const": "phonenumbervalue"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "CSS class name for this component"
                    },
                    "path": {
                      "type": "string",
                      "description": "Hint path to value"
                    },
                    "tag": {
                      "type": "string",
                      "description": "The html tag to use when rendering the outermost element of this component",
                      "defaultValue": "div"
                    },
                    "prefix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional prefix message to be attached in front of the value"
                    },
                    "suffix": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Optional suffix message to be attached at the end the value"
                    }
                  },
                  "required": [],
                  "additionalProperties": true
                }
              },
              "description": "Renders a formatted international phone number using the `tag` property to wrap the value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Tag"
                    },
                    {
                      "const": "tag"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "onClick": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "icon": {
                      "type": "string",
                      "description": "Icon name to render inside icon button",
                      "defaultValue": "gw-close"
                    },
                    "renderIcon": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "label": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Displayed tag label"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Renders tag as disabled"
                    },
                    "className": {
                      "type": "string",
                      "description": "Custom class name for tag"
                    },
                    "labelClassName": {
                      "type": "string",
                      "description": "Custom class name for label"
                    },
                    "iconWrapperClassName": {
                      "type": "string",
                      "description": "Custom class name for icon wrapper"
                    },
                    "iconClassName": {
                      "type": "string",
                      "description": "Custom class name for icon"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Tag"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ThemeChooser"
                    },
                    {
                      "const": "themechooser"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Component that allows the user to select the theme configuration"
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownMenuSeparator"
                    },
                    {
                      "const": "dropdownmenuseparator"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "type": "object",
                  "properties": {
                    "className": {
                      "type": "string",
                      "description": "Additional style class for the separator."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "DropdownMenuSeparator"
            }
          }
        ]
      },
      "field": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for field; should be unique per page"
          },
          "type": {
            "const": "field",
            "description": "(required) type of metadata; this must always be 'field' for field definitions"
          },
          "datatype": {
            "type": "string",
            "description": "datatype of value being rendered; if not provided, 'component' must be provided"
          },
          "component": {
            "type": "string",
            "description": "component or DOM element to render; if not provided, 'datatype' must be provided"
          },
          "componentProps": {
            "type": "object"
          },
          "content": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "(optional for hybrid field/container types) content to be shown when this field is checked; single component or array of components"
          },
          "contentLayout": {
            "$ref": "#/definitions/datatypes/contentLayoutShape",
            "description": "layout options for the content of this item"
          },
          "selfLayout": {
            "$ref": "#/definitions/datatypes/selfLayoutShape",
            "description": "layout options for this item when used in another layout (eg. GridItem, FlexItem)"
          }
        },
        "anyOf": [
          {
            "required": [
              "id",
              "type",
              "component"
            ]
          },
          {
            "required": [
              "id",
              "type",
              "datatype"
            ]
          }
        ],
        "description": "used to describe input/output items",
        "allOf": [
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Checkbox"
                    },
                    {
                      "const": "checkbox"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "description": "Boolean or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "showInlineLabel": {
                      "type": "boolean",
                      "description": "If true, displays label inline"
                    },
                    "detailElement": {
                      "type": "object",
                      "description": "Node to render when checkbox is selected, as processed by `renderContentFromMetadata` method (metadata 3.0)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Displays a label, clickable box, and message."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "checkbox"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "description": "Boolean or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "showInlineLabel": {
                      "type": "boolean",
                      "description": "If true, displays label inline"
                    },
                    "detailElement": {
                      "type": "object",
                      "description": "Node to render when checkbox is selected, as processed by `renderContentFromMetadata` method (metadata 3.0)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Displays a label, clickable box, and message."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "CheckboxGroup"
                    },
                    {
                      "const": "checkboxgroup"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of the selected checkboxes codes."
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the items in the value array"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of available checkboxes",
                      "defaultValue": []
                    },
                    "isHorizontal": {
                      "type": "boolean",
                      "description": "If true component will be horizontally oriented",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ColorPicker"
                    },
                    {
                      "const": "colorpicker"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "string",
                      "description": "sets the values for the color selector and input field.",
                      "defaultValue": ""
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "placement": {
                      "type": "string",
                      "description": "default position for the color selector to render if there is insufficient space above and below input field.",
                      "defaultValue": "bottom"
                    },
                    "openTyping": {
                      "type": "boolean",
                      "description": "allows user to type into input field if active.",
                      "defaultValue": false
                    },
                    "colorPreviewSize": {
                      "type": "string",
                      "description": "size of the color preview span. 'small' or 'medium' as default"
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Currency"
                    },
                    {
                      "const": "currency"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "oneOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "currency": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Value to display in the Currency field"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "oneOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "currency": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "number"
                      ],
                      "description": "Sets the datatype type of the value prop. When set to 'string' accepts strings containing currency symbol i.e. '123.23 usd'",
                      "defaultValue": "object"
                    },
                    "defaultCurrency": {
                      "type": "string",
                      "description": "Default currency"
                    },
                    "currencyDisplay": {
                      "type": "string",
                      "enum": [
                        "code",
                        "name",
                        "symbol"
                      ],
                      "description": "How to display the currency in currency formatting, 'code', 'symbol' or 'name'",
                      "defaultValue": "symbol"
                    },
                    "showFractions": {
                      "type": "boolean",
                      "description": "If true, displays the fraction part of the amount",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Use it to enter or display a monetary value. The amount is displayed based on the locale. If you want to use it to display the localized value as text, and not an input, set `readOnly` to `true`. The component can handle dataTypes of `object` or `number` which is set by dataType prop."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "currency"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "oneOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "currency": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Value to display in the Currency field"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "oneOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "currency": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "number"
                      ],
                      "description": "Sets the datatype type of the value prop. When set to 'string' accepts strings containing currency symbol i.e. '123.23 usd'",
                      "defaultValue": "object"
                    },
                    "defaultCurrency": {
                      "type": "string",
                      "description": "Default currency"
                    },
                    "currencyDisplay": {
                      "type": "string",
                      "enum": [
                        "code",
                        "name",
                        "symbol"
                      ],
                      "description": "How to display the currency in currency formatting, 'code', 'symbol' or 'name'",
                      "defaultValue": "symbol"
                    },
                    "showFractions": {
                      "type": "boolean",
                      "description": "If true, displays the fraction part of the amount",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Use it to enter or display a monetary value. The amount is displayed based on the locale. If you want to use it to display the localized value as text, and not an input, set `readOnly` to `true`. The component can handle dataTypes of `object` or `number` which is set by dataType prop."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Date"
                    },
                    {
                      "const": "date"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Date to display"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "date-time"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "object"
                    },
                    "todayButtonText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Display today button"
                    },
                    "maxDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Max date"
                    },
                    "minDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Min date"
                    },
                    "isClearable": {
                      "type": "boolean",
                      "description": "If true, field can be cleaned"
                    },
                    "autoComplete": {
                      "type": "boolean",
                      "defaultValue": false
                    },
                    "popperPlacement": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "auto-end",
                        "bottom",
                        "bottom-end",
                        "bottom-start",
                        "left",
                        "left-end",
                        "left-start",
                        "right",
                        "right-end",
                        "right-start",
                        "top",
                        "top-end",
                        "top-start"
                      ],
                      "description": "Popper placement option"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "vshort",
                        "short",
                        "long",
                        "abbreviated",
                        "full"
                      ],
                      "description": "The readonly date format: 'short', 'long', 'abbreviated' or 'full'",
                      "defaultValue": "short"
                    },
                    "showTime": {
                      "type": "boolean",
                      "description": "Include a time selection element in the date picker",
                      "defaultValue": false
                    },
                    "theme": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "additionalProperties": false,
                      "description": "Theme config to apply"
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "showCalendar": {
                      "type": "boolean",
                      "description": "Should display the calendar pop-over",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "invalidDate": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array"
                        }
                      ],
                      "description": "Used by jutro-lab-preview-validation package: Sets invalidDate validation on DateField.",
                      "defaultValue": true
                    },
                    "icon": {
                      "defaultValue": "gw-calendar-today",
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Allows the user to either type or select a date. Displays them according to locale settings. Valid format for manual input is ISO YYYY-MM-DD or MM/DD/YYYY. The time part (for the date and time field) should be appended to the date and follow ISO standard. For example: 2020-05-03T:10:30. Note that time values are assumed to be in client time zone. Unless time zone is explicitly provided through manual input (as per ISO format). Date only input treats dates as UTC dates."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "date"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Date to display"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "date-time"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "object"
                    },
                    "todayButtonText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Display today button"
                    },
                    "maxDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Max date"
                    },
                    "minDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Min date"
                    },
                    "isClearable": {
                      "type": "boolean",
                      "description": "If true, field can be cleaned"
                    },
                    "autoComplete": {
                      "type": "boolean",
                      "defaultValue": false
                    },
                    "popperPlacement": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "auto-end",
                        "bottom",
                        "bottom-end",
                        "bottom-start",
                        "left",
                        "left-end",
                        "left-start",
                        "right",
                        "right-end",
                        "right-start",
                        "top",
                        "top-end",
                        "top-start"
                      ],
                      "description": "Popper placement option"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "vshort",
                        "short",
                        "long",
                        "abbreviated",
                        "full"
                      ],
                      "description": "The readonly date format: 'short', 'long', 'abbreviated' or 'full'",
                      "defaultValue": "short"
                    },
                    "showTime": {
                      "type": "boolean",
                      "description": "Include a time selection element in the date picker",
                      "defaultValue": false
                    },
                    "theme": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "additionalProperties": false,
                      "description": "Theme config to apply"
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "showCalendar": {
                      "type": "boolean",
                      "description": "Should display the calendar pop-over",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "invalidDate": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array"
                        }
                      ],
                      "description": "Used by jutro-lab-preview-validation package: Sets invalidDate validation on DateField.",
                      "defaultValue": true
                    },
                    "icon": {
                      "defaultValue": "gw-calendar-today",
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Allows the user to either type or select a date. Displays them according to locale settings. Valid format for manual input is ISO YYYY-MM-DD or MM/DD/YYYY. The time part (for the date and time field) should be appended to the date and follow ISO standard. For example: 2020-05-03T:10:30. Note that time values are assumed to be in client time zone. Unless time zone is explicitly provided through manual input (as per ISO format). Date only input treats dates as UTC dates."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DateRange"
                    },
                    {
                      "const": "daterange"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Date to display",
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "defaultValue": {
                      "description": "Default date range value",
                      "defaultValue": {}
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "date-time"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "object"
                    },
                    "startPath": {
                      "type": "string",
                      "description": "Path in model to start date"
                    },
                    "endPath": {
                      "type": "string",
                      "description": "Path in model to end date"
                    },
                    "startDataPath": {
                      "type": "string",
                      "description": "Start date dataPath"
                    },
                    "endDataPath": {
                      "type": "string",
                      "description": "End date dataPath"
                    },
                    "startPathValueProp": {
                      "type": "string",
                      "description": "Name of prop in value object for startPath",
                      "defaultValue": "startDate"
                    },
                    "endPathValueProp": {
                      "type": "string",
                      "description": "Name of prop in value object for endPath",
                      "defaultValue": "endDate"
                    },
                    "endLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for end date label"
                    },
                    "endSecondaryLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for end date label (by default same as secondaryLabel prop)"
                    },
                    "endTooltip": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "description": "Card header tooltip",
                          "properties": {
                            "id": {
                              "$ref": "#/definitions/datatypes/idShape",
                              "description": "Used to identify the component. Referenced to find it in the document tree"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Icon to be displayed"
                            },
                            "text": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text to be rendered inside the tooltip"
                            },
                            "title": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Title to be rendered inside the tooltip"
                            },
                            "href": {
                              "type": "string",
                              "description": "Url to be opened when user clicks on link text"
                            },
                            "link": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text of link to be rendered inside tooltip"
                            },
                            "renderContent": {
                              "$ref": "#/definitions/datatypes/funcShape",
                              "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
                            },
                            "placement": {
                              "type": "string",
                              "description": "Direction for placing the tooltip against its trigger"
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "description": "Tooltip for end date (by default same as tooltip prop for start date)"
                    },
                    "endPlaceholder": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for end date placeholder (by default same as placeholder prop)"
                    },
                    "endContentContainerClassName": {
                      "type": "string",
                      "description": "class for end content container (by default takes value from contentContainerClassName prop if specified)"
                    },
                    "endControlClassName": {
                      "type": "string",
                      "description": "class for end date control input (by default takes value from controlClassName prop if specified)"
                    },
                    "endLabelContainerClassName": {
                      "type": "string",
                      "description": "class for end label container (by default takes value from labelContainerClassName prop if specified)"
                    },
                    "endLabelClassName": {
                      "type": "string",
                      "description": "class for end date label (by default takes value from labelClassName prop if specified)"
                    },
                    "highlightRange": {
                      "type": "boolean",
                      "description": "if true, selected range will be highlighted",
                      "defaultValue": false
                    },
                    "todayButtonText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Display today button"
                    },
                    "maxDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Max date"
                    },
                    "minDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Min date"
                    },
                    "isClearable": {
                      "type": "boolean",
                      "description": "If true, field can be cleaned"
                    },
                    "autoComplete": {
                      "type": "boolean",
                      "defaultValue": false
                    },
                    "popperPlacement": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "auto-end",
                        "bottom",
                        "bottom-end",
                        "bottom-start",
                        "left",
                        "left-end",
                        "left-start",
                        "right",
                        "right-end",
                        "right-start",
                        "top",
                        "top-end",
                        "top-start"
                      ],
                      "description": "Popper placement option"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "vshort",
                        "short",
                        "long",
                        "abbreviated",
                        "full"
                      ],
                      "description": "The readonly date format: 'short', 'long', 'abbreviated' or 'full'",
                      "defaultValue": "short"
                    },
                    "showTime": {
                      "type": "boolean",
                      "description": "Include a time selection element in the date picker",
                      "defaultValue": false
                    },
                    "theme": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "additionalProperties": false,
                      "description": "Theme config to apply"
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "showCalendar": {
                      "type": "boolean",
                      "description": "Should display the calendar pop-over",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "invalidDate": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array"
                        }
                      ],
                      "description": "Used by jutro-lab-preview-validation package: Sets invalidDate validation on DateField.",
                      "defaultValue": true
                    },
                    "icon": {
                      "defaultValue": "gw-calendar-today"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DateTime"
                    },
                    {
                      "const": "datetime"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Date to display",
                      "type": "object",
                      "properties": {
                        "hour": {
                          "type": "number"
                        },
                        "minute": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "hour",
                        "minute"
                      ],
                      "additionalProperties": false
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "date-time"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "object"
                    },
                    "showTime": {
                      "type": "boolean",
                      "description": "Include a time selection element in the date picker",
                      "defaultValue": false
                    },
                    "onBlurTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onFocusTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "requiredTime": {
                      "type": "boolean",
                      "description": "If true, time picker is required"
                    },
                    "showErrorsTime": {
                      "type": "boolean",
                      "description": "Show errors for time picker"
                    },
                    "showRequiredTime": {
                      "type": "boolean",
                      "description": "Show required indicator for time picker"
                    },
                    "showOptionalTime": {
                      "type": "boolean",
                      "description": "Show optional indicator for time picker"
                    },
                    "labelTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time picker label"
                    },
                    "secondaryLabelTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time picker label"
                    },
                    "hideLabelTime": {
                      "type": "boolean",
                      "description": "Hides the label on any layout for time picker"
                    },
                    "tooltipTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "description": "Card header tooltip",
                          "properties": {
                            "id": {
                              "$ref": "#/definitions/datatypes/idShape",
                              "description": "Used to identify the component. Referenced to find it in the document tree"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Icon to be displayed"
                            },
                            "text": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text to be rendered inside the tooltip"
                            },
                            "title": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Title to be rendered inside the tooltip"
                            },
                            "href": {
                              "type": "string",
                              "description": "Url to be opened when user clicks on link text"
                            },
                            "link": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text of link to be rendered inside tooltip"
                            },
                            "renderContent": {
                              "$ref": "#/definitions/datatypes/funcShape",
                              "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
                            },
                            "placement": {
                              "type": "string",
                              "description": "Direction for placing the tooltip against its trigger"
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "description": "Tooltip for time picker"
                    },
                    "placeholderTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time picker placeholder"
                    },
                    "preserveTimeZone": {
                      "type": "boolean",
                      "description": "If true, component will not convert selected date to UTC"
                    },
                    "min": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "hour": {
                              "type": "number"
                            },
                            "minute": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "hour",
                            "minute"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Min time"
                    },
                    "max": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "hour": {
                              "type": "number"
                            },
                            "minute": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "hour",
                            "minute"
                          ],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Max time"
                    },
                    "timeIntervals": {
                      "type": "number",
                      "description": "Time intervals for input preselected values",
                      "defaultValue": 30
                    },
                    "timeFormat": {
                      "type": "string",
                      "enum": [
                        "12h",
                        "24h"
                      ],
                      "description": "Time format"
                    },
                    "icon": {
                      "defaultValue": "gw-calendar-today"
                    },
                    "iconPosition": {
                      "defaultValue": "right"
                    },
                    "todayButtonText": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Display today button"
                    },
                    "maxDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Max date"
                    },
                    "minDate": {
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Min date"
                    },
                    "isClearable": {
                      "type": "boolean",
                      "description": "If true, field can be cleaned"
                    },
                    "autoComplete": {
                      "type": "boolean",
                      "defaultValue": false
                    },
                    "popperPlacement": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "auto-end",
                        "bottom",
                        "bottom-end",
                        "bottom-start",
                        "left",
                        "left-end",
                        "left-start",
                        "right",
                        "right-end",
                        "right-start",
                        "top",
                        "top-end",
                        "top-start"
                      ],
                      "description": "Popper placement option"
                    },
                    "format": {
                      "type": "string",
                      "enum": [
                        "vshort",
                        "short",
                        "long",
                        "abbreviated",
                        "full"
                      ],
                      "description": "The readonly date format: 'short', 'long', 'abbreviated' or 'full'",
                      "defaultValue": "short"
                    },
                    "theme": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "additionalProperties": false,
                      "description": "Theme config to apply"
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "showCalendar": {
                      "type": "boolean",
                      "description": "Should display the calendar pop-over",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "invalidDate": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array"
                        }
                      ],
                      "description": "Used by jutro-lab-preview-validation package: Sets invalidDate validation on DateField.",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DateTimeZone"
                    },
                    {
                      "const": "datetimezone"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Date and time to display",
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work",
                      "oneOf": [
                        {
                          "anyOf": [
                            {
                              "type": "object"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "year": {
                                  "type": "number"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "day": {
                                  "type": "number"
                                },
                                "hour": {
                                  "type": "number"
                                },
                                "minute": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "year",
                                "month",
                                "day"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string",
                        "date-time"
                      ],
                      "description": "Returned data type",
                      "defaultValue": "object"
                    },
                    "showTimeZone": {
                      "type": "boolean",
                      "description": "Show timezone picker",
                      "defaultValue": true
                    },
                    "labelTimeZone": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time zone field label"
                    },
                    "secondaryLabelTimeZone": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time zone field secondary label (same as secondaryLabel prop by default)"
                    },
                    "tooltipTimeZone": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "description": "Card header tooltip",
                          "properties": {
                            "id": {
                              "$ref": "#/definitions/datatypes/idShape",
                              "description": "Used to identify the component. Referenced to find it in the document tree"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Icon to be displayed"
                            },
                            "text": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text to be rendered inside the tooltip"
                            },
                            "title": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Title to be rendered inside the tooltip"
                            },
                            "href": {
                              "type": "string",
                              "description": "Url to be opened when user clicks on link text"
                            },
                            "link": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text of link to be rendered inside tooltip"
                            },
                            "renderContent": {
                              "$ref": "#/definitions/datatypes/funcShape",
                              "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
                            },
                            "placement": {
                              "type": "string",
                              "description": "Direction for placing the tooltip against its trigger"
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "description": "Tooltip for time zone field (same as tooltip prop by default)"
                    },
                    "hideLabelTimeZone": {
                      "type": "boolean",
                      "description": "Hide time zone label (same as hideLabel by default)"
                    },
                    "timeZones": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Time zones to show in the dropdown"
                    },
                    "defaultTimeZone": {
                      "type": "string",
                      "description": "Default time zone to be used (local by default)"
                    },
                    "showTime": {
                      "defaultValue": true,
                      "type": "boolean",
                      "description": "Show timepicker"
                    },
                    "onBlurTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback when focus event is fired in time picker"
                    },
                    "onFocusTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback when focus event is fired in time picker"
                    },
                    "requiredTime": {
                      "type": "boolean",
                      "description": "If true, time picker is required"
                    },
                    "showErrorsTime": {
                      "type": "boolean",
                      "description": "Show errors for time picker"
                    },
                    "showRequiredTime": {
                      "type": "boolean",
                      "description": "Show required indicator for time picker"
                    },
                    "showOptionalTime": {
                      "type": "boolean",
                      "description": "Show optional indicator for time picker"
                    },
                    "labelTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time picker label"
                    },
                    "secondaryLabelTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time picker label"
                    },
                    "hideLabelTime": {
                      "type": "boolean",
                      "description": "Hides the label on any layout for time picker"
                    },
                    "tooltipTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "description": "Card header tooltip",
                          "properties": {
                            "id": {
                              "$ref": "#/definitions/datatypes/idShape",
                              "description": "Used to identify the component. Referenced to find it in the document tree"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Icon to be displayed"
                            },
                            "text": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text to be rendered inside the tooltip"
                            },
                            "title": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Title to be rendered inside the tooltip"
                            },
                            "href": {
                              "type": "string",
                              "description": "Url to be opened when user clicks on link text"
                            },
                            "link": {
                              "$ref": "#/definitions/datatypes/intlShape",
                              "description": "Text of link to be rendered inside tooltip"
                            },
                            "renderContent": {
                              "$ref": "#/definitions/datatypes/funcShape",
                              "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
                            },
                            "placement": {
                              "type": "string",
                              "description": "Direction for placing the tooltip against its trigger"
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "description": "Tooltip for time picker"
                    },
                    "placeholderTime": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Intl message for time picker placeholder"
                    },
                    "preserveTimeZone": {
                      "type": "boolean",
                      "description": "If true, component will not convert selected date to UTC"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "DropdownSelect"
                    },
                    {
                      "const": "dropdownselect"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Selected item value"
                    },
                    "defaultValue": {
                      "description": "Default value to set if there is no value present."
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains 'code' and 'name'",
                      "defaultValue": []
                    },
                    "internalClassNames": {
                      "type": "object",
                      "properties": {
                        "control": {
                          "type": "string",
                          "description": "CSS class name for control"
                        },
                        "controlFocused": {
                          "type": "string",
                          "description": "CSS class name for focused control"
                        },
                        "menuList": {
                          "type": "string",
                          "description": "CSS class name for list of options"
                        },
                        "option": {
                          "type": "string",
                          "description": "CSS class name for option"
                        },
                        "selectIcon": {
                          "type": "string",
                          "description": "CSS class name for select icon"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Map of CSS class names for overriding individual parts of component's styles"
                    },
                    "alwaysShowPlaceholder": {
                      "type": "boolean",
                      "description": "When set to `true` options will show the placeholder text and it will be the first option."
                    },
                    "searchable": {
                      "type": "boolean",
                      "description": "Allows you to type in dropdown field to find options.",
                      "defaultValue": false
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "usePortal": {
                      "type": "boolean",
                      "description": "Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a dropdown where the user can select one of the values. You specify the allowed values and the action using props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "select"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Selected item value"
                    },
                    "defaultValue": {
                      "description": "Default value to set if there is no value present."
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains 'code' and 'name'",
                      "defaultValue": []
                    },
                    "internalClassNames": {
                      "type": "object",
                      "properties": {
                        "control": {
                          "type": "string",
                          "description": "CSS class name for control"
                        },
                        "controlFocused": {
                          "type": "string",
                          "description": "CSS class name for focused control"
                        },
                        "menuList": {
                          "type": "string",
                          "description": "CSS class name for list of options"
                        },
                        "option": {
                          "type": "string",
                          "description": "CSS class name for option"
                        },
                        "selectIcon": {
                          "type": "string",
                          "description": "CSS class name for select icon"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Map of CSS class names for overriding individual parts of component's styles"
                    },
                    "alwaysShowPlaceholder": {
                      "type": "boolean",
                      "description": "When set to `true` options will show the placeholder text and it will be the first option."
                    },
                    "searchable": {
                      "type": "boolean",
                      "description": "Allows you to type in dropdown field to find options.",
                      "defaultValue": false
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "usePortal": {
                      "type": "boolean",
                      "description": "Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a dropdown where the user can select one of the values. You specify the allowed values and the action using props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "typelist"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Selected item value"
                    },
                    "defaultValue": {
                      "description": "Default value to set if there is no value present."
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains 'code' and 'name'",
                      "defaultValue": []
                    },
                    "internalClassNames": {
                      "type": "object",
                      "properties": {
                        "control": {
                          "type": "string",
                          "description": "CSS class name for control"
                        },
                        "controlFocused": {
                          "type": "string",
                          "description": "CSS class name for focused control"
                        },
                        "menuList": {
                          "type": "string",
                          "description": "CSS class name for list of options"
                        },
                        "option": {
                          "type": "string",
                          "description": "CSS class name for option"
                        },
                        "selectIcon": {
                          "type": "string",
                          "description": "CSS class name for select icon"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Map of CSS class names for overriding individual parts of component's styles"
                    },
                    "alwaysShowPlaceholder": {
                      "type": "boolean",
                      "description": "When set to `true` options will show the placeholder text and it will be the first option."
                    },
                    "searchable": {
                      "type": "boolean",
                      "description": "Allows you to type in dropdown field to find options.",
                      "defaultValue": false
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "usePortal": {
                      "type": "boolean",
                      "description": "Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a dropdown where the user can select one of the values. You specify the allowed values and the action using props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "FileUpload"
                    },
                    {
                      "const": "fileupload"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "emptyUploadAreaMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message for drag & drop"
                        },
                        "uploadFilesMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message for upload file"
                        },
                        "uploadedFilesMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message for uploaded file"
                        },
                        "removeFileMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message for removing file"
                        },
                        "maxLengthMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message for file name max length"
                        },
                        "maxFileSizeKBMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message for max file size"
                        },
                        "incorrectFileTypeMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Error message to present if the file type is incorrect"
                        },
                        "uploadSelectedMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message dispayed when file is selected"
                        },
                        "uploadProgressMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message displayed during uploading"
                        },
                        "uploadCompletedMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message displayed after completed upload"
                        },
                        "uploadCancelledMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message displayed when upload is cancelled"
                        },
                        "uploadFailedMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message displayed when upload failed to finish"
                        },
                        "backgroundUploadFileMessage": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Message displayed on disabled button in large field"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "accept": {
                      "type": "string",
                      "description": "File type filter. (eg. '.md,.pdf' or 'audio/*')"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "thin",
                        "large"
                      ],
                      "description": "File upload field type (eg. 'thin', etc.)",
                      "defaultValue": "thin"
                    },
                    "imageSource": {
                      "type": "string",
                      "description": "Path to empty dropdown area image"
                    },
                    "maxLength": {
                      "type": "number",
                      "description": "Max length for the input field"
                    },
                    "maxFileSizeKB": {
                      "type": "number",
                      "description": "Max file size in KB for the input field"
                    },
                    "onUpload": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "buttonType": {
                      "type": "string",
                      "enum": [
                        "filled",
                        "outlined",
                        "text"
                      ],
                      "description": "'type' prop for the rendered button",
                      "defaultValue": "outlined"
                    },
                    "buttonSize": {
                      "type": "string",
                      "enum": [
                        "small",
                        "medium"
                      ],
                      "description": "'size' prop for the rendered button",
                      "defaultValue": "small"
                    },
                    "buttonIcon": {
                      "type": "string",
                      "description": "'icon' prop for the rendered button"
                    },
                    "disableDragAndDrop": {
                      "type": "boolean",
                      "description": "Determines if the drag and drop functionality of the component should be disabled"
                    },
                    "total": {
                      "type": "number",
                      "description": "Total size in bytes of selected file to upload"
                    },
                    "completed": {
                      "type": "number",
                      "description": "Current bytes uploaded"
                    },
                    "onCancel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onFileClear": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "uploadState": {
                      "type": "string",
                      "enum": [
                        "selection",
                        "progress",
                        "completed",
                        "cancelled",
                        "failed"
                      ],
                      "description": "Current state of upload"
                    },
                    "progressErrorMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "User defined error message on failed upload"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a control which allows the user to upload a file. Allows you to specify validation and actions for specific events."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "ImageRadioButton"
                    },
                    {
                      "const": "imageradiobutton"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "The selected value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Default value to set if none is provided"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "description": "Array of choice objects to display; choice objects contains 'code', 'name' and 'imageAltText'",
                      "defaultValue": []
                    },
                    "imageBasePath": {
                      "type": "string",
                      "description": "Base path for image sources"
                    },
                    "imageFormat": {
                      "type": "string",
                      "description": "Optional file format to reference images for options",
                      "defaultValue": "jpg"
                    },
                    "imageClassName": {
                      "type": "string",
                      "description": "An optional class for the div surrounding the images"
                    },
                    "otherOptionImage": {
                      "type": "string",
                      "description": "Optional name of custom image to be used for 'other' option",
                      "defaultValue": "other.svg"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a list of radio buttons where each button is an image. You map images onto options as shown in the following example."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Input"
                    },
                    {
                      "const": "input"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "String or number passed as value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "autoComplete": {
                      "type": "boolean"
                    },
                    "maxLength": {
                      "type": "number",
                      "description": "Max length for the input field"
                    },
                    "onEnter": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "editable": {
                      "type": "boolean",
                      "description": "If set to false the input field is read-only but user can tab to it, highlight it, and copy the text from it",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete, if prop is not set name attribute is set to id on default and autocomplete is off"
                    },
                    "pattern": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "email",
                            "alphanumeric",
                            "lowercase",
                            "uppercase",
                            "url"
                          ]
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "A pattern that must be followed for validation purposed. (This can only be used with @jutro/validation) Use some of the available presets or define your own regex pattern to test against."
                    },
                    "icon": {
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input element."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "string"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "String or number passed as value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "autoComplete": {
                      "type": "boolean"
                    },
                    "maxLength": {
                      "type": "number",
                      "description": "Max length for the input field"
                    },
                    "onEnter": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "editable": {
                      "type": "boolean",
                      "description": "If set to false the input field is read-only but user can tab to it, highlight it, and copy the text from it",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete, if prop is not set name attribute is set to id on default and autocomplete is off"
                    },
                    "pattern": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "email",
                            "alphanumeric",
                            "lowercase",
                            "uppercase",
                            "url"
                          ]
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "A pattern that must be followed for validation purposed. (This can only be used with @jutro/validation) Use some of the available presets or define your own regex pattern to test against."
                    },
                    "icon": {
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input element."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "text"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "String or number passed as value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "autoComplete": {
                      "type": "boolean"
                    },
                    "maxLength": {
                      "type": "number",
                      "description": "Max length for the input field"
                    },
                    "onEnter": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "editable": {
                      "type": "boolean",
                      "description": "If set to false the input field is read-only but user can tab to it, highlight it, and copy the text from it",
                      "defaultValue": true
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete, if prop is not set name attribute is set to id on default and autocomplete is off"
                    },
                    "pattern": {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "email",
                            "alphanumeric",
                            "lowercase",
                            "uppercase",
                            "url"
                          ]
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "A pattern that must be followed for validation purposed. (This can only be used with @jutro/validation) Use some of the available presets or define your own regex pattern to test against."
                    },
                    "icon": {
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input element."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "InputMask"
                    },
                    {
                      "const": "inputmask"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "string",
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "incompleteInput": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for incomplete input field"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "mask": {
                      "type": "string",
                      "description": "The string that formats the mask to display, for example 999-999-9999. By default '9' indicates a number, 'a' a letter and '*' a number or a letter. You can escape the special characters with a backslash."
                    },
                    "maskChar": {
                      "type": "string",
                      "description": "The character used in the mask, for example `x` combined with `mask=99-99` displays `xx-xx`. If empty the mask restrictions are still being enforced, but the mask is not visible. NOTE: Mask char should not be the same as one of possible input characters because this can generate unintended incorrect values.",
                      "defaultValue": "_"
                    },
                    "alwaysShowMask": {
                      "type": "boolean",
                      "description": "If true, the mask is always visible, if false the field will display the placeholder if not focused and empty."
                    },
                    "formatChars": {
                      "type": "object",
                      "description": "A map of special mask formatting characters and the corresponding regular expressions the input must satisfy"
                    },
                    "onGetValidationMessages": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "insertMode": {
                      "type": "boolean",
                      "description": "If set to true, the mask input will work in insert mode instead of overwrite mode. If maskChar is empty, the input always works in insert mode"
                    }
                  },
                  "required": [
                    "mask"
                  ],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input field with a mask that you can control through props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "InputNumber"
                    },
                    {
                      "const": "inputnumber"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Number passed as value"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "validationMinValue": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for min value"
                        },
                        "validationMaxValue": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for max value"
                        },
                        "validationInvalidNumber": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for not a number"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "description": "Type of returned value in onValeChange callback",
                      "defaultValue": "number"
                    },
                    "autoComplete": {
                      "type": "boolean"
                    },
                    "minValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Minimum value for the number"
                    },
                    "maxValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Maximum value for the number"
                    },
                    "decimalPlaces": {
                      "type": "number",
                      "description": "The number of decimal places to display in the value",
                      "defaultValue": 2
                    },
                    "step": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Step for increment/decrement like `0.05`",
                      "defaultValue": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "showGrouping": {
                      "type": "boolean",
                      "description": "Prop to show/hide the thousands separator",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input element for number fields."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "number"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Number passed as value"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "validationMinValue": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for min value"
                        },
                        "validationMaxValue": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for max value"
                        },
                        "validationInvalidNumber": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for not a number"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "description": "Type of returned value in onValeChange callback",
                      "defaultValue": "number"
                    },
                    "autoComplete": {
                      "type": "boolean"
                    },
                    "minValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Minimum value for the number"
                    },
                    "maxValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Maximum value for the number"
                    },
                    "decimalPlaces": {
                      "type": "number",
                      "description": "The number of decimal places to display in the value",
                      "defaultValue": 2
                    },
                    "step": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Step for increment/decrement like `0.05`",
                      "defaultValue": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "showGrouping": {
                      "type": "boolean",
                      "description": "Prop to show/hide the thousands separator",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input element for number fields."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "integer"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Number passed as value"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "validationMinValue": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for min value"
                        },
                        "validationMaxValue": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for max value"
                        },
                        "validationInvalidNumber": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for not a number"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "description": "Type of returned value in onValeChange callback",
                      "defaultValue": "number"
                    },
                    "autoComplete": {
                      "type": "boolean"
                    },
                    "minValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Minimum value for the number"
                    },
                    "maxValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Maximum value for the number"
                    },
                    "decimalPlaces": {
                      "type": "number",
                      "description": "The number of decimal places to display in the value",
                      "defaultValue": 2
                    },
                    "step": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Step for increment/decrement like `0.05`",
                      "defaultValue": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "This name will be passed to input name attribute and switched on autocomplete"
                    },
                    "showGrouping": {
                      "type": "boolean",
                      "description": "Prop to show/hide the thousands separator",
                      "defaultValue": true
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an input element for number fields."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "IntlPhoneNumber"
                    },
                    {
                      "const": "intlphonenumber"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "anyOf": [
                        {},
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Phone number value. Passed as a string f.eg. \"+48600500400\" or phone shape f.eg. {countryCode: { code: \"PL\" }, phoneNumber: \"600500400\"} countryCode has to be iso2 country code lower or upper case."
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "description": "Type of returned value in onValeChange callback",
                      "defaultValue": "object"
                    },
                    "defaultCountry": {
                      "type": "string",
                      "description": "Default country code to be rendered. Must be in iso2 country code string."
                    },
                    "showCountryCodeForReadOnly": {
                      "type": "boolean",
                      "description": "Set country code visibility if rendered in readOnly mode.",
                      "defaultValue": true
                    },
                    "noDropdown": {
                      "type": "boolean",
                      "description": "Hide the country dropdown, the country number is always displayed.",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "IntlPhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render for entering and validating international telephone numbers."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Lookup"
                    },
                    {
                      "const": "lookup"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "availableValues": {
                      "type": "array",
                      "items": {},
                      "description": "Array of choice objects to display"
                    },
                    "optionTypes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "icon": {
                            "type": "string"
                          },
                          "className": {
                            "type": "string"
                          },
                          "displayName": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "defaultMessage": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "object",
                                    "properties": {},
                                    "required": [],
                                    "additionalProperties": false
                                  }
                                },
                                "required": [],
                                "additionalProperties": false
                              }
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "icon",
                          "displayName"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Description for available option types"
                    },
                    "createNewMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message to display when a new options is being created by the user."
                    },
                    "isClearable": {
                      "type": "boolean",
                      "description": "If true ClearIndicator will be shown",
                      "defaultValue": true
                    },
                    "onLoadValues": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "onAddNew": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "showRecentlyViewed": {
                      "type": "boolean",
                      "description": "If true then recently viewed bar will be shown"
                    },
                    "recentlyViewedMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message to display for recently viewed bar."
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "internalClassNames": {
                      "type": "object",
                      "description": "Map of CSS class names for overriding individual parts of component's styles"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "MapArea"
                    },
                    {
                      "const": "maparea"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "country": {
                              "type": "string"
                            },
                            "countryCode": {
                              "type": "string"
                            },
                            "postalCode": {
                              "type": "string"
                            },
                            "state": {
                              "type": "string"
                            },
                            "city": {
                              "type": "string"
                            },
                            "addressLine1": {
                              "type": "string"
                            },
                            "addressLine2": {
                              "type": "string"
                            },
                            "addressLine3": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Address to display on the map"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "country": {
                              "type": "string"
                            },
                            "countryCode": {
                              "type": "string"
                            },
                            "postalCode": {
                              "type": "string"
                            },
                            "state": {
                              "type": "string"
                            },
                            "city": {
                              "type": "string"
                            },
                            "addressLine1": {
                              "type": "string"
                            },
                            "addressLine2": {
                              "type": "string"
                            },
                            "addressLine3": {
                              "type": "string"
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Default address to display on the map",
                      "defaultValue": "2850 S Delaware St #400, San Mateo, CA 94403, USA"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "object"
                    },
                    "mapStyles": {
                      "type": "object",
                      "description": "Styles to apply to the map component",
                      "defaultValue": {
                        "position": "absolute",
                        "top": "0",
                        "bottom": "0",
                        "left": "0",
                        "right": "0",
                        "borderRadius": "4px"
                      }
                    },
                    "googleMapsApiKey": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "The key required by the Google Maps API"
                    },
                    "onGoogleMapsApiKey": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "callback": {
                                  "type": "string"
                                },
                                "callbackProps": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "callback",
                                "callbackProps"
                              ],
                              "additionalProps": false,
                              "defaultSnippets": [
                                {
                                  "label": "Function name",
                                  "body": "${1:function_name}"
                                },
                                {
                                  "label": "Function metadata object",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {}
                                  }
                                },
                                {
                                  "label": "Function metadata object with props",
                                  "body": {
                                    "callback": "$1",
                                    "callbackProps": {
                                      "${2:property}": "${3:value}"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "The key required by the Google Maps API"
                    },
                    "orderOfAddress": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Defines the order of address items",
                      "defaultValue": [
                        "addressLine1",
                        "addressLine2",
                        "addressLine3",
                        "city",
                        "state",
                        "postalCode",
                        "country",
                        "countryCode"
                      ]
                    },
                    "title": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "Title attribute which will be added to the Google Maps iframe for the accessibility"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders an map element. It allows the user to pick a place in the map. Allows you to display address on the map and choose the format of the address."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "PhoneNumber"
                    },
                    {
                      "const": "phonenumber"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "string",
                      "description": "Value to display in control",
                      "defaultValue": ""
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "invalidPhone": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for invalid phone number"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "maskChar": {
                      "type": "string",
                      "description": "The character used in the mask, '_' is used by default. NOTE: Mask char should not be the same as one of possible input characters because this can generate unintended incorrect values.",
                      "defaultValue": "_"
                    },
                    "alwaysShowMask": {
                      "type": "boolean",
                      "description": "If true, the mask is always visible"
                    },
                    "countryCode": {
                      "type": "string",
                      "description": "A country code to automatically set the input mask. The codes are based on the two letter ISO 3166-1 codes. Example codes: US, PL, GB, FR, IE",
                      "defaultValue": "US"
                    },
                    "phoneNumberType": {
                      "type": "number",
                      "description": "A phone number type used when generating the countryCode based mask. Following are possible values:  FIXED_LINE = 0,  MOBILE = 1,  FIXED_LINE_OR_MOBILE = 2,  TOLL_FREE = 3,  PREMIUM_RATE = 4,  SHARED_COST = 5,  VOIP = 6,  PERSONAL_NUMBER = 7,  PAGER = 8,  UAN = 9,  VOICEMAIL = 10,",
                      "defaultValue": 0
                    },
                    "withCountryPrefix": {
                      "type": "boolean",
                      "description": "If set to true, the mask will be prefixed with the country code. Works only in combination with coutryCode"
                    },
                    "icon": {
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "PhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render a phone number mask on a HTML5 <input> element with type 'tel'."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "tel"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {
                      "type": "boolean",
                      "description": "Indicates where the icon should have disabled class"
                    },
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "string",
                      "description": "Value to display in control",
                      "defaultValue": ""
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {
                      "type": "string",
                      "description": "Custom classname"
                    },
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "invalidPhone": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Validation message for invalid phone number"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "maskChar": {
                      "type": "string",
                      "description": "The character used in the mask, '_' is used by default. NOTE: Mask char should not be the same as one of possible input characters because this can generate unintended incorrect values.",
                      "defaultValue": "_"
                    },
                    "alwaysShowMask": {
                      "type": "boolean",
                      "description": "If true, the mask is always visible"
                    },
                    "countryCode": {
                      "type": "string",
                      "description": "A country code to automatically set the input mask. The codes are based on the two letter ISO 3166-1 codes. Example codes: US, PL, GB, FR, IE",
                      "defaultValue": "US"
                    },
                    "phoneNumberType": {
                      "type": "number",
                      "description": "A phone number type used when generating the countryCode based mask. Following are possible values:  FIXED_LINE = 0,  MOBILE = 1,  FIXED_LINE_OR_MOBILE = 2,  TOLL_FREE = 3,  PREMIUM_RATE = 4,  SHARED_COST = 5,  VOIP = 6,  PERSONAL_NUMBER = 7,  PAGER = 8,  UAN = 9,  VOICEMAIL = 10,",
                      "defaultValue": 0
                    },
                    "withCountryPrefix": {
                      "type": "boolean",
                      "description": "If set to true, the mask will be prefixed with the country code. Works only in combination with coutryCode"
                    },
                    "icon": {
                      "type": "string",
                      "description": "MI icon definition"
                    },
                    "iconPosition": {
                      "type": "string",
                      "enum": [
                        "left",
                        "right"
                      ],
                      "description": "Phrase which indicates where the icon should be placed relative to the text"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "PhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render a phone number mask on a HTML5 <input> element with type 'tel'."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "RadioButtonCard"
                    },
                    {
                      "const": "radiobuttoncard"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "The selected value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "The default value to set if none is provided"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "enum": [
                        "portrait",
                        "landscape"
                      ],
                      "description": "Cards layout",
                      "defaultValue": "portrait"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "iconName": {
                            "type": "string"
                          },
                          "iconSrc": {
                            "type": "string"
                          },
                          "iconClassName": {
                            "type": "string"
                          },
                          "iconContainerClassName": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "displayName": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "defaultMessage": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "object",
                                    "properties": {},
                                    "required": [],
                                    "additionalProperties": false
                                  }
                                },
                                "required": [],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "secondaryLabel": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "defaultMessage": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "object",
                                    "properties": {},
                                    "required": [],
                                    "additionalProperties": false
                                  }
                                },
                                "required": [],
                                "additionalProperties": false
                              }
                            ]
                          },
                          "moneyAmount": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "secondaryLabel"
                        ],
                        "additionalProperties": false
                      },
                      "description": "Array of choice objects to display; choice objects contain 'code', 'name' and 'secondaryLabel'",
                      "defaultValue": []
                    },
                    "renderName": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    },
                    "renderSecondaryLabel": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a list of radio button cards. You specify the options using component props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "RadioButton"
                    },
                    {
                      "const": "radiobutton"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Boolean or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains 'code' and 'name'; if not provided, default 'Yes'/'No' will be used"
                    },
                    "isHorizontal": {
                      "type": "boolean",
                      "description": "If true component will be horizontally oriented",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a list of radio buttons. You specify the items using component props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "radio"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Boolean or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains 'code' and 'name'; if not provided, default 'Yes'/'No' will be used"
                    },
                    "isHorizontal": {
                      "type": "boolean",
                      "description": "If true component will be horizontally oriented",
                      "defaultValue": false
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a list of radio buttons. You specify the items using component props."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Slider"
                    },
                    {
                      "const": "slider"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Current slider value (to create fully controlled component)"
                    },
                    "defaultValue": {
                      "description": "Initial slider value (to create uncontrolled component)"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "min": {
                      "type": "number",
                      "description": "Minimum available slider value"
                    },
                    "max": {
                      "type": "number",
                      "description": "Maximum available slider value"
                    },
                    "showIndicators": {
                      "type": "boolean",
                      "description": "Prop to specify whether indicators should be shown or not",
                      "defaultValue": true
                    },
                    "step": {
                      "type": "number",
                      "description": "Step between consecutive values"
                    },
                    "showNotches": {
                      "type": "boolean",
                      "description": "Prop to specify whether notches should be shown or not"
                    },
                    "range": {
                      "type": "boolean",
                      "description": "If set - range selector will be shown",
                      "defaultValue": false
                    },
                    "minimumRange": {
                      "type": "number",
                      "description": "Prop to specify minimum range size in case of range selection"
                    },
                    "handleTooltip": {
                      "type": "string",
                      "enum": [
                        "always",
                        "ondrag",
                        "onfocus",
                        "onblur"
                      ],
                      "description": "Prop to specify when handle tooltip should be visible - ondrag - tooltip is visible only when user drags handle - onfocus - tooltip is visible only when handle is focused - onblur - tooltip is visible only when handle is blured - always - tooltip is always visible"
                    },
                    "onUpdate": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [
                    "min",
                    "max",
                    "value"
                  ],
                  "additionalProperties": false
                }
              },
              "description": ""
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Stepper"
                    },
                    {
                      "const": "stepper"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "String or number passed as value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "decreaseBtnLabel": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "stepper decrease button aria-label"
                        },
                        "increaseBtnLabel": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "stepper increase button aria-label"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "stepValue": {
                      "type": "number",
                      "description": "Step increment value for the input field"
                    },
                    "minValue": {
                      "type": "number",
                      "description": "Minimum value for the input field (note: this is different than aspect)"
                    },
                    "maxValue": {
                      "type": "number",
                      "description": "Maximum value for the input field (note: this is different than aspect)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a numeric value and buttons to increase or decrease the value."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Switch"
                    },
                    {
                      "const": "switch"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "description": "Boolean or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "right",
                        "left",
                        "top"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "left"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "fullWidth": {
                      "type": "boolean",
                      "description": "If true splits the label and control as far apart as possible."
                    },
                    "detailElement": {
                      "type": "object",
                      "description": "Children to render when checkbox is selected (metadata 3.0)"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a \"switch\" with a label. Holds a value of `true` or `false`."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "TextArea"
                    },
                    {
                      "const": "textarea"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "rows": {
                      "type": "number",
                      "description": "The rows attribute specifies the visible height of a text area, in lines.",
                      "defaultValue": 3
                    },
                    "maxLength": {
                      "type": "number",
                      "description": "Restricts the max length of the text in the text area field"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a multi-line text area."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "textarea"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {},
                    "rows": {
                      "type": "number",
                      "description": "The rows attribute specifies the visible height of a text area, in lines.",
                      "defaultValue": 3
                    },
                    "maxLength": {
                      "type": "number",
                      "description": "Restricts the max length of the text in the text area field"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a multi-line text area."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Toggle"
                    },
                    {
                      "const": "toggle"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Boolean, object, or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains `code` and `name`; if not provided, default 'Yes'/'No' is used"
                    },
                    "detailElement": {
                      "type": "object",
                      "description": "Node to render when the \"other\" value is selected"
                    },
                    "animation": {
                      "type": "string",
                      "description": "Animation passed to AnimationGroup"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders buttons that allow you to toggle between the available values."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "boolean"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Boolean, object, or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains `code` and `name`; if not provided, default 'Yes'/'No' is used"
                    },
                    "detailElement": {
                      "type": "object",
                      "description": "Node to render when the \"other\" value is selected"
                    },
                    "animation": {
                      "type": "string",
                      "description": "Animation passed to AnimationGroup"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders buttons that allow you to toggle between the available values."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "yesno"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Boolean, object, or string value"
                    },
                    "defaultValue": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "code for available component value"
                                },
                                "name": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "code",
                                "name"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with Code",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "code": "$1",
                                    "name": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": [
                                    "string",
                                    "number"
                                  ],
                                  "description": "id for available component value"
                                },
                                "displayName": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "display name for available component value"
                                },
                                "subtitle": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "subtitle text"
                                },
                                "secondaryLabel": {
                                  "$ref": "#/definitions/datatypes/intlShape",
                                  "description": "secondary label text to display"
                                }
                              },
                              "required": [
                                "id",
                                "displayName"
                              ],
                              "defaultSnippets": [
                                {
                                  "label": "AvailableValue shape with ID",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2"
                                  }
                                },
                                {
                                  "label": "AvailableValue with all props",
                                  "body": {
                                    "id": "$1",
                                    "displayName": "$2",
                                    "subtitle": {},
                                    "secondaryLabel": {}
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Default value"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "Format of the value",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "Array of choice objects to display; choice objects contains `code` and `name`; if not provided, default 'Yes'/'No' is used"
                    },
                    "detailElement": {
                      "type": "object",
                      "description": "Node to render when the \"other\" value is selected"
                    },
                    "animation": {
                      "type": "string",
                      "description": "Animation passed to AnimationGroup"
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders buttons that allow you to toggle between the available values."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "TypeaheadMultiSelect"
                    },
                    {
                      "const": "typeaheadmultiselect"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "anyOf": [
                        {},
                        {
                          "type": "array",
                          "items": {}
                        }
                      ],
                      "description": "The list of codes that are selected. Each code is matched against the codes in `availableValues` to retrieve a `name` to display"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {
                      "type": "string",
                      "enum": [
                        "object",
                        "string"
                      ],
                      "description": "The format of the items in the value array",
                      "defaultValue": "string"
                    },
                    "availableValues": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "displayName": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "subtitle": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              },
                              "secondaryLabel": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "message id"
                                      },
                                      "defaultMessage": {
                                        "type": "string",
                                        "description": "default display text"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "additional message description"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                      "id",
                                      "defaultMessage"
                                    ],
                                    "defaultSnippets": [
                                      {
                                        "label": "string",
                                        "body": "$1"
                                      },
                                      {
                                        "label": "react-intl object",
                                        "body": {
                                          "id": "$1",
                                          "defaultMessage": "$2",
                                          "description": "$3"
                                        }
                                      }
                                    ]
                                  }
                                ],
                                "description": "Default button label when no context is active"
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      },
                      "description": "List of values that the user can select from.  `name` - the text to display, for example 'Married', 'Single' `code` - the value that is sent on submit."
                    },
                    "allowNew": {
                      "type": "boolean",
                      "description": "Determines if creating new values is allowed"
                    },
                    "noOptionsMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message to display where there are no options that match the text the user enters."
                    },
                    "createNewMessage": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ],
                      "description": "The message to display when a new option is being created by the user. createNewMessage should be passed with the {message} placeholder for example: 'New option: {message}'."
                    },
                    "readOnlySeparator": {
                      "type": "string",
                      "description": "Separator for the readonly value list"
                    },
                    "singleSelect": {
                      "type": "boolean",
                      "description": "Should component only allow a single selection to be made"
                    },
                    "stickyIndicator": {
                      "type": "boolean",
                      "description": "Determines if dropdown indicator will be sticky"
                    },
                    "usePortal": {
                      "type": "boolean",
                      "description": "Default false; if set to true, it will target the body as the menu portal",
                      "defaultValue": false
                    },
                    "isInitiallyOpen": {
                      "type": "boolean",
                      "description": "Should dropdown be initially opened"
                    },
                    "onLoadValues": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "callback": {
                              "type": "string"
                            },
                            "callbackProps": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "callback",
                            "callbackProps"
                          ],
                          "additionalProps": false,
                          "defaultSnippets": [
                            {
                              "label": "Function name",
                              "body": "${1:function_name}"
                            },
                            {
                              "label": "Function metadata object",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {}
                              }
                            },
                            {
                              "label": "Function metadata object with props",
                              "body": {
                                "callback": "$1",
                                "callbackProps": {
                                  "${2:property}": "${3:value}"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                    }
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "Renders a multi-select input where the user can type to match from any of the predefined values. As the user types, the text is matched against the available values to display choices."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "anyOf": [
                    {
                      "const": "Year"
                    },
                    {
                      "const": "year"
                    }
                  ]
                }
              },
              "required": [
                "component"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "string",
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {}
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "IN PROGRESS: Renders a field where the user can enter 4-digit year."
            }
          },
          {
            "if": {
              "properties": {
                "component": {
                  "type": "null"
                },
                "datatype": {
                  "const": "year"
                }
              },
              "required": [
                "datatype"
              ]
            },
            "then": {
              "properties": {
                "componentProps": {
                  "properties": {
                    "label": {},
                    "secondaryLabel": {},
                    "tooltip": {},
                    "placeholder": {},
                    "required": {},
                    "schemaRequired": {},
                    "readOnly": {},
                    "disabled": {},
                    "nullable": {},
                    "visible": {},
                    "value": {
                      "type": "string",
                      "description": "Value to display in control"
                    },
                    "defaultValue": {
                      "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
                    },
                    "autoTrim": {},
                    "onValueChange": {},
                    "onValidationChange": {},
                    "onBlur": {},
                    "onFocus": {},
                    "model": {},
                    "path": {},
                    "showErrors": {},
                    "showRequired": {},
                    "showOptional": {},
                    "validationMessages": {},
                    "layout": {
                      "type": "string",
                      "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'"
                    },
                    "hideLabel": {},
                    "className": {},
                    "contentContainerClassName": {},
                    "controlClassName": {},
                    "labelClassName": {},
                    "secondaryLabelClassName": {},
                    "labelContainerClassName": {},
                    "showValidationIcon": {},
                    "dataPath": {},
                    "validator": {},
                    "requiredFieldValidationMessage": {},
                    "successMessage": {},
                    "messageProps": {
                      "type": "object",
                      "properties": {
                        "requiredField": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "defaultMessage": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": false
                                }
                              },
                              "required": [],
                              "additionalProperties": false
                            }
                          ],
                          "description": "Required message"
                        }
                      },
                      "required": [],
                      "additionalProperties": false,
                      "description": "Message props(error message/aria-label)"
                    },
                    "labelPosition": {
                      "type": "string",
                      "enum": [
                        "top",
                        "left"
                      ],
                      "description": "Allows to select label position",
                      "defaultValue": "top"
                    },
                    "phone": {},
                    "phoneWide": {},
                    "tablet": {},
                    "inputType": {},
                    "testId": {},
                    "registerValidation": {},
                    "enableMultipleValidation": {},
                    "dataType": {}
                  },
                  "required": [],
                  "additionalProperties": false
                }
              },
              "description": "IN PROGRESS: Renders a field where the user can enter 4-digit year."
            }
          },
          {
            "properties": {
              "componentProps": {
                "type": "object",
                "properties": {
                  "label": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "defaultMessage": {
                            "type": "string"
                          },
                          "args": {
                            "type": "object",
                            "properties": {},
                            "required": [],
                            "additionalProperties": false
                          }
                        },
                        "required": [],
                        "additionalProperties": false
                      }
                    ],
                    "description": "Label text to display; if not provided, uses '[id]' for development"
                  },
                  "secondaryLabel": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "defaultMessage": {
                            "type": "string"
                          },
                          "args": {
                            "type": "object",
                            "properties": {},
                            "required": [],
                            "additionalProperties": false
                          }
                        },
                        "required": [],
                        "additionalProperties": false
                      }
                    ],
                    "description": "Secondary label text to display; if not provided, uses '[id]' for development"
                  },
                  "tooltip": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "description": "Card header tooltip",
                        "properties": {
                          "id": {
                            "$ref": "#/definitions/datatypes/idShape",
                            "description": "Used to identify the component. Referenced to find it in the document tree"
                          },
                          "icon": {
                            "type": "string",
                            "description": "Icon to be displayed"
                          },
                          "text": {
                            "$ref": "#/definitions/datatypes/intlShape",
                            "description": "Text to be rendered inside the tooltip"
                          },
                          "title": {
                            "$ref": "#/definitions/datatypes/intlShape",
                            "description": "Title to be rendered inside the tooltip"
                          },
                          "href": {
                            "type": "string",
                            "description": "Url to be opened when user clicks on link text"
                          },
                          "link": {
                            "$ref": "#/definitions/datatypes/intlShape",
                            "description": "Text of link to be rendered inside tooltip"
                          },
                          "renderContent": {
                            "$ref": "#/definitions/datatypes/funcShape",
                            "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
                          },
                          "placement": {
                            "type": "string",
                            "description": "Direction for placing the tooltip against its trigger"
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "description": "Tooltip text to display or tooltip object to pass to TooltipIcon"
                  },
                  "placeholder": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "defaultMessage": {
                            "type": "string"
                          },
                          "args": {
                            "type": "object",
                            "properties": {},
                            "required": [],
                            "additionalProperties": false
                          }
                        },
                        "required": [],
                        "additionalProperties": false
                      }
                    ],
                    "description": "Placeholder to display on empty component"
                  },
                  "required": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "array"
                      }
                    ],
                    "description": "If true, this field is required. If being used with @jutro/validation this prop can also be used to set the custom message overwrite This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
                    "defaultValue": false
                  },
                  "schemaRequired": {
                    "type": "boolean",
                    "description": "If true, this field is required by schema",
                    "defaultValue": false
                  },
                  "readOnly": {
                    "type": "boolean",
                    "description": "If true, this field is readonly",
                    "defaultValue": false
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "If true, this field is disabled",
                    "defaultValue": false
                  },
                  "nullable": {
                    "type": "boolean",
                    "description": "If true, this field returns undefined when the user deletes the data/selection on the input"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "If true, this field is visible"
                  },
                  "autoTrim": {
                    "type": "boolean",
                    "description": "If true, will automatically trim string values on change",
                    "defaultValue": false
                  },
                  "onValueChange": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "callback": {
                            "type": "string"
                          },
                          "callbackProps": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "callback",
                          "callbackProps"
                        ],
                        "additionalProps": false,
                        "defaultSnippets": [
                          {
                            "label": "Function name",
                            "body": "${1:function_name}"
                          },
                          {
                            "label": "Function metadata object",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {}
                            }
                          },
                          {
                            "label": "Function metadata object with props",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {
                                "${2:property}": "${3:value}"
                              }
                            }
                          }
                        ]
                      }
                    ],
                    "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                  },
                  "onValidationChange": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "callback": {
                            "type": "string"
                          },
                          "callbackProps": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "callback",
                          "callbackProps"
                        ],
                        "additionalProps": false,
                        "defaultSnippets": [
                          {
                            "label": "Function name",
                            "body": "${1:function_name}"
                          },
                          {
                            "label": "Function metadata object",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {}
                            }
                          },
                          {
                            "label": "Function metadata object with props",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {
                                "${2:property}": "${3:value}"
                              }
                            }
                          }
                        ]
                      }
                    ],
                    "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                  },
                  "onBlur": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "callback": {
                            "type": "string"
                          },
                          "callbackProps": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "callback",
                          "callbackProps"
                        ],
                        "additionalProps": false,
                        "defaultSnippets": [
                          {
                            "label": "Function name",
                            "body": "${1:function_name}"
                          },
                          {
                            "label": "Function metadata object",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {}
                            }
                          },
                          {
                            "label": "Function metadata object with props",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {
                                "${2:property}": "${3:value}"
                              }
                            }
                          }
                        ]
                      }
                    ],
                    "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                  },
                  "onFocus": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "callback": {
                            "type": "string"
                          },
                          "callbackProps": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "callback",
                          "callbackProps"
                        ],
                        "additionalProps": false,
                        "defaultSnippets": [
                          {
                            "label": "Function name",
                            "body": "${1:function_name}"
                          },
                          {
                            "label": "Function metadata object",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {}
                            }
                          },
                          {
                            "label": "Function metadata object with props",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {
                                "${2:property}": "${3:value}"
                              }
                            }
                          }
                        ]
                      }
                    ],
                    "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                  },
                  "model": {
                    "type": "object",
                    "description": "Passed as second argument to onValueChange"
                  },
                  "path": {
                    "type": "string",
                    "description": "Passed as second argument to onValueChange if model is not present"
                  },
                  "showErrors": {
                    "type": "boolean",
                    "description": "Show errors for this field, works only when field is pristine",
                    "defaultValue": false
                  },
                  "showRequired": {
                    "type": "boolean",
                    "description": "Show required indicator"
                  },
                  "showOptional": {
                    "type": "boolean",
                    "description": "Show optional indicator"
                  },
                  "validationMessages": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "defaultMessage": {
                              "type": "string"
                            },
                            "args": {
                              "type": "object",
                              "properties": {},
                              "required": [],
                              "additionalProperties": false
                            }
                          },
                          "required": [],
                          "additionalProperties": false
                        }
                      ]
                    },
                    "description": "Validation messages to show for this field; only rendered if 'showErrors' is true"
                  },
                  "hideLabel": {
                    "type": "boolean",
                    "description": "Hides the label on any layout",
                    "defaultValue": false
                  },
                  "className": {
                    "type": "string",
                    "description": "Additional style to apply to the component"
                  },
                  "contentContainerClassName": {
                    "type": "string",
                    "description": "Additional style to apply to the content container of the component"
                  },
                  "controlClassName": {
                    "type": "string",
                    "description": "Additional style to apply to the control of the component"
                  },
                  "labelClassName": {
                    "type": "string",
                    "description": "Additional style to apply to the label of the component"
                  },
                  "secondaryLabelClassName": {
                    "type": "string",
                    "description": "Additional style to apply to the secondary label of the component"
                  },
                  "labelContainerClassName": {
                    "type": "string",
                    "description": "Additional style to apply to the label container of the component"
                  },
                  "showValidationIcon": {
                    "type": "boolean",
                    "description": "Used to display or not the validation icon",
                    "defaultValue": false
                  },
                  "dataPath": {
                    "type": "string",
                    "description": "The full path of view model",
                    "defaultValue": ""
                  },
                  "validator": {
                    "type": "object",
                    "properties": {
                      "pattern": {
                        "type": "string"
                      },
                      "message": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "defaultMessage": {
                                "type": "string"
                              },
                              "args": {
                                "type": "object",
                                "properties": {},
                                "required": [],
                                "additionalProperties": false
                              }
                            },
                            "required": [],
                            "additionalProperties": false
                          }
                        ]
                      }
                    },
                    "required": [
                      "pattern",
                      "message"
                    ],
                    "additionalProperties": false,
                    "description": "An object which should contain a regex pattern as string and a validation message as string"
                  },
                  "requiredFieldValidationMessage": {
                    "type": "string",
                    "description": "Used to override the default required field message"
                  },
                  "successMessage": {
                    "type": "string",
                    "description": "Success message to apply to component if it is valid"
                  },
                  "phone": {
                    "type": "object",
                    "description": "Include any FieldComponent property to use at 'phone' breakpoint"
                  },
                  "phoneWide": {
                    "type": "object",
                    "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint"
                  },
                  "tablet": {
                    "type": "object",
                    "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint"
                  },
                  "inputType": {
                    "type": "string",
                    "description": "Type attribute specifies the type of <input> element to display."
                  },
                  "testId": {
                    "type": "string",
                    "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id."
                  },
                  "registerValidation": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "callback": {
                            "type": "string"
                          },
                          "callbackProps": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "callback",
                          "callbackProps"
                        ],
                        "additionalProps": false,
                        "defaultSnippets": [
                          {
                            "label": "Function name",
                            "body": "${1:function_name}"
                          },
                          {
                            "label": "Function metadata object",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {}
                            }
                          },
                          {
                            "label": "Function metadata object with props",
                            "body": {
                              "callback": "$1",
                              "callbackProps": {
                                "${2:property}": "${3:value}"
                              }
                            }
                          }
                        ]
                      }
                    ],
                    "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`. When provided, it overrides the `variant` prop."
                  },
                  "enableMultipleValidation": {
                    "type": "boolean",
                    "description": "Used by @jutro/validation package: Displays multiple field validation messages all at once."
                  }
                },
                "required": [],
                "additionalProperties": true
              }
            },
            "description": "Generic Field"
          }
        ]
      },
      "floorplan": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "floorplan",
            "description": "(required) type of metadata; this must always be 'floorplan' for floorplan definitions"
          },
          "matches": {
            "description": "The props to match against the current location. If match, the configuration override will be applied",
            "anyOf": [
              {
                "$ref": "#/definitions/ts/FloorPlans/RouteMatch"
              },
              {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ts/FloorPlans/RouteMatch"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "showHeader": {
            "description": "Show/hide Header",
            "type": "boolean"
          },
          "showSubHeader": {
            "description": "Defines whether the sub navigation is shown or not",
            "type": "boolean"
          },
          "showFooter": {
            "description": "Show/hide footer",
            "type": "boolean"
          },
          "showLeftSide": {
            "description": "Show/hide left navigation",
            "type": "boolean"
          },
          "showRightSide": {
            "description": "Show/hide right panel",
            "type": "boolean"
          },
          "routes": {
            "description": "App routes to be shown in Sub Header",
            "$ref": "#/definitions/metadata/routes"
          },
          "sideRoutes": {
            "description": "App routes to be shown in Left Side",
            "$ref": "#/definitions/metadata/routes"
          },
          "renderHeader": {
            "description": "Render custom header",
            "$ref": "#/definitions/datatypes/funcShape"
          },
          "header": {
            "description": "Properties for Application Header component",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "className": {
                "description": "CSS class name for this component",
                "type": "string"
              },
              "logoSrc": {
                "description": "Display logo from source",
                "type": "string"
              },
              "logoTitle": {
                "description": "The title for the logo",
                "$ref": "#/definitions/datatypes/intlShape"
              },
              "logoUrl": {
                "description": "The link path for the logo",
                "type": "string"
              },
              "onSearchValueChange": {
                "description": "Display search field. Callback for the search field value change",
                "$ref": "#/definitions/datatypes/funcShape"
              },
              "onLoadValues": {
                "description": "Function for asynchronous data loading in search field",
                "$ref": "#/definitions/datatypes/funcShape"
              },
              "searchAvailableValues": {
                "description": "Array of choice objects to display",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/datatypes/idShape"
                    },
                    "displayName": {
                      "$ref": "#/definitions/datatypes/intlShape"
                    },
                    "subtitle": {
                      "$ref": "#/definitions/datatypes/intlShape"
                    },
                    "secondaryLabel": {
                      "$ref": "#/definitions/datatypes/intlShape"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              },
              "showNotifications": {
                "description": "Display notification icon",
                "type": "boolean"
              },
              "showAvatar": {
                "description": "Display avatar",
                "type": "boolean"
              },
              "avatarProps": {
                "description": "Avatar props to be passed down if not using auth info (username, imageSource, title, subtitle)",
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "username": {
                    "description": "username used to render initials in Avatar",
                    "type": "string"
                  },
                  "title": {
                    "description": "The main title to be displayed inside the Avatar MenuDropdown",
                    "$ref": "#/definitions/datatypes/intlShape"
                  },
                  "subtitle": {
                    "description": "The main subtitle to be displayed inside the Avatar MenuDropdown",
                    "$ref": "#/definitions/datatypes/intlShape"
                  },
                  "imageSource": {
                    "description": "Image source for the Avatar button",
                    "type": "string"
                  }
                }
              },
              "commonAvatarRoutes": {
                "description": "Array of items to be displayed as common Avatar content",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "id": {
                      "description": "Used to identify dropdown menu link component.",
                      "$ref": "#/definitions/datatypes/idShape"
                    },
                    "to": {
                      "description": "Internal link.",
                      "$ref": "#/definitions/datatypes/intlShape"
                    },
                    "href": {
                      "description": "External link.",
                      "type": "string"
                    },
                    "target": {
                      "description": "Specifies where to open the external link.",
                      "type": "string"
                    },
                    "rel": {
                      "description": "Specifies the relationship between the current and an external document.",
                      "type": "string"
                    },
                    "disabled": {
                      "description": "If `true`, this link is disabled",
                      "type": "boolean"
                    },
                    "onMenuItemClick": {
                      "description": "Callback supposed to be triggered when clicked in the context of menu",
                      "$ref": "#/definitions/datatypes/funcShape"
                    },
                    "focused": {
                      "description": "If `true`, the link is considered as a currently active one",
                      "type": "boolean"
                    },
                    "className": {
                      "description": "The class name of the link",
                      "type": "string"
                    },
                    "activeClassName": {
                      "description": "The class to give the link when it is active",
                      "type": "string"
                    },
                    "visible": {
                      "description": "If true, this link is visible.",
                      "type": "boolean"
                    },
                    "onClick": {
                      "description": "On link click event handler",
                      "$ref": "#/definitions/datatypes/funcShape"
                    },
                    "title": {
                      "description": "The link title",
                      "$ref": "#/definitions/datatypes/intlShape"
                    }
                  }
                }
              },
              "searchFieldPlaceholder": {
                "description": "Search field placeholder",
                "$ref": "#/definitions/datatypes/intlShape"
              },
              "showAppSwitcher": {
                "description": "Flag to show App Switcher when set to true",
                "type": "boolean"
              },
              "appSwitcherItems": {
                "description": "Array of items to be displayed in App Switcher menu",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "title": {
                          "description": "Title that will be displayed below the icon",
                          "type": "string"
                        },
                        "to": {
                          "description": "Internal path to the application",
                          "$ref": "#/definitions/datatypes/intlToShape"
                        },
                        "href": {
                          "description": "External path",
                          "$ref": "#/definitions/datatypes/intlShape"
                        },
                        "imageUrl": {
                          "type": "string",
                          "description": "Source of the image"
                        },
                        "imageAlt": {
                          "type": "string",
                          "description": "Alternative text of the image"
                        },
                        "exact": {
                          "type": "boolean",
                          "description": "Flag for the exact path matching in react-router"
                        },
                        "onClick": {
                          "description": "Callback on item click event handler",
                          "$ref": "#/definitions/datatypes/funcShape"
                        },
                        "isFocused": {
                          "type": "boolean",
                          "description": "Flag to indicate if the current item is focused"
                        }
                      },
                      "required": [
                        "title"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "title": {
                          "description": "Title of the application group",
                          "type": "string"
                        },
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "description": "Title that will be displayed below the icon",
                                "type": "string"
                              },
                              "to": {
                                "description": "Internal path to the application",
                                "$ref": "#/definitions/datatypes/intlToShape"
                              },
                              "href": {
                                "description": "External path",
                                "$ref": "#/definitions/datatypes/intlShape"
                              },
                              "imageUrl": {
                                "type": "string",
                                "description": "Source of the image"
                              },
                              "imageAlt": {
                                "type": "string",
                                "description": "Alternative text of the image"
                              },
                              "exact": {
                                "type": "boolean",
                                "description": "Flag for the exact path matching in react-router"
                              },
                              "onClick": {
                                "description": "Callback on item click event handler",
                                "$ref": "#/definitions/datatypes/funcShape"
                              },
                              "isFocused": {
                                "type": "boolean",
                                "description": "Flag to indicate if the current item is focused"
                              }
                            },
                            "required": [
                              "title"
                            ],
                            "additionalProperties": false
                          },
                          "description": "Array of the route items"
                        },
                        "isInitiallyCollapsed": {
                          "type": "boolean",
                          "description": "Default state for the expandable application group"
                        }
                      },
                      "required": [
                        "title",
                        "items"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "separator": {
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "useAuthInfo": {
                "description": "Use Okta auth info",
                "type": "boolean"
              },
              "showHelp": {
                "description": "Flag to show Help dropdown when set to true",
                "type": "boolean"
              },
              "helpUrl": {
                "description": "The link path for the help page",
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "label": {
                        "$ref": "#/definitions/datatypes/intlShape"
                      },
                      "onClick": {
                        "description": "Creates a new function.",
                        "$ref": "#/definitions/datatypes/funcShape"
                      },
                      "href": {
                        "$ref": "#/definitions/datatypes/intlShape"
                      }
                    },
                    "required": [
                      "label"
                    ]
                  },
                  {
                    "$ref": "#/definitions/datatypes/intlShape"
                  }
                ]
              },
              "helpPopoverItems": {
                "description": "Help popover items",
                "type": "array",
                "items": {}
              },
              "callbackMap": {
                "type": "object",
                "description": "Map to resolve callbacks on avatar links"
              },
              "appSwitcherFooterText": {
                "description": "Text displayed on footer link in AppSwitcher",
                "$ref": "#/definitions/datatypes/intlShape"
              },
              "appSwitcherFooterUrl": {
                "description": "URL to which footer link in AppSwitcher leads",
                "type": "string"
              },
              "onAppSwitcherFooterClick": {
                "description": "Callback which will be triggered when footer link in AppSwitcher is clicked",
                "$ref": "#/definitions/datatypes/funcShape"
              },
              "appSwitcherSearchEnabled": {
                "type": "boolean",
                "description": "Enables search field in AppSwitcher if the number of items equals or is above `appSwitcherCollapsibleGroupsThreshold` value",
                "defaultValue": true
              },
              "appSwitcherCollapsibleGroupsThreshold": {
                "type": "number",
                "description": "Number of items from which the groups in AppSwitcher are collapsible and the search is displayed",
                "defaultValue": 15
              },
              "appSwitcherHideFooter": {
                "type": "boolean",
                "description": "Prop to specify if the footer in AppSwitcher should be hidden or not",
                "defaultValue": false
              }
            }
          },
          "subHeader": {
            "description": "Sub header config",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "className": {
                "type": "string"
              },
              "contextSwitcher": {
                "$ref": "#/definitions/ts/FloorPlans/ContextSwitcherPropTypes"
              }
            }
          },
          "rightSide": {
            "description": "Right panel config",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "isInitiallyCollapsed": {
                "type": "boolean"
              },
              "collapsible": {
                "type": "boolean"
              },
              "sides": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "label": {
                      "$ref": "#/definitions/datatypes/intlShape",
                      "description": "Label describing the content used for accessibility"
                    },
                    "icon": {
                      "description": "Icon that will represent the content on the icon bar",
                      "type": "string"
                    },
                    "component": {
                      "description": "Component to render as content",
                      "type": "string"
                    },
                    "componentProps": {
                      "description": "Component props",
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  },
                  "required": [
                    "component",
                    "label"
                  ]
                }
              }
            }
          },
          "footer": {
            "description": "Children components config for Footer",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "component": {
                "description": "Component to be rendered",
                "type": "string"
              },
              "componentProps": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "content": {
                "$ref": "#/definitions/datatypes/contentShape",
                "description": "the content to display; single component or array of components"
              }
            }
          },
          "scrollContent": {
            "description": "Make content scrollable",
            "type": "boolean"
          },
          "className": {
            "description": "Additional class names for component.",
            "type": "string"
          },
          "leftSide": {
            "description": "Props passed to SideNavigation",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "contextSwitcher": {
                "$ref": "#/definitions/ts/FloorPlans/ContextSwitcherPropTypes",
                "description": "Context switcher object"
              },
              "className": {
                "type": "string"
              },
              "collapsible": {
                "type": "boolean"
              },
              "collapsed": {
                "type": "boolean"
              }
            }
          },
          "excludeScrollToTopRoutes": {
            "description": "Props path the pages which should be exclude from automatic scroll to top",
            "anyOf": [
              {
                "$ref": "#/definitions/ts/FloorPlans/RouteMatch"
              },
              {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ts/FloorPlans/RouteMatch"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "notificationChildren": {
            "type": "object",
            "description": "Notification content to be rendered"
          },
          "avatarChildren": {
            "type": "object",
            "description": "Avatar content to be rendered"
          }
        }
      },
      "iterable": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for container; should be unique per page"
          },
          "type": {
            "const": "iterable",
            "description": "(required) type of metadata; this must always be 'iterable' for iterable definitions"
          },
          "component": {
            "type": "string",
            "description": "component to render; if not provided, renders content inside React.Fragment"
          },
          "componentProps": {
            "type": "object",
            "description": "component-specific properties"
          },
          "contentRepeat": {
            "type": "object",
            "properties": {
              "path": {
                "$ref": "#/definitions/datatypes/pathShape"
              },
              "variableProps": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "content": {
                "$ref": "#/definitions/datatypes/contentObjectShape"
              }
            },
            "description": "defines the repeatable content"
          },
          "contentEmpty": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "what to display if no repeatable content"
          },
          "contentBefore": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "what to display before repeatable content"
          },
          "contentAfter": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "what to display after repeatable content"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "component"
        ],
        "description": "used to describe items with iterable content"
      },
      "component": {
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "allOf": []
      },
      "page": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for page"
          },
          "type": {
            "const": "page",
            "description": "(required) type of metadata; this must always be 'page' for page definitions"
          },
          "component": {
            "type": "string",
            "description": "component to render"
          },
          "componentProps": {
            "type": "object",
            "properties": {
              "title": {
                "$ref": "#/definitions/datatypes/intlShape"
              }
            },
            "description": "component-specific properties"
          },
          "content": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "the content to display; single component or array of components"
          },
          "contentLayout": {
            "$ref": "#/definitions/datatypes/contentLayoutShape",
            "description": "layout options for the content of this item"
          },
          "definitions": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type"
        ],
        "description": "used to describe pages"
      },
      "wizard": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for wizard"
          },
          "type": {
            "const": "wizard",
            "description": "(required) type of metadata; this must always be 'wizard' for wizard definitions"
          },
          "title": {
            "type": "string",
            "description": "title shown above the wizard"
          },
          "stepNavTitle": {
            "type": "string",
            "description": "title shown in the wizard navigation"
          },
          "@ref": {
            "type": "string",
            "description": "used to reference a shared definition"
          },
          "component": {
            "type": "string",
            "description": "component to render"
          },
          "componentProps": {
            "type": "object",
            "properties": {
              "title": {
                "$ref": "#/definitions/datatypes/intlShape"
              }
            },
            "description": "component-specific properties"
          },
          "content": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "the content to display; single component or array of components"
          },
          "flow": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "wizard flow is defined here"
          },
          "wizardProps": {
            "type": "object",
            "properties": {
              "subRoutes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "route": {
                      "$ref": "#/definitions/datatypes/pathShape",
                      "description": "path of route"
                    },
                    "component": {
                      "type": "string",
                      "description": "name of component in component map"
                    },
                    "componentProps": {
                      "type": "object",
                      "description": "props to pass to the component"
                    }
                  }
                },
                "description": "subroutes to utilize subwizards within a wizard"
              },
              "cancelPath": {
                "$ref": "#/definitions/datatypes/pathShape",
                "description": "route to use on cancel action"
              },
              "finishPath": {
                "$ref": "#/definitions/datatypes/pathShape",
                "description": "route to use on finish action"
              },
              "knockoutPath": {
                "$ref": "#/definitions/datatypes/pathShape",
                "description": "route to use on knokout condition"
              },
              "onCancel": {
                "$ref": "#/definitions/datatypes/wizardCallbackShape",
                "description": "callback to use for cancel wizard action"
              },
              "onFinish": {
                "$ref": "#/definitions/datatypes/wizardCallbackShape",
                "description": "callback to use for finish wizard action"
              },
              "onStart": {
                "$ref": "#/definitions/datatypes/wizardCallbackShape",
                "description": "callback to use on wizard start action"
              },
              "buttonProps": {
                "$ref": "#/definitions/datatypes/buttonPropsShape"
              }
            }
          }
        },
        "description": "used to describe the wizard schema",
        "additionalProperties": false,
        "required": [
          "id",
          "type"
        ]
      },
      "wizardpage": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "(required) identifier for wizard"
          },
          "type": {
            "const": "wizardpage",
            "description": "(required) type of metadata; this must always be 'wizard' for wizard definitions"
          },
          "@ref": {
            "type": "string",
            "description": "used to reference a shared definition"
          },
          "route": {
            "$ref": "#/definitions/datatypes/pathShape"
          },
          "path": {
            "$ref": "#/definitions/datatypes/pathShape"
          },
          "title": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "title to show on page/progress"
          },
          "component": {
            "type": "string",
            "description": "component to render"
          },
          "componentProps": {
            "type": "object",
            "properties": {
              "title": {
                "$ref": "#/definitions/datatypes/intlShape"
              }
            },
            "description": "component-specific properties"
          },
          "content": {
            "$ref": "#/definitions/datatypes/contentShape",
            "description": "the content to display; single component or array of components"
          },
          "contentLayout": {
            "$ref": "#/definitions/datatypes/contentLayoutShape",
            "description": "layout options for the content of this item"
          },
          "wizardPageProps": {
            "type": "object",
            "properties": {
              "showOnStepNav": {
                "type": "boolean",
                "description": "skip or not based on its result. If no 'isStepValid' function, it will stop here",
                "defaultValue": false
              },
              "skipOnResume": {
                "type": "boolean",
                "description": "skip on resume",
                "defaultValue": false
              },
              "knockoutPath": {
                "$ref": "#/definitions/datatypes/pathShape",
                "description": "route to use on knokout condition"
              },
              "buttonProps": {
                "$ref": "#/definitions/datatypes/buttonPropsShape"
              }
            }
          },
          "onPrevious": {
            "$ref": "#/definitions/datatypes/wizardCallbackShape"
          },
          "onNext": {
            "$ref": "#/definitions/datatypes/wizardCallbackShape"
          }
        },
        "description": "used to describe the wizard schema",
        "additionalProperties": false,
        "required": [
          "id",
          "type"
        ]
      },
      "routes": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/metadata/route"
        },
        "uniqueItems": true
      },
      "route": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "path": {
            "$ref": "#/definitions/datatypes/pathShape",
            "description": "URL path of the route"
          },
          "exact": {
            "description": "When true, will only match if the path matches the location.pathname exactly",
            "type": "boolean"
          },
          "strict": {
            "description": "When true, a path that has a trailing slash will only match a location.pathname with a trailing slash.",
            "type": "boolean"
          },
          "sensitive": {
            "description": "Match from case sensitive",
            "type": "boolean"
          },
          "redirect": {
            "$ref": "#/definitions/datatypes/pathShape",
            "description": "Path to which redirect when entering current page"
          },
          "push": {
            "description": "When true, redirecting will push a new entry onto the history instead of replacing the current one",
            "type": "boolean"
          },
          "to": {
            "$ref": "#/definitions/datatypes/toShape",
            "description": "A location to redirect to"
          },
          "from": {
            "description": "A pathname to redirect from.",
            "type": "string"
          },
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "Identifier for route"
          },
          "component": {
            "description": "Component to be rendered as the destination page for this route",
            "type": "string"
          },
          "componentProps": {
            "description": "Properties for the component to be rendered",
            "type": "object",
            "properties": {},
            "additionalProperties": true
          },
          "title": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "Title to be displayed for route"
          },
          "showOnNavBar": {
            "description": "Defines whether route should be shown in the navigation",
            "type": "boolean"
          },
          "navLink": {
            "description": "Nav link properties",
            "$ref": "#/definitions/ts/Route/NavLinkPropTypes"
          },
          "routes": {
            "description": "Array of route subroutes",
            "type": "array",
            "items": {
              "$ref": "#/definitions/metadata/route"
            }
          },
          "href": {
            "description": "External path from application",
            "type": "string"
          }
        },
        "anyOf": [
          {
            "required": [
              "component"
            ]
          },
          {
            "required": [
              "redirect"
            ]
          },
          {
            "required": [
              "routes"
            ]
          }
        ]
      }
    },
    "datatypes": {
      "availableValueObjectShape": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "code": {
                "type": [
                  "string",
                  "number"
                ],
                "description": "code for available component value"
              },
              "name": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "name for available component value"
              },
              "subtitle": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "subtitle text"
              },
              "secondaryLabel": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "secondary label text to display"
              }
            },
            "required": [
              "code",
              "name"
            ],
            "defaultSnippets": [
              {
                "label": "AvailableValue shape with Code",
                "body": {
                  "code": "$1",
                  "name": "$2"
                }
              },
              {
                "label": "AvailableValue with all props",
                "body": {
                  "code": "$1",
                  "name": "$2",
                  "subtitle": {},
                  "secondaryLabel": {}
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "number"
                ],
                "description": "id for available component value"
              },
              "displayName": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "display name for available component value"
              },
              "subtitle": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "subtitle text"
              },
              "secondaryLabel": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "secondary label text to display"
              }
            },
            "required": [
              "id",
              "displayName"
            ],
            "defaultSnippets": [
              {
                "label": "AvailableValue shape with ID",
                "body": {
                  "id": "$1",
                  "displayName": "$2"
                }
              },
              {
                "label": "AvailableValue with all props",
                "body": {
                  "id": "$1",
                  "displayName": "$2",
                  "subtitle": {},
                  "secondaryLabel": {}
                }
              }
            ]
          }
        ]
      },
      "contentShape": {
        "anyOf": [
          {
            "$ref": "#/definitions/datatypes/contentArrayShape"
          },
          {
            "$ref": "#/definitions/datatypes/contentObjectShape"
          },
          {
            "$ref": "#/definitions/datatypes/intlShape"
          }
        ],
        "defaultSnippets": [
          {
            "label": "array of components",
            "body": [
              {
                "id": "$1",
                "type": "$2",
                "component": "$3"
              }
            ]
          },
          {
            "label": "component",
            "body": {
              "id": "$1",
              "type": "$2",
              "component": "$3"
            }
          },
          {
            "label": "[]",
            "body": []
          }
        ]
      },
      "contentArrayShape": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "action"
                      }
                    }
                  },
                  "then": {
                    "$ref": "#/definitions/metadata/action"
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "container"
                      }
                    }
                  },
                  "then": {
                    "$ref": "#/definitions/metadata/container"
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "element"
                      }
                    }
                  },
                  "then": {
                    "$ref": "#/definitions/metadata/element"
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "field"
                      }
                    }
                  },
                  "then": {
                    "$ref": "#/definitions/metadata/field"
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "iterable"
                      }
                    }
                  },
                  "then": {
                    "$ref": "#/definitions/metadata/iterable"
                  }
                }
              ]
            },
            {
              "$ref": "#/definitions/datatypes/intlShape"
            }
          ],
          "defaultSnippets": [
            {
              "label": "component",
              "body": {
                "id": "$1",
                "type": "$2",
                "component": "$3"
              }
            }
          ]
        },
        "uniqueItems": true,
        "additionalItems": false
      },
      "contentObjectShape": {
        "type": "object",
        "allOf": [
          {
            "if": {
              "properties": {
                "type": {
                  "const": "action"
                }
              }
            },
            "then": {
              "$ref": "#/definitions/metadata/action"
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "const": "container"
                }
              }
            },
            "then": {
              "$ref": "#/definitions/metadata/container"
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "const": "element"
                }
              }
            },
            "then": {
              "$ref": "#/definitions/metadata/element"
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "const": "field"
                }
              }
            },
            "then": {
              "$ref": "#/definitions/metadata/field"
            }
          },
          {
            "if": {
              "properties": {
                "type": {
                  "const": "iterable"
                }
              }
            },
            "then": {
              "$ref": "#/definitions/metadata/iterable"
            }
          }
        ]
      },
      "contentLayoutShape": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "description": "(required) layout component (e.g. Grid, Flex)"
              },
              "componentProps": {
                "type": "object",
                "description": "properties for layout component"
              }
            },
            "required": [
              "component"
            ],
            "defaultSnippets": [
              {
                "label": "Layout component options",
                "body": {
                  "component": "$1"
                }
              },
              {
                "label": "Layout component options with props",
                "body": {
                  "component": "$1",
                  "componentProps": {
                    "${2:property}": "${3:value}"
                  }
                }
              }
            ]
          },
          {
            "$ref": "#/definitions/metadata/layout"
          }
        ]
      },
      "idShape": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9_-]+\\.)*[a-zA-Z0-9_-]+$"
      },
      "funcShape": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "callback": {
                "type": "string"
              },
              "callbackProps": {
                "type": "object"
              }
            },
            "required": [
              "callback",
              "callbackProps"
            ],
            "additionalProps": false,
            "defaultSnippets": [
              {
                "label": "Function name",
                "body": "${1:function_name}"
              },
              {
                "label": "Function metadata object",
                "body": {
                  "callback": "$1",
                  "callbackProps": {}
                }
              },
              {
                "label": "Function metadata object with props",
                "body": {
                  "callback": "$1",
                  "callbackProps": {
                    "${2:property}": "${3:value}"
                  }
                }
              }
            ]
          }
        ]
      },
      "intlShape": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "message id"
              },
              "defaultMessage": {
                "type": "string",
                "description": "default display text"
              },
              "description": {
                "type": "string",
                "description": "additional message description"
              }
            },
            "additionalProperties": false,
            "required": [
              "id",
              "defaultMessage"
            ],
            "defaultSnippets": [
              {
                "label": "string",
                "body": "$1"
              },
              {
                "label": "react-intl object",
                "body": {
                  "id": "$1",
                  "defaultMessage": "$2",
                  "description": "$3"
                }
              }
            ]
          }
        ]
      },
      "intlToShape": {
        "oneOf": [
          {
            "$ref": "#/definitions/datatypes/intlShape"
          },
          {
            "type": "object",
            "properties": {
              "pathname": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "Link path"
              },
              "search": {
                "type": "string",
                "description": "Query parameters"
              },
              "hash": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "Hash to put in the URL"
              },
              "state": {
                "type": "object",
                "description": "State to persist to the location"
              }
            },
            "required": [],
            "additionalProperties": false
          }
        ]
      },
      "pathShape": {
        "type": "string"
      },
      "toShape": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "pathname": {
                "type": "string",
                "description": "Link path"
              },
              "search": {
                "type": "string",
                "description": "Query parameters"
              },
              "hash": {
                "type": "string",
                "description": "Hash to put in the URL"
              },
              "state": {
                "type": "object",
                "description": "State to persist to the location"
              }
            },
            "required": [],
            "additionalProperties": false
          }
        ]
      },
      "tooltipShape": {
        "oneOf": [
          {
            "$ref": "#/definitions/datatypes/intlShape"
          },
          {
            "type": "object",
            "properties": {
              "href": {
                "type": "string",
                "description": "url to be opened when user clicks on link text"
              },
              "icon": {
                "type": "string",
                "description": "icon to be displayed"
              },
              "link": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "text of link to be rendered inside tooltip"
              },
              "linkIcon": {
                "type": "string",
                "description": "icon for link to be displayed"
              },
              "placement": {
                "enum": [
                  "left",
                  "right",
                  "top",
                  "bottom"
                ],
                "description": "position of the tooltip in relation to icon"
              },
              "text": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "(required) text to be rendered inside the tooltip"
              },
              "title": {
                "$ref": "#/definitions/datatypes/intlShape",
                "description": "title to be rendered inside the tooltip"
              }
            },
            "required": [
              "text"
            ],
            "defaultSnippets": [
              {
                "label": "tooltip properties",
                "body": {
                  "text": "$1"
                }
              }
            ],
            "additionalProperties": false
          }
        ]
      },
      "buttonPropsShape": {
        "type": "object",
        "description": "override props for wizard buttons",
        "properties": {
          "cancel": {
            "type": "object"
          },
          "finish": {
            "type": "object"
          },
          "next": {
            "type": "object"
          },
          "previous": {
            "type": "object"
          }
        },
        "defaultSnippets": [
          {
            "label": "Default",
            "body": {}
          },
          {
            "label": "Button props override",
            "body": {
              "cancel": {},
              "finish": {},
              "next": {},
              "previous": {}
            }
          }
        ]
      },
      "wizardCallbackShape": {
        "type": "object",
        "description": "callback shape of wizard",
        "properties": {
          "callback": {
            "type": "string",
            "description": "name of the callback"
          },
          "callbackProps": {
            "type": "object",
            "description": "callback props",
            "properties": {
              "progress": {
                "type": "object",
                "properties": {
                  "message": {
                    "$ref": "#/definitions/datatypes/intlShape"
                  }
                }
              },
              "success": {
                "type": "object",
                "properties": {
                  "path": {
                    "$ref": "#/definitions/datatypes/pathShape"
                  }
                }
              },
              "failure": {
                "type": "object",
                "properties": {
                  "path": {
                    "$ref": "#/definitions/datatypes/pathShape"
                  },
                  "message": {
                    "$ref": "#/definitions/datatypes/intlShape"
                  }
                }
              },
              "prompt": {
                "type": "object",
                "properties": {
                  "title": {
                    "$ref": "#/definitions/datatypes/intlShape"
                  },
                  "message": {
                    "$ref": "#/definitions/datatypes/intlShape"
                  }
                }
              }
            }
          }
        },
        "defaultSnippets": [
          {
            "label": "Default callback shape",
            "body": {
              "callback": "${1:onCalled}",
              "callbackProps": {}
            }
          },
          {
            "label": "Default callback shape with all props",
            "body": {
              "callback": "${1:onCalled}",
              "callbackProps": {
                "progress": {},
                "success": {},
                "failure": {},
                "prompt": {}
              }
            }
          }
        ]
      },
      "selfLayoutShape": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "component": {
                "type": "string",
                "description": "self layout component (e.g. GridItem, FlexItem)"
              },
              "componentProps": {
                "type": "object",
                "description": "properties for self layout component"
              }
            },
            "required": [
              "component"
            ],
            "defaultSnippets": [
              {
                "label": "Self layout component",
                "body": {
                  "component": "$1"
                }
              },
              {
                "label": "Self layout component with props",
                "body": {
                  "component": "$1",
                  "componentProps": {
                    "${2:property}": "$3"
                  }
                }
              }
            ]
          },
          {
            "$ref": "#/definitions/metadata/layout"
          }
        ]
      },
      "currencyValueShape": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "numeric value of the amount"
              },
              "currency": {
                "type": "string",
                "description": "currency code"
              }
            },
            "additionalProperties": false,
            "required": [
              "amount",
              "currency"
            ]
          }
        ]
      },
      "dateValueShape": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "object",
            "properties": {
              "year": {
                "type": "number"
              },
              "month": {
                "type": "number"
              },
              "day": {
                "type": "number"
              },
              "hour": {
                "type": "number"
              },
              "minute": {
                "type": "number"
              }
            },
            "additionalProperties": false,
            "required": [
              "year",
              "month",
              "day"
            ]
          }
        ]
      },
      "dateFormatShape": {
        "type": "string",
        "enum": [
          "vshort",
          "short",
          "long",
          "abbreviated",
          "full"
        ]
      },
      "navLinkShape": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "identifier for nav link; should be unique per page"
          },
          "text": {
            "type": "string",
            "description": "label for nav link"
          },
          "icon": {
            "type": "string",
            "description": "icon for nav link"
          },
          "className": {
            "type": "string",
            "description": "additional className for nav link"
          },
          "activeClassName": {
            "type": "string",
            "description": "additional classname for nav link active state"
          },
          "component": {
            "type": "string",
            "description": "react element to render nav item"
          },
          "notifications": {
            "type": "number",
            "description": "value for the Badge"
          }
        },
        "additionalProperties": false
      },
      "nestedTooltipShape": {
        "type": "object",
        "description": "Configuration options for tooltips nested within other components",
        "properties": {
          "id": {
            "$ref": "#/definitions/datatypes/idShape",
            "description": "Used to identify the component. Referenced to find it in the document tree"
          },
          "icon": {
            "type": "string",
            "description": "Icon to be displayed"
          },
          "text": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "Text to be rendered inside the tooltip"
          },
          "title": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "Title to be rendered inside the tooltip"
          },
          "href": {
            "type": "string",
            "description": "Url to be opened when user clicks on link text"
          },
          "link": {
            "$ref": "#/definitions/datatypes/intlShape",
            "description": "Text of link to be rendered inside tooltip"
          },
          "renderContent": {
            "$ref": "#/definitions/datatypes/funcShape",
            "description": "Function to render custom content in the tooltip. Overrides default content. When provided `link`, `href`, `text` and `title` properties are ignored."
          },
          "placement": {
            "type": "string",
            "description": "Direction for placing the tooltip against its trigger"
          }
        },
        "additionalProperties": false
      },
      "themeConfigShape": {
        "type": "object",
        "description": "Configuration options for UI themes",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the theme to be displayed in the UI"
          },
          "prefix": {
            "type": "string",
            "description": "Optional prefix phrase for a themeRoot's className"
          },
          "rootStyle": {
            "type": "object",
            "description": "Optional map of CSS variables values overrides. For those without overrides, the default styles are being applied.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "dropTarget": {
            "type": "string",
            "description": "Optional version when the theme is planned to be removed (if deprecated)"
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      }
    },
    "ts": {
      "Route": {
        "NavLinkPropTypes": {
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for nav link; should be unique per page",
              "type": "string"
            },
            "text": {
              "description": "Label for nav link",
              "$ref": "#/definitions/datatypes/intlShape"
            },
            "icon": {
              "description": "Icon for nav link",
              "type": "string"
            },
            "className": {
              "description": "Additional className for nav link",
              "type": "string"
            },
            "activeClassName": {
              "description": "Additional className for nav link active state",
              "type": "string"
            },
            "notifications": {
              "description": "The notification value of the Badge",
              "type": "number"
            },
            "component": {
              "description": "React element to render nav item",
              "type": "string"
            }
          }
        }
      },
      "FloorPlans": {
        "RouteMatch": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "path": {
              "description": "URL path of the route",
              "type": "string"
            },
            "exact": {
              "description": "When true, will only match if the path matches the location.pathname exactly",
              "type": "boolean"
            },
            "strict": {
              "description": "When true, a path that has a trailing slash will only match a location.pathname with a trailing slash.",
              "type": "boolean"
            },
            "sensitive": {
              "description": "Match from case sensitive",
              "type": "boolean"
            }
          }
        },
        "ContextSwitcherPropTypes": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "defaultLabel": {
              "description": "Default button label when no context is active",
              "$ref": "#/definitions/datatypes/intlShape"
            },
            "values": {
              "description": "Array of values for the contexts",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "path": {
                    "description": "The context path",
                    "type": "string"
                  },
                  "title": {
                    "description": "Context title",
                    "$ref": "#/definitions/datatypes/intlShape"
                  },
                  "exact": {
                    "description": "When true, will only match if the path matches the location.pathname exactly\n(unless match regular expression matches)",
                    "type": "boolean"
                  },
                  "match": {
                    "description": "The context will be considered active if the path matches this regular\nexpression, even if the path does not match the active route",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "values"
          ]
        }
      }
    }
  },
  "patternProperties": {
    "^\\$schema$": {
      "type": "string"
    },
    "^jutro$": {
      "type": "string"
    },
    "^routes$": {
      "$ref": "#/definitions/metadata/routes"
    },
    "^(?!jutro$)(?!routes$)[^$]+": {
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "action"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/action"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "container"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/container"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "element"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/element"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "field"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/field"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "page"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/page"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "iterable"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/iterable"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "wizard"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/wizard"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "wizardpage"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/wizardpage"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "floorplan"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/metadata/floorplan"
          }
        }
      ],
      "defaultSnippets": [
        {
          "label": "page",
          "body": {
            "id": "$1",
            "type": "page",
            "content": []
          }
        }
      ]
    }
  },
  "required": [
    "jutro"
  ],
  "type": "object",
  "additionalProperties": false
}