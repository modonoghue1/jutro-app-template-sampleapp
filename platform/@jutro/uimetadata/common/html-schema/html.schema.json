{
  "definitions": {
    "AccordionCard": {
      "description": "The `AccordionCard` component offers Card-like behavior inside an `Accordion`. It accepts most of the same properties as Card (except 'isOpen' and 'onToggleOpen' which is managed by the containing Accordion).",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Used to identify header.",
          "type": "string",
          "required": true
        },
        "chevron": {
          "description": "Show chevron in header",
          "type": "boolean"
        },
        "chevronAlignment": {
          "description": "Position of chevron",
          "type": "string",
          "enum": ["left", "right"]
        },
        "className": {
          "description": "Additional styles for whole card",
          "type": "string"
        },
        "collapseClassName": {
          "description": "Additional styles for Collapse",
          "type": "string"
        },
        "cardBodyClassName": {
          "description": "Additional styles for card body inside Collapse",
          "type": "string"
        },
        "cardHeadingClassName": {
          "description": "Additional styles for card header",
          "type": "string"
        },
        "errorState": {
          "description": "Indicates if there is an error within the card contents",
          "type": "boolean"
        },
        "title": {
          "description": "property to render title for header",
          "type": "intlMessageShape"
        },
        "renderHeader": {
          "description": "Callback to render header to be displayed in the Accordion",
          "type": "string"
        },
        "isCollapsible": {
          "description": "Indicates if the card should be collapsible",
          "type": "boolean"
        }
      }
    },
    "Accordion": {
      "description": "The `Accordion` component is used to surround a set of `Card` components so that the user can open or close them.",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Used to identify accordion",
          "type": "string"
        },
        "accordionStates": {
          "description": "An array containing the expanded accordion ids",
          "type": "array"
        },
        "boldFont": {
          "description": "Changes the font weight of the accordion header, set to `true` by default (bold)",
          "type": "boolean"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "closeOthers": {
          "description": "Optional flag indicating whether other accordions should be collapsed when this one is expanded",
          "type": "boolean"
        },
        "defaultOpenedId": {
          "description": "The optional id of the accordion to be opened by default",
          "type": "string"
        },
        "disabled": {
          "description": "Property to make accordion disabled",
          "type": "boolean"
        },
        "showFrame": {
          "description": "Shows the accordion borders when true, set to `true` by default",
          "type": "boolean"
        },
        "onUpdateAccordionStates": {
          "description": "A callback function for querying the list of expanded accordions",
          "type": "string"
        }
      }
    },
    "AddressDisplay": {
      "description": "Displays an address from a data object in read-only mode.",
      "metadataType": "element",
      "props": {
        "address": {
          "description": "The address to display",
          "type": "object",
          "required": true
        },
        "fields": {
          "description": "The array of address fields to display, for example ['addressLine1', 'addressLine2',. 'addressLine3', 'city', 'state', 'postalCode']",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        }
      }
    },
    "Avatar": {
      "description": "Displays a \"user avatar\" element with an image, icon, or initials.",
      "metadataType": "action",
      "props": {
        "username": {
          "description": "Users first and last names, used as component alt text as well. as to display initials if no image selected",
          "type": "string"
        },
        "icon": {
          "description": "Icon name from the material icons list to be displayed if no image or initials present",
          "type": "string"
        },
        "onClick": {
          "description": "On click event handler",
          "type": "string"
        },
        "className": {
          "description": "Additional component styling class name",
          "type": "string"
        },
        "imageSource": {
          "description": "Path to user image, preferentially shown before user initials or icon",
          "type": "string"
        },
        "useAuthInfo": {
          "description": "If true, display user information based on Okta instead of passed props",
          "type": "boolean"
        },
        "showImageBorder": {
          "description": "If true, border will be display",
          "type": "boolean"
        }
      }
    },
    "Badge": {
      "description": "Displays a \"badge\" element with child components, such as text or images.",
      "metadataType": "element",
      "props": {
        "value": {
          "description": "The value of the Badge",
          "type": "number",
          "required": true
        },
        "maxValue": {
          "description": "The maximum value for the badge. if value prop is greater then maxValue, then Badge will display 'maxValue+'",
          "type": "number"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "id": {
          "description": "Component unique identifier",
          "type": "string",
          "required": true
        },
        "type": {
          "description": "Phrase allowing to set custom flavor (success, general, neutral, etc.)",
          "type": "string",
          "enum": [
            "success",
            "error",
            "warning",
            "info",
            "neutral",
            "notification",
            "primary",
            "inverse"
          ]
        },
        "liveRegionContext": {
          "description": "Used to describe the live region for assistive technologies (E.g. Unread Emails)",
          "type": "string"
        }
      }
    },
    "Breadcrumb": {
      "description": "Displays a \"breadcrumb\" of links to previous pages with anchor tags or Link components",
      "metadataType": "action",
      "props": {
        "className": {
          "description": "Additional class to wrap the component.",
          "type": "string"
        },
        "links": {
          "description": "Takes an array of objects, each item having props for the used Link type component.",
          "type": "array",
          "items": {
            "type": "shapeObject"
          }
        },
        "theme": {
          "description": "Theme config to apply.",
          "type": "object"
        },
        "renderLinkTrigger": {
          "description": "RenderProp function to generate the component that makes up the breadcrumb.",
          "type": "string"
        },
        "lastItemClickable": {
          "description": "Determines if the last item is a link.",
          "type": "boolean"
        },
        "backLinkWithoutText": {
          "description": "Determines if the backLink include \"Back\" text or just \"arrow\" icon.",
          "type": "boolean"
        }
      }
    },
    "Button": {
      "description": "",
      "metadataType": "action",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "iconClassName": {
          "description": "CSS class name for icon",
          "type": "string"
        },
        "disabled": {
          "description": "If `true`, this button is disabled",
          "type": "boolean"
        },
        "fullWidth": {
          "description": "If `true`, the button expands to the available width",
          "type": "boolean"
        },
        "icon": {
          "description": "Optional icon name",
          "type": "string"
        },
        "iconPosition": {
          "description": "Where the icon is placed relative to the text",
          "type": "string",
          "enum": ["left", "right"]
        },
        "onClick": {
          "description": "Callback when button is clicked",
          "type": "string"
        },
        "renderContent": {
          "description": "Callback when want to wrap button content",
          "type": "string"
        },
        "size": {
          "description": "Allows you to select the smaller or larger variant",
          "type": "string",
          "enum": ["small", "medium"]
        },
        "type": {
          "description": "Determines the display variety (filled, outlined, text)",
          "type": "string",
          "enum": ["filled", "outlined", "text"]
        },
        "href": {
          "description": "if this prop is used an `<a>` tag will be used instead of `<button>`.  this will be the href passed to the `<a>` tag used.",
          "type": "intlMessageShape"
        },
        "actionType": {
          "description": "Type of action button performs",
          "type": "string",
          "enum": ["button", "submit", "reset"]
        }
      }
    },
    "Card": {
      "description": "Renders a card with a header and a body.",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "A unique ID of this card",
          "type": "string",
          "required": true
        },
        "title": {
          "description": "The header title to be displayed in the Card",
          "type": "intlMessageShape"
        },
        "subTitle": {
          "description": "Subtitle of Card",
          "type": "intlMessageShape"
        },
        "renderHeader": {
          "description": "Callback to render header to be displayed in the Card",
          "type": "string"
        },
        "headerClass": {
          "description": "Additional CSS class name for header",
          "type": "string"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "tooltip": {
          "description": "Card header tooltip",
          "type": "tooltipShape"
        },
        "isPanel": {
          "description": "Support for legacy styling, to look like Panel",
          "type": "boolean"
        }
      }
    },
    "Checkbox": {
      "description": "Displays a label, clickable box, and message.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Boolean or string value",
          "type": ["string", "boolean"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["string", "boolean"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "showInlineLabel": {
          "description": "If true, displays label inline",
          "type": "boolean"
        },
        "detailElement": {
          "description": "Node to render when checkbox is selected, as processed by `renderContentFromMetadata` method (metadata 3.0)",
          "type": "object"
        }
      }
    },
    "CheckboxGroup": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "List of the selected checkboxes codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "The format of the items in the value array",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "Array of available checkboxes",
          "type": "availableValueShape"
        },
        "isHorizontal": {
          "description": "If true component will be horizontally oriented",
          "type": "boolean"
        }
      }
    },
    "Chevron": {
      "description": "The `Chevron` component is used to render the Chevron icon for an `Accordion` or `Card`. This component is built with optional props: `className`, `chevronIcon` and `isOpen`. The optional `className` prop is used to provide any custom styling to the chevron. The optional `chevronIcon` prop will alter the chevron styling using a well-known, pre-defined variant of the icon. The optional `isOpen` prop, when `true`, will alter the style of the chevron icon to indicate the chevron is opened. Properties: {@link ChevronProps}",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "chevronIcon": {
          "description": "The optional icon of this chevron",
          "type": "string"
        },
        "isOpen": {
          "description": "Optional flag indicating whether this chevron is open",
          "type": ["boolean", "object"]
        }
      }
    },
    "ClickableCard": {
      "description": "ClickableCard",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "A unique ID of this component",
          "type": "string"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "onClick": {
          "description": "Card's click handler",
          "type": "string"
        },
        "disabled": {
          "description": "If true, Card component is disabled",
          "type": "boolean"
        }
      }
    },
    "ColorPicker": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {},
        "required": {},
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {},
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "sets the values for the color selector and input field.",
          "type": "string"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "placement": {
          "description": "default position for the color selector to render if there is insufficient space above and below input field.",
          "type": "string"
        },
        "openTyping": {
          "description": "allows user to type into input field if active.",
          "type": "boolean"
        },
        "colorPreviewSize": {
          "description": "size of the color preview span. 'small' or 'medium' as default",
          "type": "string"
        },
        "isInitiallyOpen": {
          "description": "Should dropdown be initially opened",
          "type": "boolean"
        }
      }
    },
    "ColorSwatch": {
      "description": "ColorSwatch",
      "metadataType": "action",
      "props": {
        "title": {
          "description": "Title of the color",
          "type": "intlMessageShape",
          "required": true
        },
        "colorProperties": {
          "description": "Color properties containing either color and hex color for solid colors or starting and finishing colors and hexColors of a gradient",
          "type": ["solidColorPropTypes", "gradientColorPropTypes"],
          "required": true
        },
        "type": {
          "description": "Type of the color. Either gradient or solid",
          "type": "string",
          "enum": ["gradient", "solid"]
        },
        "onClick": {
          "description": "Custom onClick handler",
          "type": "string"
        }
      }
    },
    "Currency": {
      "description": "Use it to enter or display a monetary value. The amount is displayed based on the locale. If you want to use it to display the localized value as text, and not an input, set `readOnly` to `true`. The component can handle dataTypes of `object` or `number` which is set by dataType prop.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in the Currency field",
          "type": ["number", "string", "shapeObject"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["number", "string", "shapeObject"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Sets the datatype type of the value prop. When set to 'string' accepts. strings containing currency symbol i.e. '123.23 usd'",
          "type": "string",
          "enum": ["object", "string", "number"]
        },
        "defaultCurrency": {
          "description": "Default currency",
          "type": "string"
        },
        "currencyDisplay": {
          "description": "How to display the currency in currency formatting, 'code', 'symbol' or 'name'",
          "type": "string",
          "enum": ["code", "name", "symbol"]
        },
        "showFractions": {
          "description": "If true, displays the fraction part of the amount",
          "type": "boolean"
        }
      }
    },
    "CurrencyValue": {
      "description": "Renders a formatted currency using the `tag` property to wrap the value.",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "Used to identify the component",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "path": {
          "description": "Hint path to value",
          "type": "string"
        },
        "tag": {
          "description": "The html tag to use when rendering the outermost element of this component",
          "type": "string"
        },
        "prefix": {
          "description": "Optional prefix message to be attached in front of the value",
          "type": "intlMessageShape"
        },
        "suffix": {
          "description": "Optional suffix message to be attached at the end the value",
          "type": "intlMessageShape"
        },
        "_rest": {
          "description": "Do not set this field directly - this is a placeholder for the rest od properties, same as you can pass to FormattedNumber component"
        }
      }
    },
    "Date": {
      "description": "Allows the user to either type or select a date. Displays them according to locale settings. Valid format for manual input is ISO YYYY-MM-DD or MM/DD/YYYY. The time part (for the date and time field) should be appended to the date and follow ISO standard. For example: 2020-05-03T:10:30. Note that time values are assumed to be in client time zone. Unless time zone is explicitly provided through manual input (as per ISO format). Date only input treats dates as UTC dates.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Date to display",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Format of the value",
          "type": "string",
          "enum": ["object", "string", "date-time"]
        },
        "todayButtonText": {
          "description": "Display today button",
          "type": "intlMessageShape"
        },
        "maxDate": {
          "description": "Max date",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "minDate": {
          "description": "Min date",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "isClearable": {
          "description": "If true, field can be cleaned",
          "type": "boolean"
        },
        "autoComplete": {
          "description": "",
          "type": "boolean"
        },
        "popperPlacement": {
          "description": "Popper placement option",
          "type": "string",
          "enum": [
            "auto",
            "auto-end",
            "bottom",
            "bottom-end",
            "bottom-start",
            "left",
            "left-end",
            "left-start",
            "right",
            "right-end",
            "right-start",
            "top",
            "top-end",
            "top-start"
          ]
        },
        "format": {
          "description": "The readonly date format: 'short', 'long', 'abbreviated' or 'full'",
          "type": "string",
          "enum": ["vshort", "short", "long", "abbreviated", "full"]
        },
        "showTime": {
          "description": "Include a time selection element in the date picker",
          "type": "boolean"
        },
        "theme": {
          "description": "Theme config to apply",
          "type": "shapeObject"
        },
        "isInitiallyOpen": {
          "description": "Should dropdown be initially opened",
          "type": "boolean"
        },
        "showCalendar": {
          "description": "Should display the calendar pop-over",
          "type": "boolean"
        },
        "name": {
          "description": "This name will be passed to input name attribute and switched on autocomplete",
          "type": "string"
        },
        "icon": {},
        "iconPosition": {}
      }
    },
    "DateRange": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Date range value to display if used as controlled component",
          "type": "dateRangeValueShape"
        },
        "defaultValue": {
          "description": "Default date range value",
          "type": "dateRangeValueShape"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "startPath": {
          "description": "Path in model to start date",
          "type": "string"
        },
        "endPath": {
          "description": "Path in model to end date",
          "type": "string"
        },
        "startDataPath": {
          "description": "Start date dataPath",
          "type": "string"
        },
        "endDataPath": {
          "description": "End date dataPath",
          "type": "string"
        },
        "startPathValueProp": {
          "description": "Name of prop in value object for startPath",
          "type": "string"
        },
        "endPathValueProp": {
          "description": "Name of prop in value object for endPath",
          "type": "string"
        },
        "endLabel": {
          "description": "Intl message for end date label",
          "type": "intlMessageShape"
        },
        "endSecondaryLabel": {
          "description": "Intl message for end date label (by default same as secondaryLabel prop)",
          "type": "intlMessageShape"
        },
        "endTooltip": {
          "description": "Tooltip for end date (by default same as tooltip prop for start date)",
          "type": ["string", "nestedTooltipShape"]
        },
        "endPlaceholder": {
          "description": "Intl message for end date placeholder (by default same as placeholder prop)",
          "type": "intlMessageShape"
        },
        "endContentContainerClassName": {
          "description": "class for end content container (by default takes value from contentContainerClassName prop if specified)",
          "type": "string"
        },
        "endControlClassName": {
          "description": "class for end date control input (by default takes value from controlClassName prop if specified)",
          "type": "string"
        },
        "endLabelContainerClassName": {
          "description": "class for end label container (by default takes value from labelContainerClassName prop if specified)",
          "type": "string"
        },
        "endLabelClassName": {
          "description": "class for end date label (by default takes value from labelClassName prop if specified)",
          "type": "string"
        },
        "highlightRange": {
          "description": "if true, selected range will be highlighted",
          "type": "boolean"
        }
      }
    },
    "DateTime": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Date and time to display",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Returned data type",
          "type": "string",
          "enum": ["object", "string", "date-time"]
        },
        "showTime": {
          "description": "Show timepicker",
          "type": "boolean"
        },
        "onBlurTime": {
          "description": "Callback when blur event is fired in time picker",
          "type": "string"
        },
        "onFocusTime": {
          "description": "Callback when focus event is fired in time picker",
          "type": "string"
        },
        "requiredTime": {
          "description": "If true, time picker is required",
          "type": "boolean"
        },
        "showErrorsTime": {
          "description": "Show errors for time picker",
          "type": "boolean"
        },
        "showRequiredTime": {
          "description": "Show required indicator for time picker",
          "type": "boolean"
        },
        "showOptionalTime": {
          "description": "Show optional indicator for time picker",
          "type": "boolean"
        },
        "labelTime": {
          "description": "Intl message for time picker label",
          "type": "intlMessageShape"
        },
        "secondaryLabelTime": {
          "description": "Intl message for time picker label",
          "type": "intlMessageShape"
        },
        "hideLabelTime": {
          "description": "Hides the label on any layout for time picker",
          "type": "boolean"
        },
        "tooltipTime": {
          "description": "Tooltip for time picker",
          "type": ["string", "nestedTooltipShape"]
        },
        "placeholderTime": {
          "description": "Intl message for time picker placeholder",
          "type": "intlMessageShape"
        },
        "preserveTimeZone": {
          "description": "If true, component will not convert selected date to UTC",
          "type": "boolean"
        }
      }
    },
    "DateTimeZone": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display",
          "type": "dateTimeZoneValueShape"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work",
          "type": "dateTimeZoneValueShape"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "showTimeZone": {
          "description": "Show timezone picker",
          "type": "boolean"
        },
        "labelTimeZone": {
          "description": "Intl message for time zone field label",
          "type": "intlMessageShape"
        },
        "secondaryLabelTimeZone": {
          "description": "Intl message for time zone field secondary label (same as secondaryLabel prop by default)",
          "type": "intlMessageShape"
        },
        "tooltipTimeZone": {
          "description": "Tooltip for time zone field (same as tooltip prop by default)",
          "type": ["string", "nestedTooltipShape"]
        },
        "hideLabelTimeZone": {
          "description": "Hide time zone label (same as hideLabel by default)",
          "type": "boolean"
        },
        "timeZones": {
          "description": "Time zones to show in the dropdown",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTimeZone": {
          "description": "Default time zone to be used (local by default)",
          "type": "string"
        },
        "showTime": {}
      }
    },
    "DropdownSelect": {
      "description": "Renders a dropdown where the user can select one of the values. You specify the allowed values and the action using props.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {},
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Selected item value",
          "type": "valuePropType"
        },
        "defaultValue": {
          "description": "Default value to set if there is no value present.",
          "type": "valuePropType"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "The format of the value",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "Array of choice objects to display; choice objects contains 'code' and 'name'",
          "type": "availableValueShape"
        },
        "internalClassNames": {
          "description": "Map of CSS class names for overriding individual parts of component's styles",
          "type": "shapeObject"
        },
        "alwaysShowPlaceholder": {
          "description": "When set to `true` options will show the placeholder text and it will be the first option.",
          "type": "boolean"
        },
        "searchable": {
          "description": "Allows you to type in dropdown field to find options.",
          "type": "boolean"
        },
        "isInitiallyOpen": {
          "description": "Should dropdown be initially opened",
          "type": "boolean"
        },
        "usePortal": {
          "description": "Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent",
          "type": "boolean"
        }
      }
    },
    "ErrorBoundary": {
      "description": "Introduces a customizable error boundary capable of reporting errors to Jutro events and rendering acceptable UIs in production",
      "metadataType": "container",
      "props": {
        "onError": {
          "description": "An optional action to be triggered when errors occur",
          "type": "string"
        },
        "fallbackComponent": {
          "description": "An optional custom component to replace the error UI while keeping the error reporting",
          "type": "string"
        }
      }
    },
    "FieldIcon": {
      "description": "FieldIcon component definition",
      "metadataType": "element",
      "props": {
        "icon": {
          "description": "MI icon definition",
          "type": "string"
        },
        "iconPosition": {
          "description": "Phrase which indicates where the icon should be placed relative to the text",
          "type": "string",
          "enum": ["left", "right"]
        },
        "disabled": {
          "description": "Indicates where the icon should have disabled class",
          "type": "boolean"
        },
        "className": {
          "description": "Custom classname",
          "type": "string"
        }
      }
    },
    "FieldValue": {
      "description": "Renders a formatted value using the `tag` and `datatype` property to wrap the value.",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "Used to identify the component",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "datatype": {
          "description": "Hint for value's datatype",
          "type": "string"
        },
        "path": {
          "description": "Hint path to value",
          "type": "string"
        },
        "placeholder": {
          "description": "The string to display if 'value' is undefined/null",
          "type": "intlMessageShape"
        },
        "value": {
          "description": "The value to display",
          "type": ["string", "number", "object", "boolean"]
        },
        "prefix": {
          "description": "Optional prefix message to be attached in front of the value",
          "type": "intlMessageShape"
        },
        "suffix": {
          "description": "Optional suffix message to be attached at the end the value",
          "type": "intlMessageShape"
        },
        "tag": {
          "description": "The html tag to use when rendering the outermost element of this component",
          "type": "string"
        }
      }
    },
    "FileUpload": {
      "description": "Renders a control which allows the user to upload a file. Allows you to specify validation and actions for specific events.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {},
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in control"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {},
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "accept": {
          "description": "File type filter. (eg. '.md,.pdf' or 'audio/*')",
          "type": "string"
        },
        "type": {
          "description": "File upload field type (eg. 'thin', etc.)",
          "type": "string",
          "enum": ["thin", "large"]
        },
        "imageSource": {
          "description": "Path to empty dropdown area image",
          "type": "string"
        },
        "maxLength": {
          "description": "Max length for the input field",
          "type": "number"
        },
        "maxFileSizeKB": {
          "description": "Max file size in KB for the input field",
          "type": "number"
        },
        "onUpload": {
          "description": "Callback when valid file is selected",
          "type": "string"
        },
        "buttonType": {
          "description": "'type' prop for the rendered button",
          "type": "string",
          "enum": ["filled", "outlined", "text"]
        },
        "buttonSize": {
          "description": "'size' prop for the rendered button",
          "type": "string",
          "enum": ["small", "medium"]
        },
        "buttonIcon": {
          "description": "'icon' prop for the rendered button",
          "type": "string"
        },
        "disableDragAndDrop": {
          "description": "Determines if the drag and drop functionality of the component should be disabled",
          "type": "boolean"
        },
        "total": {
          "description": "Total size in bytes of selected file to upload",
          "type": "number"
        },
        "completed": {
          "description": "Current bytes uploaded",
          "type": "number"
        },
        "onCancel": {
          "description": "Action triggered when user clicks cancel button during uploading",
          "type": "string"
        },
        "onFileClear": {
          "description": "Action triggered when user clears selected file",
          "type": "string"
        },
        "uploadState": {
          "description": "Current state of upload",
          "type": "string",
          "enum": ["selection", "progress", "completed", "cancelled", "failed"]
        },
        "progressErrorMessage": {
          "description": "User defined error message on failed upload",
          "type": "intlMessageShape"
        }
      }
    },
    "FooterCopyright": {
      "description": "The `FooterCopyright` component is designed as a simple component presenting copyright inside the `Footer` container.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        }
      }
    },
    "FooterNavBar": {
      "description": "The `FooterNavBar` component is designed as a container for navigation links inside the `Footer` container. It should be used along with `FooterNavLink` as children.",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        }
      }
    },
    "FooterNavLink": {
      "description": "The `FooterNavLink` component is designed as a simple component for presenting a navigation link inside the `FooterNavBar` container.",
      "metadataType": "action",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "header": {
          "description": "Link header.",
          "type": "intlMessageShape",
          "required": true
        },
        "url": {
          "description": "External link.",
          "type": "intlMessageShape"
        }
      }
    },
    "FooterText": {
      "description": "The `FooterText` component is designed as a simple component presenting text inside the `Footer` container.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "text": {
          "description": "Text to render",
          "type": "intlMessageShape"
        }
      }
    },
    "Footer": {
      "description": "The `Footer` component is designed as the container for a set of components that should be displayed on the footer of application using `Jutro`. Dedicated components that should be used as children are `FooterNavBar` along with `FooterNavLink`s, `FooterText` and `FooterCopyright`.",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "fluid": {
          "description": "Span the entire width.",
          "type": "boolean"
        }
      }
    },
    "FormattedCurrency": {
      "description": "The `FormattedCurrency` component is used to render a formatted currency value.",
      "metadataType": "element",
      "props": {
        "amount": {
          "description": "The numeric value to display",
          "type": ["number", "string"]
        },
        "currency": {
          "description": "The currency name to display for localization",
          "type": "string"
        },
        "currencyDisplay": {
          "description": "How to display the currency in currency formatting, 'code', 'symbol' or 'name'",
          "type": "string",
          "enum": ["code", "symbol", "name"]
        },
        "showFractions": {
          "description": "If true, displays fractions with the amount",
          "type": "boolean"
        },
        "showGrouping": {
          "description": "If true, displays grouping separators with the value",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in the format of string|number|object",
          "type": ["number", "string", "shapeObject"]
        },
        "placeholder": {
          "description": "The string to display in the UI if 'amount' is undefined/null",
          "type": "intlMessageShape"
        }
      }
    },
    "FormattedDateRange": {
      "description": "The `FormattedDateRange` component is used to render `Date` values localized and in specific preset formats",
      "metadataType": "element",
      "props": {
        "startDate": {
          "description": "The start date to display",
          "type": "object"
        },
        "endDate": {
          "description": "The end date to display",
          "type": "object"
        },
        "startValue": {
          "description": "Start value to display in the format of string|number|object",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "endValue": {
          "description": "End value to display in the format of string|number|object",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "placeholder": {
          "description": "The string to display if start or end 'date' is undefined/null",
          "type": "intlMessageShape"
        },
        "format": {
          "description": "The date format: 'short' or 'long'",
          "type": "dateFormatShape"
        },
        "separator": {
          "description": "The range separator (between start and end date)",
          "type": "string"
        },
        "showTime": {
          "description": "If true, displays the time with the date",
          "type": "boolean"
        }
      }
    },
    "FormattedDate": {
      "description": "The `FormattedDate` component is used to render `Date` values localized and in specific preset formats, e.g. short or long.",
      "metadataType": "element",
      "props": {
        "date": {
          "description": "The date to display",
          "type": "object"
        },
        "value": {
          "description": "Value to display in the format of string|number|object",
          "type": ["number", "string", "object", "shapeObject"]
        },
        "placeholder": {
          "description": "The string to display if 'date' is undefined/null",
          "type": "intlMessageShape"
        },
        "format": {
          "description": "The date format: 'vshort', 'short', 'long', 'abbreviated', 'full'",
          "type": "dateFormatShape"
        },
        "showTime": {
          "description": "If true, displays the time with the date",
          "type": "boolean"
        },
        "onlyTime": {
          "description": "If true, displays only time",
          "type": "boolean"
        }
      }
    },
    "FormattedNumber": {
      "description": "The `FormattedNumber` component is used to render number value localized.",
      "metadataType": "element",
      "props": {
        "placeholder": {
          "description": "The string to display in the UI if 'value' is undefined/null",
          "type": "intlMessageShape"
        },
        "format": {
          "description": "How to display the number in this format, 'decimal' or 'percentage'",
          "type": "string",
          "enum": ["decimal", "percent"]
        },
        "showFractions": {
          "description": "If true, displays fractions with the value",
          "type": "boolean"
        },
        "maximumFractionDigits": {
          "description": "Number of fraction digits",
          "type": "number"
        },
        "showGrouping": {
          "description": "If true, displays grouping separators with the value",
          "type": "boolean"
        },
        "value": {
          "description": "The numeric value to display",
          "type": "number"
        }
      }
    },
    "FormattedPhoneNumber": {
      "description": "The `FormattedPhoneNumber` component is used to render international phone number value.",
      "metadataType": "element",
      "props": {
        "value": {
          "description": "Value to display",
          "type": ["string", "shapeObject"]
        },
        "showCountryCodeForReadOnly": {
          "description": "Set country code visibility if rendered in readOnly mode.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Type of returned value",
          "type": "phoneDataTypeShape"
        },
        "defaultCountry": {
          "description": "Default country code to be rendered. Must be in iso2 country code string.",
          "type": "string"
        }
      }
    },
    "GlobalizationChooser": {
      "description": "Component that allows the user to select the preferred application language and locale.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "containerStyle": {
          "description": "Additional class names for component container.",
          "type": "string"
        },
        "innerStyle": {
          "description": "Additional class names for component inner container. Used only in Storybook mode.",
          "type": "string"
        },
        "localeId": {
          "description": "Id of the locale select element.",
          "type": "string"
        },
        "languageId": {
          "description": "Id of the language select element.",
          "type": "string"
        },
        "localeValue": {
          "description": "Selected locale.",
          "type": "string"
        },
        "languageValue": {
          "description": "Selected language.",
          "type": "string"
        },
        "languageLabelText": {
          "description": "Message key for the language label.",
          "type": "intlMessageShape"
        },
        "localeLabelText": {
          "description": "Message key for the locale label.",
          "type": "intlMessageShape"
        },
        "availableLanguageValues": {
          "description": "Languages available for selection.",
          "type": "array"
        },
        "availableLocaleValues": {
          "description": "Locales available for selection.",
          "type": "array"
        },
        "onLocaleValueChange": {
          "description": "Callback invoked on locale change.",
          "type": "string"
        },
        "onLanguageValueChange": {
          "description": "Callback invoked on language change.",
          "type": "string"
        },
        "renderLocaleLabel": {
          "description": "Render prop to display locale in options.",
          "type": "string"
        },
        "renderLanguageLabel": {
          "description": "Render prop to display language in options.",
          "type": "string"
        },
        "showLocaleLabel": {
          "description": "Flag for showing or hiding locale label",
          "type": "boolean"
        },
        "showLanguageLabel": {
          "description": "Flag for showing or hiding language label",
          "type": "boolean"
        },
        "showLocaleSelect": {
          "description": "Flag for showing/hiding the locale select",
          "type": "boolean"
        },
        "showLanguageSelect": {
          "description": "Flag for showing/hiding the language select",
          "type": "boolean"
        },
        "style": {
          "description": "Object containing the style overrides for component. Used only in Storybook mode.",
          "type": "object"
        },
        "storybookMode": {
          "description": "",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If set to true the dropdowns are readonly. Ignored in the storybook mode.",
          "type": "boolean"
        },
        "skipPropagation": {
          "description": "If set to true the config is not updated on value change and GlobalizationChooser becomes a controlled component.",
          "type": "boolean"
        }
      }
    },
    "HeaderActions": {
      "description": "HeaderActions",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Header": {
      "description": "Header",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "containerClassName": {
          "description": "Additional class name for children container.",
          "type": "string"
        },
        "sticky": {
          "description": "Sticky position of header.",
          "type": "boolean"
        },
        "fluid": {
          "description": "Span the entire width.",
          "type": "boolean"
        }
      }
    },
    "HelpHeading": {
      "description": "The `HelpHeading` component is designed as a simple component presenting heading inside the `HelpPopover` container.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "content": {
          "description": "Content to render",
          "type": ["object", "intlMessageShape"]
        }
      }
    },
    "HelpLink": {
      "description": "The `HelpLink` component is designed as a simple component presenting link inside the Help dropdown on Application Header.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "content": {
          "description": "Content of link",
          "type": ["object", "intlMessageShape"]
        },
        "onClick": {
          "description": "Click callback",
          "type": "string"
        },
        "href": {
          "description": "External location",
          "type": "intlMessageShape"
        }
      }
    },
    "HelpParagraph": {
      "description": "The `HelpParagraph` component is designed as a simple component presenting text inside the Help dropdown on Application Header.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "content": {
          "description": "Content to render",
          "type": ["object", "intlMessageShape"]
        }
      }
    },
    "IFrame": {
      "description": "IFrame",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "unique ID of iframe container",
          "type": "string",
          "required": true
        },
        "src": {
          "description": "src for iframe",
          "type": "string",
          "required": true
        },
        "title": {
          "description": "title for iframe",
          "type": "intlMessageShape",
          "required": true
        },
        "aspectRatio": {
          "description": "aspectRatio for iframe",
          "type": "string",
          "enum": ["4/3", "16/9", "17/9", "2/1"]
        },
        "height": {
          "description": "height for iframe container in pixel or percentage format",
          "type": "string"
        },
        "className": {
          "description": "className for iframe",
          "type": "string"
        },
        "onLoad": {
          "description": "function for onload event",
          "type": "string"
        },
        "showLoader": {
          "description": "show loader when iframe still loading",
          "type": "boolean"
        },
        "noBorder": {
          "description": "hide the iframe border",
          "type": "boolean"
        }
      }
    },
    "IconButton": {
      "description": "",
      "metadataType": "action",
      "props": {
        "id": {
          "description": "Used to identify this component.",
          "type": "string"
        },
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "iconClassName": {
          "description": "Additional class names for icon.",
          "type": "string"
        },
        "onClick": {
          "description": "On click handler",
          "type": "string"
        },
        "onMouseDown": {
          "description": "On mouse down handler",
          "type": "string"
        },
        "onKeyDown": {
          "description": "On key down handler",
          "type": "string"
        },
        "onKeyPress": {
          "description": "On key press handler",
          "type": "string"
        },
        "ariaLabel": {
          "description": "Aria label text",
          "type": "intlMessageShape"
        },
        "icon": {
          "description": "icon name",
          "type": "string",
          "required": true
        },
        "iconColor": {
          "description": "The color of the icon",
          "type": "string",
          "enum": ["light", "neutral", "dark"]
        },
        "disabled": {
          "description": "If `true`, this button is disabled",
          "type": "boolean"
        },
        "tooltip": {
          "description": "IconButton tooltip",
          "type": "tooltipShape"
        }
      }
    },
    "Icon": {
      "description": "",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "icon": {
          "description": "icon name to be used",
          "type": "string",
          "required": true
        },
        "size": {
          "description": "Determines the size of icon",
          "type": "string",
          "enum": ["small", "medium", "large"]
        },
        "color": {
          "description": "Determines the color (HEX code) of icon",
          "type": "string"
        },
        "isFixedWidth": {
          "description": "Flag for fixed width icons",
          "type": "boolean"
        },
        "tag": {
          "description": "Tag used to render icon",
          "type": "string"
        },
        "_rest": {
          "description": "Set of custom props, specific to a particular tag being used"
        }
      }
    },
    "ImageRadioButton": {
      "description": "Renders a list of radio buttons where each button is an image. You map images onto options as shown in the following example.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "The selected value",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "defaultValue": {
          "description": "Default value to set if none is provided",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "The format of the value",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "Array of choice objects to display; choice objects contains 'code', 'name' and 'imageAltText'",
          "type": "availableValueShape"
        },
        "imageBasePath": {
          "description": "Base path for image sources",
          "type": "string"
        },
        "imageFormat": {
          "description": "Optional file format to reference images for options",
          "type": "string"
        },
        "imageClassName": {
          "description": "An optional class for the div surrounding the images",
          "type": "string"
        },
        "otherOptionImage": {
          "description": "Optional name of custom image to be used for 'other' option",
          "type": "string"
        }
      }
    },
    "Image": {
      "description": "Image",
      "metadataType": "element",
      "props": {
        "src": {
          "description": "Specifies the URL of an Image",
          "type": "string",
          "required": true
        },
        "alt": {
          "description": "Specifies an alternate text for an Image",
          "type": "intlMessageShape"
        },
        "className": {
          "description": "Additional img styling class name",
          "type": "string"
        },
        "figcaption": {
          "description": "The caption for the figure",
          "type": "intlMessageShape"
        },
        "width": {
          "description": "Specifies the width of an Image",
          "type": "number"
        },
        "onError": {
          "description": "Script to be run when an error occurs when the Image is being loaded",
          "type": "string"
        },
        "onLoad": {
          "description": "Script to be run when Image is loaded succesfully",
          "type": "string"
        },
        "showLoader": {
          "description": "Show loader when Image still loading",
          "type": "boolean"
        }
      }
    },
    "InfoLabel": {
      "description": "Displays an \"InfoLabel\" element with child components, such as text or images.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "icon": {
          "description": "The short-name of the optional Material icons",
          "type": "string"
        },
        "iconPosition": {
          "description": "Where the icon is placed relative to the text",
          "type": "string",
          "enum": ["left", "right"]
        },
        "id": {
          "description": "Component unique identifier",
          "type": "string",
          "required": true
        },
        "message": {
          "description": "Label message that is either a string or an object representing internationalized message ({id: `key`, defaultMessage: `default text`}). will be shown when children is not provided",
          "type": "intlMessageShape"
        },
        "type": {
          "description": "Phrase allowing to set custom flavor (success, info, neutral, etc.)",
          "type": "string",
          "enum": ["success", "error", "warning", "info", "neutral"]
        }
      }
    },
    "InlineLoader": {
      "description": "InlineLoader",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "loading": {
          "description": "Controls whether the Inline Loader is shown;. For boolean values, if `true` is passed then the Inline Loader is shown;. For Promise value(s), the Inline Loader will be shown until the promise has completed.",
          "type": ["boolean", "array", "object"]
        },
        "loadingIcon": {
          "description": "icon name to be used when executing trigger/promise",
          "type": "string"
        },
        "loadingMessage": {
          "description": "The message shown when executing trigger/promise",
          "type": "intlMessageShape"
        },
        "successIcon": {
          "description": "icon name to be shown when execution trigger/promise is successfully resolved",
          "type": "string"
        },
        "successMessage": {
          "description": "The message shown when execution trigger/promise is succesfully done",
          "type": "intlMessageShape"
        }
      }
    },
    "InlineNotification": {
      "description": "Displays a message within the body of the page. You show it on event, and the user can dismiss it.",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "Component unique identifier",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "message": {
          "description": "Text to display on notification",
          "type": "intlMessageShape"
        },
        "type": {
          "description": "Phrase allowing to set color and appearance of notification (success, warning, error, info)",
          "type": "string",
          "enum": ["success", "info", "warning", "error"]
        },
        "onClosed": {
          "description": "Function called when the notification disappear",
          "type": "string"
        },
        "isDismissable": {
          "description": "If true, the dismiss button appears with this component",
          "type": "boolean"
        },
        "isEmbeddedNotification": {
          "description": "If true, attributes 'aria-hidden' and 'role' will be added",
          "type": "boolean"
        }
      }
    },
    "Input": {
      "description": "Renders an input element.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "String or number passed as value",
          "type": ["string", "number"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["string", "number"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "autoComplete": {
          "description": "",
          "type": "boolean"
        },
        "maxLength": {
          "description": "Max length for the input field",
          "type": "number"
        },
        "onEnter": {
          "description": "Callback to call on enter key press",
          "type": "string"
        },
        "editable": {
          "description": "If set to false the input field is read-only but user can tab to it, highlight it, and copy the text from it",
          "type": "boolean"
        },
        "name": {
          "description": "This name will be passed to input name attribute and switched on autocomplete, if prop is not set name attribute is set to id on default and autocomplete is off",
          "type": "string"
        },
        "pattern": {
          "description": "A pattern that must be followed for validation purposed. (This can only be used with @jutro/lab-preview-validation). Use some of the available presets or define your own regex pattern to test against.",
          "type": ["string", "string"]
        }
      }
    },
    "InputMask": {
      "description": "Renders an input field with a mask that you can control through props.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in control",
          "type": "string"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "mask": {
          "description": "The string that formats the mask to display, for example 999-999-9999. By default '9' indicates a number,. 'a' a letter and '*' a number or a letter. You can escape the special characters with a backslash.",
          "type": "string",
          "required": true
        },
        "maskChar": {
          "description": "The character used in the mask, for example `x` combined with `mask=99-99` displays `xx-xx`. If empty. the mask restrictions are still being enforced, but the mask is not visible.. NOTE: Mask char should not be the same as one of possible input characters because this can generate unintended incorrect values.",
          "type": "string"
        },
        "alwaysShowMask": {
          "description": "If true, the mask is always visible, if false the field will display the placeholder if not focused and empty.",
          "type": "boolean"
        },
        "formatChars": {
          "description": "A map of special mask formatting characters and the corresponding regular expressions the input must satisfy",
          "type": "object"
        },
        "onGetValidationMessages": {
          "description": "A callback invoked from getValidationMessges, should return an array of error messages.. NOTE: This prop is likely to be removed in the future and replaced by a more generic solution.",
          "type": "string"
        },
        "insertMode": {
          "description": "If set to true, the mask input will work in insert mode instead of overwrite mode.. If maskChar is empty, the input always works in insert mode",
          "type": "boolean"
        }
      }
    },
    "InputNumber": {
      "description": "Renders an input element for number fields.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Number passed as value",
          "type": ["string", "number"]
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Type of returned value in onValeChange callback",
          "type": "numberDataTypeShape"
        },
        "autoComplete": {
          "description": "",
          "type": "boolean"
        },
        "minValue": {
          "description": "Minimum value for the number",
          "type": ["string", "number"]
        },
        "maxValue": {
          "description": "Maximum value for the number",
          "type": ["string", "number"]
        },
        "decimalPlaces": {
          "description": "The number of decimal places to display in the value",
          "type": "number"
        },
        "step": {
          "description": "Step for increment/decrement like `0.05`",
          "type": ["string", "number"]
        },
        "name": {
          "description": "This name will be passed to input name attribute and switched on autocomplete",
          "type": "string"
        }
      }
    },
    "IntlElement": {
      "description": "IntlElement",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "A unique ID of this element",
          "type": "string",
          "required": true
        },
        "tag": {
          "description": "The html tag to use when rendering the translated message",
          "type": "string",
          "required": true
        }
      }
    },
    "IntlPhoneNumber": {
      "description": "IntlPhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render for entering and validating international telephone numbers.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Phone number value.. Passed as a string f.eg. \"+48600500400\" or phone shape f.eg.. {countryCode: { code: \"PL\" }, phoneNumber: \"600500400\"}. countryCode has to be iso2 country code lower or upper case.",
          "type": ["PhoneShape", "string"]
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Type of returned value in onValeChange callback",
          "type": "phoneDataTypeShape"
        },
        "defaultCountry": {
          "description": "Default country code to be rendered. Must be in iso2 country code string.",
          "type": "string"
        },
        "showCountryCodeForReadOnly": {
          "description": "Set country code visibility if rendered in readOnly mode.",
          "type": "boolean"
        },
        "noDropdown": {
          "description": "Hide the country dropdown, the country number is always displayed.",
          "type": "boolean"
        }
      }
    },
    "Link": {
      "description": "",
      "metadataType": "action",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "disabled": {
          "description": "If `true`, this link is disabled",
          "type": "boolean"
        },
        "icon": {
          "description": "Optional icon name",
          "type": "string"
        },
        "inline": {
          "description": "Indicates whether link located inside of paragraph",
          "type": "boolean"
        },
        "iconPosition": {
          "description": "Where the icon is placed relative to the text",
          "type": "string",
          "enum": ["left", "right"]
        },
        "onClick": {
          "description": "Callback when link is clicked",
          "type": "string"
        },
        "to": {
          "description": "The destination path when link is clicked.. Use this for paths internal to the application.",
          "type": "intlToShape"
        },
        "href": {
          "description": "The destination path when link is clicked.. Use this for paths external to the application.",
          "type": "intlMessageShape"
        },
        "target": {
          "description": "Where to display linked URL. Used only for external paths.",
          "type": "string"
        },
        "rel": {
          "description": "Relationship of the linked URL. Used only for external paths.",
          "type": "string"
        },
        "textClassName": {
          "description": "CSS class name for the link text",
          "type": "string"
        },
        "activeClassName": {
          "description": "CSS class name for element when it is active",
          "type": "string"
        },
        "exact": {
          "description": "When true, the activeClassName will only be applied if location is matched exactly",
          "type": "boolean"
        }
      }
    },
    "Loader": {
      "description": "Renders an animated component that you can show when loading some other content.",
      "metadataType": "element",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "loaded": {
          "description": "Controls whether the Loader UI is shown vs the `children`;.  For boolean values, if `false` is passed then the Loader UI is shown otherwise the `children` are; For.  Promise value(s), the Loader UI will be shown until the promise has completed then the `children` are.",
          "type": ["boolean", "array", "object"]
        },
        "text": {
          "description": "Optional message text to display when the Loader UI is shown",
          "type": ["object", "intlMessageShape"]
        },
        "renderLoader": {
          "description": "Callback to render loader",
          "type": "string"
        }
      }
    },
    "LogoTitle": {
      "description": "LogoTitle",
      "metadataType": "element",
      "props": {
        "src": {
          "description": "Src for logo image.",
          "type": "string"
        },
        "alt": {
          "description": "Alternative text for logo if image is not exists.",
          "type": "string"
        },
        "title": {
          "description": "Title as string, intl message or func.",
          "type": ["string", "intlMessageShape", "string"]
        },
        "renderTitle": {
          "description": "Title rendered by a callback",
          "type": "string"
        },
        "className": {
          "description": "Custom class names.",
          "type": "string"
        },
        "logoClassName": {
          "description": "Custom class name for the logo",
          "type": "string"
        },
        "titleClassName": {
          "description": "Custom class name for the title",
          "type": "string"
        }
      }
    },
    "Lookup": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in control",
          "type": "LookupOptionShape"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work",
          "type": "LookupOptionShape"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "availableValues": {
          "description": "Array of choice objects to display",
          "type": "availableValueShape"
        },
        "optionTypes": {
          "description": "Description for available option types",
          "type": "array",
          "items": {
            "type": "shapeObject"
          }
        },
        "createNewMessage": {
          "description": "The message to display when a new options is being created by the user.",
          "type": "intlMessageShape"
        },
        "isClearable": {
          "description": "If true ClearIndicator will be shown",
          "type": "boolean"
        },
        "onLoadValues": {
          "description": "Function for asynchronous data loading",
          "type": "string"
        },
        "onAddNew": {
          "description": "Callback when new items created",
          "type": "string"
        },
        "showRecentlyViewed": {
          "description": "If true then recently viewed bar will be shown",
          "type": "boolean"
        },
        "recentlyViewedMessage": {
          "description": "The message to display for recently viewed bar.",
          "type": "intlMessageShape"
        },
        "isInitiallyOpen": {
          "description": "Should dropdown be initially opened",
          "type": "boolean"
        },
        "internalClassNames": {
          "description": "Map of CSS class names for overriding individual parts of component's styles",
          "type": "object"
        }
      }
    },
    "MapArea": {
      "description": "Renders an map element. It allows the user to pick a place in the map. Allows you to display address on the map and choose the format of the address.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Address to display on the map",
          "type": ["shapeObject", "string"]
        },
        "defaultValue": {
          "description": "Default address to display on the map",
          "type": ["shapeObject", "string"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Format of the value",
          "type": "string",
          "enum": ["object", "string"]
        },
        "mapStyles": {
          "description": "Styles to apply to the map component",
          "type": "object"
        },
        "googleMapsApiKey": {
          "description": "The key required by the Google Maps API",
          "type": ["string", "string"]
        },
        "onGoogleMapsApiKey": {
          "description": "The key required by the Google Maps API",
          "type": ["string", "string"],
          "required": true
        },
        "orderOfAddress": {
          "description": "Defines the order of address items",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "description": "Title attribute which will be added to the Google Maps iframe for the accessibility",
          "type": "intlMessageShape"
        }
      }
    },
    "NotificationAction": {
      "description": "NotificationAction",
      "metadataType": "action",
      "props": {
        "id": {
          "description": "Used to identify this component.",
          "type": "string",
          "required": true
        },
        "title": {
          "description": "Notification popover title",
          "type": "intlMessageShape"
        },
        "headerLink": {
          "description": "Description for header link",
          "type": "shapeObject"
        },
        "footerLink": {
          "description": "Description for footer link",
          "type": "shapeObject"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "renderTrigger": {
          "description": "Function to render trigger element",
          "type": "string",
          "required": true
        },
        "align": {
          "description": "Popover alignment (relative to trigger element)",
          "type": "string"
        },
        "isFlipEnabled": {
          "description": "Should popover flip when it is about to overflow the visible area",
          "type": "boolean"
        },
        "onClosed": {
          "description": "Function called when the notification disappear",
          "type": "string"
        }
      }
    },
    "NumberValue": {
      "description": "Renders a formatted number using the `tag` property to wrap the value.",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "Used to identify the component",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "path": {
          "description": "Hint path to value",
          "type": "string"
        },
        "tag": {
          "description": "The html tag to use when rendering the outermost element of this component",
          "type": "string"
        },
        "prefix": {
          "description": "Optional prefix message to be attached in front of the value",
          "type": "intlMessageShape"
        },
        "suffix": {
          "description": "Optional suffix message to be attached at the end the value",
          "type": "intlMessageShape"
        },
        "_rest": {
          "description": "Do not set this field directly - this is a placeholder for the rest od properties, same as you can pass to FormattedNumber component"
        }
      }
    },
    "Panel": {
      "description": "A container for child components. You can set a title and subtitle through the props. This component is a typical wrapper for a form, but can have any content.",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Used to identify panel component.",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "Additional styles to be applied to Panel",
          "type": "string"
        },
        "alignment": {
          "description": "Alignment of the panel header",
          "type": "string",
          "enum": ["center", "left", "right"]
        },
        "title": {
          "description": "Title of Panel",
          "type": "intlMessageShape"
        },
        "subTitle": {
          "description": "Subtitle of Panel",
          "type": "intlMessageShape"
        },
        "renderHeader": {
          "description": "Function rendering panel header element instead of the default one",
          "type": "string"
        },
        "headerClass": {
          "description": "Additional styles to be applied to Panel header",
          "type": "string"
        },
        "fluid": {
          "description": "Content spans the entire width.",
          "type": "boolean"
        }
      }
    },
    "PhoneNumber": {
      "description": "PhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render a phone number mask on a HTML5 <input> element with type 'tel'.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in control",
          "type": "string"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "maskChar": {
          "description": "The character used in the mask, '_' is used by default.. NOTE: Mask char should not be the same as one of possible input characters because this can generate unintended incorrect values.",
          "type": "string"
        },
        "alwaysShowMask": {
          "description": "If true, the mask is always visible",
          "type": "boolean"
        },
        "countryCode": {
          "description": "A country code to automatically set the input mask. The codes are based on the two letter ISO 3166-1 codes.. Example codes: US, PL, GB, FR, IE",
          "type": "string"
        },
        "phoneNumberType": {
          "description": "A phone number type used when generating the countryCode based mask. Following are possible values:.  FIXED_LINE = 0,.  MOBILE = 1,.  FIXED_LINE_OR_MOBILE = 2,.  TOLL_FREE = 3,.  PREMIUM_RATE = 4,.  SHARED_COST = 5,.  VOIP = 6,.  PERSONAL_NUMBER = 7,.  PAGER = 8,.  UAN = 9,.  VOICEMAIL = 10,",
          "type": "number"
        },
        "withCountryPrefix": {
          "description": "If set to true, the mask will be prefixed with the country code. Works only. in combination with coutryCode",
          "type": "boolean"
        }
      }
    },
    "PhoneNumberValue": {
      "description": "Renders a formatted international phone number using the `tag` property to wrap the value.",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "Used to identify the component",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "path": {
          "description": "Hint path to value",
          "type": "string"
        },
        "tag": {
          "description": "The html tag to use when rendering the outermost element of this component",
          "type": "string"
        },
        "prefix": {
          "description": "Optional prefix message to be attached in front of the value",
          "type": "intlMessageShape"
        },
        "suffix": {
          "description": "Optional suffix message to be attached at the end the value",
          "type": "intlMessageShape"
        },
        "_rest": {
          "description": "Do not set this field directly - this is a placeholder for the rest od properties, same as you can pass to FormattedPhoneNumber component"
        }
      }
    },
    "RadioButtonCard": {
      "description": "Renders a list of radio button cards. You specify the options using component props.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "The selected value",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "defaultValue": {
          "description": "The default value to set if none is provided",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Cards layout",
          "type": "string",
          "enum": ["portrait", "landscape"]
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "The format of the value",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "Array of choice objects to display; choice objects contain 'code', 'name' and 'secondaryLabel'",
          "type": "availableValueShape"
        },
        "renderName": {
          "description": "Custom render method for name prop. Translated property value by default",
          "type": "string"
        },
        "renderSecondaryLabel": {
          "description": "Custom render method for secondary label prop. Translated property value by default",
          "type": "string"
        }
      }
    },
    "RadioButton": {
      "description": "Renders a list of radio buttons. You specify the items using component props.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Boolean or string value",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "The format of the value",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "Array of choice objects to display; choice objects contains 'code' and 'name'; if not provided, default 'Yes'/'No' will be used",
          "type": "availableValueShape"
        },
        "isHorizontal": {
          "description": "If true component will be horizontally oriented",
          "type": "boolean"
        }
      }
    },
    "Slider": {
      "description": "",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Current slider value (to create fully controlled component)",
          "type": "sliderValuePropType",
          "required": true
        },
        "defaultValue": {
          "description": "Initial slider value (to create uncontrolled component)",
          "type": "sliderValuePropType"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "min": {
          "description": "Minimum available slider value",
          "type": "number",
          "required": true
        },
        "max": {
          "description": "Maximum available slider value",
          "type": "number",
          "required": true
        },
        "showIndicators": {
          "description": "Prop to specify whether indicators should be shown or not",
          "type": "boolean"
        },
        "step": {
          "description": "Step between consecutive values",
          "type": "number"
        },
        "showNotches": {
          "description": "Prop to specify whether notches should be shown or not",
          "type": "boolean"
        },
        "range": {
          "description": "If set - range selector will be shown",
          "type": "boolean"
        },
        "minimumRange": {
          "description": "Prop to specify minimum range size in case of range selection",
          "type": "number"
        },
        "handleTooltip": {
          "description": "Prop to specify when handle tooltip should be visible. - ondrag - tooltip is visible only when user drags handle. - onfocus - tooltip is visible only when handle is focused. - onblur - tooltip is visible only when handle is blured. - always - tooltip is always visible",
          "type": "string",
          "enum": ["always", "ondrag", "onfocus", "onblur"]
        },
        "onUpdate": {
          "description": "Callback when value changing is completed (to create uncontrolled component)",
          "type": "string"
        }
      }
    },
    "Stepper": {
      "description": "Renders a numeric value and buttons to increase or decrease the value.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "String or number passed as value",
          "type": ["string", "number"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["string", "number"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "stepValue": {
          "description": "Step increment value for the input field",
          "type": "number"
        },
        "minValue": {
          "description": "Minimum value for the input field (note: this is different than aspect)",
          "type": "number"
        },
        "maxValue": {
          "description": "Maximum value for the input field (note: this is different than aspect)",
          "type": "number"
        }
      }
    },
    "StickyFooter": {
      "description": "StickyFooter",
      "metadataType": "container",
      "props": {
        "hiddenOnLoad": {
          "description": "Sticky version is displayed only after initial view of children",
          "type": "boolean"
        },
        "fullWidth": {
          "description": "If `fullWidth` is set then sticky version expands to full width of the screen using `position: fixed`,. otherwise it fills the width of its parent using `position: sticky`",
          "type": "boolean"
        },
        "className": {
          "description": "Additional class name for component.",
          "type": "string"
        },
        "stickyClassName": {
          "description": "Additional class name for component applied only on sticky version.",
          "type": "string"
        },
        "containerClassName": {
          "description": "Additional class name for children container component.",
          "type": "string"
        }
      }
    },
    "Switch": {
      "description": "Renders a \"switch\" with a label. Holds a value of `true` or `false`.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Boolean or string value",
          "type": ["string", "boolean"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["string", "boolean"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["right", "left", "top"]
        },
        "phone": {},
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "fullWidth": {
          "description": "If true splits the label and control as far apart as possible.",
          "type": "boolean"
        },
        "detailElement": {
          "description": "Children to render when checkbox is selected (metadata 3.0)",
          "type": "object"
        }
      }
    },
    "TabSet": {
      "description": "Renders a container for a set of `Tab` components. Extracts the `heading` prop from each of its `Tab` children and uses them to render the tab navigation bar.",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Component unique identifier",
          "type": "string",
          "required": true
        },
        "activeTab": {
          "description": "The 'tabId' of the active tab; used in conjunction with `onTabChange`",
          "type": "string"
        },
        "onTabChange": {
          "description": "Callback to call when a tab is changed; if provided, `activeTab` must also be provided",
          "type": "string"
        },
        "className": {
          "description": "Optional class name to apply to this component",
          "type": "string"
        },
        "showFrame": {
          "description": "If `true`, displays a frame surrounding `TabSet`",
          "type": "boolean"
        },
        "defaultActiveTab": {
          "description": "Which tab is active by default",
          "type": "string"
        },
        "label": {
          "description": "Optional label describing the purpose of the tablist",
          "type": "string"
        }
      }
    },
    "Tab": {
      "description": "The `Tab` component is designed to be used as the child of a `TabSet` component. It will render its `children` inside the appropriate tab pane <div> only if its `id` matches the `activeTabId` from the context provided by the `TabSet` AND the component is not `disabled`. Also, the `heading` prop will never be rendered internally by a `Tab` as this will be done by the `TabSet` container instead.",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "The id for this Tab",
          "type": "string",
          "required": true
        },
        "disabled": {
          "description": "If true, this `Tab` is disabled.",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this `Tab` is visible.",
          "type": "boolean"
        },
        "className": {
          "description": "Optional class name to apply to this component",
          "type": "string"
        },
        "heading": {
          "description": "The heading for the `Tab`. This prop is NOT rendered by the `Tab` component directly, but rather is extracted out by the `TabSet` component and rendered by it instead. Can either be a simple string or renderer function (which should accept rendering props object as an argument)",
          "type": ["object", "intlMessageShape"]
        }
      }
    },
    "Tag": {
      "description": "Tag",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "The id for this Tag",
          "type": "string"
        },
        "onClick": {
          "description": "Callback for icon button click, If not provided button isn't rendered",
          "type": "string"
        },
        "icon": {
          "description": "Icon name to render inside icon button",
          "type": "string"
        },
        "renderIcon": {
          "description": "Render prop for adding custom wrapper for icon button",
          "type": "string"
        },
        "label": {
          "description": "Displayed tag label",
          "type": "intlMessageShape"
        },
        "disabled": {
          "description": "Renders tag as disabled",
          "type": "boolean"
        },
        "className": {
          "description": "Custom class name for tag",
          "type": "string"
        },
        "labelClassName": {
          "description": "Custom class name for label",
          "type": "string"
        },
        "iconWrapperClassName": {
          "description": "Custom class name for icon wrapper",
          "type": "string"
        },
        "iconClassName": {
          "description": "Custom class name for icon",
          "type": "string"
        }
      }
    },
    "TextArea": {
      "description": "Renders a multi-line text area.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in control"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {},
        "rows": {
          "description": "The rows attribute specifies the visible height of a text area, in lines.",
          "type": "number"
        },
        "maxLength": {
          "description": "Restricts the max length of the text in the text area field",
          "type": "number"
        }
      }
    },
    "ThemeChooser": {
      "description": "Component that allows the user to select the theme configuration",
      "metadataType": "element",
      "props": {}
    },
    "Toggle": {
      "description": "Renders buttons that allow you to toggle between the available values.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Boolean, object, or string value",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "defaultValue": {
          "description": "Default value",
          "type": ["string", "boolean", "number", "availableValueObjectShape"]
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "Format of the value",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "Array of choice objects to display; choice objects contains `code` and `name`; if not provided, default 'Yes'/'No' is used",
          "type": "availableValueShape"
        },
        "detailElement": {
          "description": "Node to render when the \"other\" value is selected",
          "type": "object"
        },
        "animation": {
          "description": "Animation passed to AnimationGroup",
          "type": "string"
        }
      }
    },
    "TypeaheadMultiSelect": {
      "description": "Renders a multi-select input where the user can type to match from any of the predefined values. As the user types, the text is matched against the available values to display choices.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "The list of codes that are selected. Each code is matched. against the codes in `availableValues` to retrieve a `name` to display",
          "type": ["TypeaheadSingleValueShape", "array"]
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {
          "description": "The format of the items in the value array",
          "type": "string",
          "enum": ["object", "string"]
        },
        "availableValues": {
          "description": "List of values that the user can select from.. . `name` - the text to display, for example 'Married', 'Single'. `code` - the value that is sent on submit.",
          "type": "availableValueShape"
        },
        "allowNew": {
          "description": "Determines if creating new values is allowed",
          "type": "boolean"
        },
        "noOptionsMessage": {
          "description": "The message to display where there are no options that match. the text the user enters.",
          "type": "intlMessageShape"
        },
        "createNewMessage": {
          "description": "The message to display when a new option is being created by the user.. createNewMessage should be passed with the {message} placeholder for example: 'New option: {message}'.",
          "type": "intlMessageShape"
        },
        "readOnlySeparator": {
          "description": "Separator for the readonly value list",
          "type": "string"
        },
        "singleSelect": {
          "description": "Should component only allow a single selection to be made",
          "type": "boolean"
        },
        "stickyIndicator": {
          "description": "Determines if dropdown indicator will be sticky",
          "type": "boolean"
        },
        "usePortal": {
          "description": "Default false; if set to true, it will target the body as the menu portal",
          "type": "boolean"
        },
        "isInitiallyOpen": {
          "description": "Should dropdown be initially opened",
          "type": "boolean"
        },
        "onLoadValues": {
          "description": "Function for asynchronous data loading",
          "type": "string"
        }
      }
    },
    "Year": {
      "description": "IN PROGRESS: Renders a field where the user can enter 4-digit year.",
      "metadataType": "field",
      "props": {
        "id": {
          "description": "Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "secondaryLabel": {
          "description": "Secondary label text to display; if not provided, uses '[id]' for development",
          "type": "intlMessageShape"
        },
        "tooltip": {
          "description": "Tooltip text to display or tooltip object to pass to TooltipIcon",
          "type": "tooltipShape"
        },
        "placeholder": {
          "description": "Placeholder to display on empty component",
          "type": "intlMessageShape"
        },
        "required": {
          "description": "If true, this field is required. If being used with @jutro/lab-preview-validation this prop can also be used to set the custom message overwrite. This can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, \"a custom message\"]",
          "type": ["boolean", "array"]
        },
        "schemaRequired": {
          "description": "If true, this field is required by schema",
          "type": "boolean"
        },
        "readOnly": {
          "description": "If true, this field is readonly",
          "type": "boolean"
        },
        "disabled": {
          "description": "If true, this field is disabled",
          "type": "boolean"
        },
        "nullable": {
          "description": "If true, this field returns undefined when the user deletes the data/selection on the input",
          "type": "boolean"
        },
        "visible": {
          "description": "If true, this field is visible",
          "type": "boolean"
        },
        "value": {
          "description": "Value to display in control",
          "type": "string"
        },
        "defaultValue": {
          "description": "Set the default field value on render if there is a default value; needs onValueChange to work"
        },
        "autoTrim": {
          "description": "If true, will automatically trim string values on change",
          "type": "boolean"
        },
        "onValueChange": {
          "description": "Callback when value is changed; receives new value and (model or path) for this component",
          "type": "string"
        },
        "onValidationChange": {
          "description": "Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component",
          "type": "string"
        },
        "onBlur": {
          "description": "Callback when blur event is fired",
          "type": "string"
        },
        "onFocus": {
          "description": "Callback when focus event is fired",
          "type": "string"
        },
        "model": {
          "description": "Passed as second argument to onValueChange",
          "type": "object"
        },
        "path": {
          "description": "Passed as second argument to onValueChange if model is not present",
          "type": "string"
        },
        "showErrors": {
          "description": "Show errors for this field, works only when field is pristine",
          "type": "boolean"
        },
        "showRequired": {
          "description": "Show required indicator",
          "type": "boolean"
        },
        "showOptional": {
          "description": "Show optional indicator",
          "type": "boolean"
        },
        "validationMessages": {
          "description": "Validation messages to show for this field; only rendered if 'showErrors' is true",
          "type": "array",
          "items": {
            "type": "intlMessageShape"
          }
        },
        "layout": {
          "description": "Layout to use with this field; default is more control and less label; other option is 'reversed'",
          "type": "string"
        },
        "hideLabel": {
          "description": "Hides the label on any layout",
          "type": "boolean"
        },
        "className": {
          "description": "Additional style to apply to the component",
          "type": "string"
        },
        "contentContainerClassName": {
          "description": "Additional style to apply to the content container of the component",
          "type": "string"
        },
        "controlClassName": {
          "description": "Additional style to apply to the control of the component",
          "type": "string"
        },
        "labelClassName": {
          "description": "Additional style to apply to the label of the component",
          "type": "string"
        },
        "secondaryLabelClassName": {
          "description": "Additional style to apply to the secondary label of the component",
          "type": "string"
        },
        "labelContainerClassName": {
          "description": "Additional style to apply to the label container of the component",
          "type": "string"
        },
        "showValidationIcon": {
          "description": "Used to display or not the validation icon",
          "type": "boolean"
        },
        "dataPath": {
          "description": "The full path of view model",
          "type": "string"
        },
        "validator": {
          "description": "An object which should contain a regex pattern as string and a validation message as string",
          "type": "shapeObject"
        },
        "requiredFieldValidationMessage": {
          "description": "Used to override the default required field message",
          "type": "string"
        },
        "successMessage": {
          "description": "Success message to apply to component if it is valid",
          "type": "string"
        },
        "labelPosition": {
          "description": "Allows to select label position",
          "type": "string",
          "enum": ["top", "left"]
        },
        "phone": {
          "description": "Include any FieldComponent property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "inputType": {
          "description": "Type attribute specifies the type of <input> element to display.",
          "type": "string"
        },
        "testId": {
          "description": "Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id.",
          "type": "string"
        },
        "registerValidation": {
          "description": "Optional callback used by jutro-lab-preview-validation package to register field validation to use validation hook.",
          "type": "string"
        },
        "showMultipleMessages": {
          "description": "Used by jutro-lab-preview-validation package: Displays multiple field validation messages all at once.",
          "type": "boolean"
        },
        "dataType": {}
      }
    },
    "ActionColumn": {
      "description": "ActionColumn",
      "metadataType": "container",
      "props": {
        "singleActionType": {
          "description": "Specifies the type of action 'icon' or 'link', when one action is rendered. By default renders `Button` action",
          "type": "string",
          "enum": ["icon", "link"]
        },
        "wrapActions": {
          "description": "Specifies behavior of wrapping action items in a dropdown. By default dropdown is shown for 3 or more actions.. \"never\" - actions are never wrapped, all are visible in a row;. \"always\" - all actions are placed in a dropdown regardless of their number;. { \"allWhen\": N } - all actions are placed in a dropdown when there are more than N (inclusive),.  otherwise are visible (default, N=3);. { \"maxItems\": N } - maximum N items are visible (including dropdown), excess is placed in a dropdown.",
          "type": ["string", "shapeObject", "shapeObject"]
        },
        "hideIconsInDropdown": {
          "description": "If set to true only labels are displayed in the dropdown with actions, icons are hidden",
          "type": "boolean"
        },
        "tooltip": {
          "description": "Tooltip configuration which is shared between all actions. false - disable tooltips in column. object - has same fields as regular tooltip component",
          "type": "tooltipShape"
        },
        "renderCell": {},
        "renderEditCell": {},
        "getRowActions": {},
        "columnClassName": {},
        "cellClassName": {},
        "width": {},
        "sortable": {},
        "textAlign": {},
        "onFilter": {}
      }
    },
    "ActionItem": {
      "description": "ActionItem",
      "metadataType": "action",
      "props": {
        "icon": {
          "description": "Optional icon name",
          "type": "string"
        },
        "onClick": {
          "description": "Action for click event - ignored if `isEditTrigger` enabled",
          "type": "string"
        },
        "label": {
          "description": "Label for action",
          "type": "intlMessageShape"
        },
        "isEditTrigger": {
          "description": "Determines if action triggers edit mode for row",
          "type": "boolean"
        },
        "triggerOnRowClick": {
          "description": "Determines if row click should trigger action",
          "type": "boolean"
        },
        "singleActionType": {
          "description": "If action is single - determines it should be displayed as icon or link",
          "type": "string",
          "enum": ["icon", "link"]
        },
        "tooltip": {
          "description": "Tooltip props",
          "type": "tooltipShape"
        }
      }
    },
    "DataTable": {
      "description": "Component for displaying tabular data",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Used to identify the component",
          "type": "string",
          "required": true
        },
        "showSearch": {
          "description": "Defines whether search bar should be shown",
          "type": "boolean"
        },
        "showPagination": {
          "description": "Defines whether pagination should be shown or not",
          "type": "boolean"
        },
        "config": {
          "description": "Used to set data table config. Use it together with onConfigChange to control data table from outside.. It includes sorting method, filtering value, page, page size, edited row and columns sorting",
          "type": "dataTableConfigShape"
        },
        "defaultConfig": {
          "description": "The configuration applied only on component initialization.. It includes sorting method, filtering value, page, page size, edited row and columns sorting",
          "type": "dataTableConfigShape"
        },
        "onConfigChange": {
          "description": "Function to call after config value changes. New config value is passed as argument. It includes sorting method, filtering value, page, page size and columns visibility",
          "type": "string"
        },
        "pageSizeOptions": {
          "description": "List of page size options",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "data": {
          "description": "Cells data",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "onFilter": {
          "description": "Predicate function for searching data",
          "type": "string"
        },
        "onColumnFilter": {
          "description": "Predicate function for searching data per column",
          "type": "string"
        },
        "filterPlaceholder": {
          "description": "Placeholder text for search input",
          "type": "intlMessageShape"
        },
        "expandable": {
          "description": "Possibility to make rows expandable",
          "type": "boolean"
        },
        "multipleRowsExpandable": {
          "description": "Multiple rows can be expanded at the same time",
          "type": "boolean"
        },
        "renderExpanderContent": {
          "description": "Content of the expandable rows",
          "type": "string"
        },
        "headerMultiline": {
          "description": "If set to true header can be on 2 lines",
          "type": "boolean"
        },
        "onRowClick": {
          "description": "Callback for row click",
          "type": "string"
        },
        "expandOnRowClick": {
          "description": "Row will expand on click",
          "type": "boolean"
        },
        "selectOnRowClick": {
          "description": "Row will be selected on click",
          "type": "boolean"
        },
        "selectionType": {
          "description": "Configures row selection capability (none, single row, multi row)",
          "type": "string",
          "enum": ["none", "single", "multi"]
        },
        "selectedRows": {
          "description": "Currently selected rows (passing value for this prop makes component fully controlled)",
          "type": "array",
          "items": {
            "type": "rowIdShape"
          }
        },
        "selectionActions": {
          "description": "List of actions available for selection",
          "type": "array",
          "items": {
            "type": "shapeObject"
          }
        },
        "onSelectionChange": {
          "description": "Callback to be invoked when selection changed",
          "type": "string"
        },
        "columnsConfigurable": {
          "description": "If set to false, end user will not have a possibility to customize visibility of columns",
          "type": "boolean"
        },
        "loadingText": {
          "description": "Text to show while data is loading, by default - 'Loading..'",
          "type": "intlMessageShape"
        },
        "noDataText": {
          "description": "Text message, when no data present to be shown",
          "type": "intlMessageShape"
        },
        "localSorting": {
          "description": "If set to true, sorting is happening locally after data is fetched. Only for async mode",
          "type": "boolean"
        },
        "phone": {
          "description": "Include any DataTable property to use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any DataTable property to use 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any DataTable property to use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "onSaveRow": {
          "description": "Callback (row, rowId) to be invoked when row is saved",
          "type": "string"
        },
        "onEditCancel": {
          "description": "Callback (row, rowId) to be invoked when row edit is canceled",
          "type": "string"
        },
        "onEditStart": {
          "description": "Callback (row, rowId) to be invoked when row edit is started",
          "type": "string"
        },
        "path": {
          "description": "The full path of view model, it also acts as an accessor for datatable's data",
          "type": "string"
        },
        "onFetchData": {
          "description": "Callback to be invoked when new data has to be fetched in async mode,. with one argument of the current state of config object '{ filterValue, sorted, pageSize, page }'.. Should return a promise of an object '{ rows, numberOfRows }', in which 'rows' is the filtered data to be presented for the current page,. 'numberOfRows' is the total length of whole data.. It takes precedence over `data` and `numberOfRows` sync props",
          "type": "string"
        },
        "onGetRowId": {
          "description": "Callback (row) that returns unique id for the row.. The id should not change after editing the row.. By default index from data is used, but it does not work correctly when filtering.",
          "type": "string"
        },
        "rowIdPath": {
          "description": "Name of row object property containing the row id. Can accept nested paths. Takes precedence over onGetRowId prop.",
          "type": "string"
        },
        "tableLabel": {
          "description": "Data table aria label",
          "type": "intlMessageShape"
        },
        "numberOfRows": {
          "description": "Number of available rows",
          "type": "number"
        }
      }
    },
    "DisplayColumn": {
      "description": "",
      "metadataType": "container",
      "props": {
        "fieldDatatype": {
          "description": "",
          "type": "string"
        },
        "onAccessor": {
          "description": "Returns a value that will be used by the column to access the correct data of each row",
          "type": "string"
        },
        "valueProps": {
          "description": "Props passed to underlying FieldValue. Useful for passing eg. showFractions: true",
          "type": "object"
        },
        "renderCell": {},
        "renderEditCell": {},
        "editCellClass": {},
        "columnProportion": {}
      }
    },
    "FieldColumn": {
      "description": "",
      "metadataType": "container",
      "props": {
        "model": {
          "description": "",
          "type": "object"
        },
        "basePath": {
          "description": "",
          "type": "string"
        },
        "uiMetadata": {
          "description": "",
          "type": "object"
        },
        "pageProps": {
          "description": "",
          "type": "object"
        },
        "readOnly": {
          "description": "",
          "type": "boolean"
        },
        "onAccessor": {
          "description": "Returns a value that will be used by the column to access the correct data of each row",
          "type": "string"
        },
        "renderCell": {},
        "renderEditCell": {},
        "columnProportion": {},
        "fieldDatatype": {}
      }
    },
    "FilterBar": {
      "description": "Component for filters rendering, supplied through metadata",
      "metadataType": "container",
      "props": {
        "uiProps": {
          "description": "Content metadata or an array of metadata",
          "type": "object"
        },
        "classNameMap": {
          "description": "Resolve class name to hashed class name",
          "type": "object"
        },
        "componentMap": {
          "description": "Resolve component map",
          "type": "object"
        },
        "callbackMap": {
          "description": "Resolve callback name to callback function",
          "type": "object"
        },
        "onFiltersChange": {
          "description": "Callback for when filters are changed",
          "type": "string",
          "required": true
        },
        "initialFilters": {
          "description": "Object with initial filters to be applied",
          "type": "object"
        }
      }
    },
    "JsonDataTable": {
      "description": "DataTable variant allowing to integrate with schema, metadata and data",
      "metadataType": "container",
      "props": {
        "callbackMap": {
          "description": "Resolve callback string to callback function",
          "type": "object"
        },
        "componentMap": {
          "description": "Resolve component string to component",
          "type": "object"
        },
        "data": {
          "description": "Data for this table",
          "type": "object"
        },
        "dataSchema": {
          "description": "Schema for this form; used for data props and validation",
          "type": "object",
          "required": true
        },
        "onDataSchemaExtension": {
          "description": "Function to process schema data types with custom attributes",
          "type": "string"
        },
        "onDeleteRow": {
          "description": "Callback for row deletion",
          "type": "string"
        },
        "onSaveRow": {
          "description": "Callback for saving the row edit",
          "type": "string"
        },
        "overrideProps": {
          "description": "optional. Override props by all, type or id.",
          "type": "object"
        },
        "showErrors": {
          "description": "optional. Show errors for all invalid fields; true after user attempts to submit/perform an action",
          "type": "boolean"
        },
        "uiColumns": {
          "description": "Array of ui configs for columns",
          "type": "array",
          "items": {
            "type": "columnConfigShape"
          }
        },
        "readOnly": {
          "description": "Indicate if the table should be editable or readOnly",
          "type": "boolean"
        }
      }
    },
    "RadioColumn": {
      "description": "",
      "metadataType": "container",
      "props": {
        "option": {
          "description": "The option to be displayed in cell",
          "type": ["shapeObject", "string"]
        },
        "onOption": {
          "description": "The option to be displayed in cell",
          "type": "string"
        },
        "onAccessor": {
          "description": "Returns a value that will be used by the column to access the correct data of each row",
          "type": "string"
        },
        "renderCell": {},
        "getRowActions": {},
        "onFilter": {},
        "columnProportion": {}
      }
    },
    "TableColumn": {
      "description": "TableColumn",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Identifier",
          "type": "string"
        },
        "header": {
          "description": "String or callback(props) to render the column header in the table",
          "type": ["string", "string", "object"]
        },
        "renderHeader": {
          "description": "Callback(props) to render the column header in the table",
          "type": "string"
        },
        "headerClassName": {
          "description": "Classname for header <th>",
          "type": "string"
        },
        "cell": {
          "description": "String or callback(row, index, props) to render the column cell for a row in the table",
          "type": ["string", "string"]
        },
        "renderCell": {
          "description": "Callback(row, index, props) to render the column cell for a row in the table",
          "type": "string"
        },
        "cellClassName": {
          "description": "Additional classname for cell (in order to use it in DataTable, specificity of the selector should be higher than 5 classnames)",
          "type": "string"
        },
        "visible": {
          "description": "Is this column shown in the table",
          "type": "boolean"
        },
        "phone": {
          "description": "Include any TableColumn property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any TableColumn property for use at 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any TableColumn property for use at 'tablet', 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "textAlign": {
          "description": "Text-align css property value (default 'center')",
          "type": "string",
          "enum": ["left", "center", "right"]
        },
        "width": {
          "description": "The width of current column, when `undefined` columns will share the table accordingly to columns columnProportion prop",
          "type": "number"
        },
        "columnProportion": {
          "description": "Proportion of the column. Doesn't work when width is defined",
          "type": "number"
        },
        "sortable": {
          "description": "To specify if the column is sortable, when `undefined` the column is sortable",
          "type": "boolean"
        },
        "renderEditCell": {
          "description": "Callback(row, index, props) to render the column cell for a row in the table in the edit mode",
          "type": "string"
        },
        "editCellClass": {
          "description": "Custom classname for column cell in the edit mode",
          "type": "string"
        },
        "columnClassName": {
          "description": "Classname for column",
          "type": "string"
        },
        "onFilter": {
          "description": "Column filter function",
          "type": "string"
        },
        "path": {
          "description": "The full path of view model, it also acts as an accessor for row's data",
          "type": "string"
        },
        "onSort": {
          "description": "Callback to be invoked on column sort click",
          "type": "string"
        }
      }
    },
    "Table": {
      "description": "Renders a table. You can use it to display data from a model.",
      "metadataType": "container",
      "props": {
        "title": {
          "description": "Title which is placed in title bar",
          "type": ["string", "string"]
        },
        "renderTitle": {
          "description": "Function that renders custom title",
          "type": "string"
        },
        "className": {
          "description": "Optional css class(es) to add to the grid tag",
          "type": "string"
        },
        "phone": {
          "description": "Include any Table property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any Table property for use at 'phoneWide' and 'phone' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any Table property for use at 'tablet' and 'phone' breakpoint",
          "type": "object"
        },
        "renderTitleAction": {
          "description": "Render prop for customizing action in the title area",
          "type": "string"
        },
        "columnsProportion": {
          "description": "Proportion of columns (e.g. [2, 2, 1])",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "placeholder": {
          "description": "Placeholder to show when data is empty",
          "type": "intlMessageShape"
        },
        "renderPhoneCardComponent": {
          "description": "Component to wrap mobile Radio Table",
          "type": "string"
        },
        "titleId": {
          "description": "The id used for the tables title for use in the aria-describedby",
          "type": "string"
        },
        "titlePosition": {
          "description": "The position of the title in the title bar (left, right, center)",
          "type": "string"
        },
        "data": {
          "description": "Cells data",
          "type": "array",
          "items": {
            "type": "shapeObject"
          }
        }
      }
    },
    "ActionTitleBar": {
      "description": "",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "phone": {
          "description": "",
          "type": "shapeObject"
        },
        "phoneWide": {
          "description": "",
          "type": "shapeObject"
        },
        "tablet": {
          "description": "",
          "type": "shapeObject"
        }
      }
    },
    "EditCancelSaveTitleBar": {
      "description": "",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "title": {
          "description": "Title to render inside title bar",
          "type": "intlMessageShape"
        },
        "readOnly": {
          "description": "If true action buttons are not rendered",
          "type": "boolean"
        },
        "onEditClick": {
          "description": "Callback invoked on edit button click, () => void",
          "type": "string",
          "required": true
        },
        "onSaveClick": {
          "description": "Callback invoked on save button click, () => void",
          "type": "string",
          "required": true
        },
        "onCancelClick": {
          "description": "Callback invoked on cancel button click, () => void",
          "type": "string",
          "required": true
        },
        "labels": {
          "description": "Labels for rendered buttons",
          "type": "shapeObject",
          "required": true
        },
        "isEditMode": {
          "description": "If true save and cancel buttons will be rendered",
          "type": "boolean"
        },
        "isSaveEnabled": {
          "description": "Enables the save button",
          "type": "boolean"
        },
        "internalClassNames": {
          "description": "ClassNames for internal components",
          "type": "shapeObject"
        },
        "phone": {
          "description": "",
          "type": "shapeObject"
        },
        "phoneWide": {
          "description": "",
          "type": "shapeObject"
        },
        "tablet": {
          "description": "",
          "type": "shapeObject"
        }
      }
    },
    "GlobalizationSettingsCard": {
      "description": "",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "",
          "type": "string",
          "required": true
        },
        "title": {
          "description": "",
          "type": "intlMessageShape"
        },
        "onLocaleChange": {
          "description": "",
          "type": "string"
        },
        "onLanguageChange": {
          "description": "",
          "type": "string"
        },
        "onSave": {
          "description": "",
          "type": "string"
        },
        "skipLocalStoragePersistence": {
          "description": "",
          "type": "boolean"
        },
        "languageValue": {},
        "localeValue": {}
      }
    },
    "SettingsCard": {
      "description": "",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "",
          "type": "string",
          "required": true
        },
        "className": {
          "description": "",
          "type": "string"
        },
        "title": {
          "description": "",
          "type": "intlMessageShape",
          "required": true
        },
        "isValid": {
          "description": "",
          "type": "boolean"
        },
        "onSaveClick": {
          "description": "",
          "type": "string"
        },
        "onCancelClick": {
          "description": "",
          "type": "string"
        },
        "readOnly": {
          "description": "",
          "type": "boolean"
        },
        "formProps": {
          "description": "",
          "type": "shapeObject",
          "required": true
        }
      }
    },
    "ThemeSettingsCard": {
      "description": "",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "",
          "type": "string",
          "required": true
        },
        "title": {
          "description": "",
          "type": "intlMessageShape"
        },
        "onSave": {
          "description": "",
          "type": "string"
        },
        "availableThemes": {},
        "theme": {}
      }
    },
    "TitleElement": {
      "description": "",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ColumnsLayout": {
      "description": "Renders number of independent columns and manages its order for different breakpoints. Extends GridLayout component. By default for desktop, it divides columns to have equal width (e.g 3 columns => [1, 1, 1]), for tablet and mobile renders single column grid.",
      "metadataType": "layout",
      "props": {
        "id": {
          "description": "Unique identifier",
          "type": "string",
          "required": true
        },
        "columns": {
          "description": "Grid's columns width/ratio configuration.. The columns length for desktop have to be equal to number of children (columns).. If not provided, it will be inferred as the number of children with a width of one fraction for each column.",
          "type": "columnsLayoutColumnsPropType"
        },
        "onColumnsRearrange": {
          "description": "Callback to rearrange children (columns) that will be invoked on the breakpoint change.. It is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`.. When provided, it overrides the `variant` prop.",
          "type": "string"
        },
        "variant": {
          "description": "Specifies how the columns will be stacked or merged on the breakpoint.. Ignored if `onColumnsRearrange` provided",
          "type": "string",
          "enum": [
            "mergeColumnsToFirst",
            "mergeColumnsToLast",
            "stackColumnsToFirst",
            "stackColumnsToLast",
            "default"
          ]
        },
        "gap": {},
        "tablet": {},
        "phoneWide": {},
        "phone": {},
        "tag": {}
      }
    },
    "FlexItem": {
      "description": "Defines a css grid 'FlexItem'. This is used in conjunction with 'Grid' parent.",
      "metadataType": "layout",
      "props": {
        "visible": {
          "description": "Define whether FlexItem is visible",
          "type": "boolean"
        },
        "grow": {
          "description": "Whether flex item can grow",
          "type": ["number", "string"]
        },
        "shrink": {
          "description": "Whether flex item can shrink",
          "type": ["number", "string"]
        },
        "textAlign": {
          "description": "Horizontally align the contents of the column",
          "type": "string",
          "enum": ["left", "center", "right"]
        },
        "alignSelf": {
          "description": "Align the flex item according to the cross axis of the flex direction.",
          "type": "string",
          "enum": [
            "top",
            "middle",
            "bottom",
            "left",
            "center",
            "right",
            "baseline",
            "stretch"
          ]
        },
        "tag": {
          "description": "Dom tag to use",
          "type": "string"
        },
        "className": {
          "description": "Css class(es) to append to tag",
          "type": "string"
        },
        "phone": {
          "description": "Include any FlexItem property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any FlexItem property for use at 'phoneWide' breakpoint;",
          "type": "object"
        },
        "tablet": {
          "description": "Include any FlexItem property for use at 'tablet' breakpoint;",
          "type": "object"
        }
      }
    },
    "Flex": {
      "description": "Defines a css grid 'Flex'. This is used in conjunction with 'FlexItem' children.",
      "metadataType": "layout",
      "props": {
        "gap": {
          "description": "Gap between rows and columns ('none', 'small', 'medium', 'large')",
          "type": "string",
          "enum": ["none", "small", "medium", "large"]
        },
        "alignItems": {
          "description": "Align all items within the grid in the axis opposite to its direction; default is stretch",
          "type": "string",
          "enum": [
            "top",
            "middle",
            "bottom",
            "left",
            "center",
            "right",
            "baseline",
            "stretch"
          ]
        },
        "alignContent": {
          "description": "Align the flex within its container in the axis opposite to its direction; default is stretch",
          "type": "string",
          "enum": [
            "top",
            "middle",
            "bottom",
            "left",
            "center",
            "right",
            "baseline",
            "stretch"
          ]
        },
        "justifyContent": {
          "description": "Justify the content in the flex direction: horizontally if direction is 'row' (default) or vertically if direction is 'column'",
          "type": "string",
          "enum": [
            "top",
            "middle",
            "bottom",
            "left",
            "center",
            "right",
            "around",
            "between",
            "evenly"
          ]
        },
        "direction": {
          "description": "Set the flex direction (row, rowReverse, column, columnReverse)",
          "type": "string",
          "enum": ["row", "rowReverse", "column", "columnReverse"]
        },
        "tag": {
          "description": "Optional dom tag to render",
          "type": "string"
        },
        "className": {
          "description": "Optional css class(es) to add to the flex tag",
          "type": "string"
        },
        "phone": {
          "description": "Include any Flex property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any Flex property for use at 'phoneWide' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any Flex property for use at 'tablet' breakpoint;",
          "type": "object"
        },
        "theme": {
          "description": "Theme to apply to component",
          "type": "shapeObject"
        },
        "wrap": {
          "description": "Wrap (true), don't wrap (false), reverse wrap (reverse) flex items in the container",
          "type": ["boolean", "string"]
        }
      }
    },
    "GridItem": {
      "description": "Defines a css grid 'GridItem'. This is used in conjunction with 'Grid' parent.",
      "metadataType": "layout",
      "props": {
        "clone": {
          "description": "Render the child without tag wrapper. It passes classNames and styles directly to child element if possible.. If not possible, it falls back to wrapping with a tag (for not valid React elements)",
          "type": "boolean"
        },
        "fullWidth": {
          "description": "If true, item takes full width of parent grid.. Ignored if colStart or colSpan is specified.",
          "type": "boolean"
        },
        "visible": {
          "description": "Specify whether Grid item should be visible",
          "type": "boolean"
        },
        "rowSpan": {
          "description": "How many rows it takes",
          "type": ["number", "string"]
        },
        "rowStart": {
          "description": "Row number to start",
          "type": ["number", "string"]
        },
        "colSpan": {
          "description": "How many columns it takes",
          "type": ["number", "string"]
        },
        "colStart": {
          "description": "Column number to start",
          "type": ["number", "string"]
        },
        "textAlign": {
          "description": "Horizontally align the contents of the column",
          "type": "string",
          "enum": ["left", "center", "right"]
        },
        "valign": {
          "description": "Vertically align the column (relative to other columns in the same row). By default the column will be stretched to equal height.",
          "type": "string",
          "enum": ["top", "middle", "bottom", "baseline", "stretch"]
        },
        "align": {
          "description": "Align the column. By default the column will be stretched horizontally.",
          "type": "string",
          "enum": ["start", "center", "end", "stretch"]
        },
        "tag": {
          "description": "Dom tag to use",
          "type": "string"
        },
        "className": {
          "description": "Css class(es) to append to tag",
          "type": "string"
        },
        "style": {
          "description": "DOM element styles",
          "type": "object"
        },
        "phone": {
          "description": "Include any GridItem property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any GridItem property for use at 'phoneWide' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any GridItem property for use at 'tablet' breakpoint",
          "type": "object"
        }
      }
    },
    "GridLayout": {
      "description": "Renders a CSS Grid and applies GridItem styles to each child (using GridItem's `clone` property (React.cloneElement)). For tablet and mobile renders single column grid by default.",
      "metadataType": "layout",
      "props": {
        "id": {
          "description": "Unique identifier",
          "type": "string",
          "required": true
        },
        "defaultGridItem": {
          "description": "`GridItem` properties that will to be applied to each child by default.",
          "type": "gridItemOptionsShape"
        },
        "gridItems": {
          "description": "An array of GridItem properties to be applied to child with the same index.. If provided, it will extends/override the `defaultGridItem` properties for each item.. Passing `null` or `undefined` will skip applying it to GridItem.",
          "type": "array",
          "items": {
            "type": "gridItemOptionsShape"
          }
        },
        "gap": {
          "description": "Gap between rows and columns",
          "type": "Grid.propTypes?.gap"
        },
        "tag": {
          "description": "Optional dom tag to render",
          "type": "Grid.propTypes?.tag"
        },
        "phone": {
          "description": "Include any GridLayout property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any GridLayout property for use at 'phoneWide' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any GridLayout property for use at 'tablet' and 'phone' breakpoint;",
          "type": "object"
        }
      }
    },
    "Grid": {
      "description": "Renders a css grid. For each grid item, place its children in an Jutro `GridItem`.",
      "metadataType": "layout",
      "props": {
        "columns": {
          "description": "Define explicit columns widths",
          "type": "array",
          "items": {
            "type": ["string", "number"]
          }
        },
        "repeat": {
          "description": "Repeat columns",
          "type": ["string", "number", "string"]
        },
        "rows": {
          "description": "Define explicit rows heights",
          "type": "array",
          "items": {
            "type": ["string", "number"]
          }
        },
        "autoRows": {
          "description": "Define implicit rows",
          "type": "array"
        },
        "gap": {
          "description": "Gap between rows and columns ('none', 'small', 'medium', 'large')",
          "type": "string",
          "enum": ["none", "small", "medium", "large"]
        },
        "hgap": {
          "description": "Gap between columns ('none', 'small', 'medium', 'large'). If unspecified, will fallback to 'gap' property.",
          "type": "string",
          "enum": ["none", "small", "medium", "large"]
        },
        "vgap": {
          "description": "Gap between rows ('none', 'small', 'medium', 'large'). If unspecified, will fallback to 'gap' property.",
          "type": "string",
          "enum": ["none", "small", "medium", "large"]
        },
        "valignContent": {
          "description": "Vertical align the grid within its container; default - 'stretch'",
          "type": "string",
          "enum": ["top", "middle", "bottom", "baseline", "stretch"]
        },
        "justifyContent": {
          "description": "Justify the grid within its container (left, center, right, around, between, evenly)",
          "type": "string",
          "enum": [
            "left",
            "center",
            "right",
            "around",
            "between",
            "evenly",
            "stretch"
          ]
        },
        "valignItems": {
          "description": "Vertical align all items within the grid; default - 'stretch'",
          "type": "string",
          "enum": ["top", "middle", "bottom", "baseline", "stretch"]
        },
        "justifyItems": {
          "description": "Justify all items within the grid (left, center, right, around, between, evenly)",
          "type": "string",
          "enum": [
            "left",
            "center",
            "right",
            "around",
            "between",
            "evenly",
            "stretch"
          ]
        },
        "tag": {
          "description": "Optional dom tag to render",
          "type": "string"
        },
        "className": {
          "description": "Optional css class(es) to add to the grid tag",
          "type": "string"
        },
        "style": {
          "description": "DOM element styles",
          "type": "object"
        },
        "phone": {
          "description": "Include any Grid property for use at 'phone' breakpoint",
          "type": "object"
        },
        "phoneWide": {
          "description": "Include any Grid property for use at 'phoneWide' breakpoint",
          "type": "object"
        },
        "tablet": {
          "description": "Include any Grid property for use at 'tablet' and 'phone' breakpoint;",
          "type": "object"
        },
        "blockPointerEvents": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "AsyncButtonLink": {
      "description": "AsyncButtonLink is a Jutro component, designed following the principles of Link (React Router 4). AsyncButtonLink invokes the trigger and wait for promise to be resolved or rejected. Meanwhile the promise is in execution, the component updates its content within the message provided by property {message} Case promise has been resolved, AsyncButtonLink attempts to navigate to destination provided by property {to} Case promise has been rejected, AsyncButtonLink attempts to navigate to destination provided by property {failTo}",
      "metadataType": "action",
      "props": {
        "failTo": {
          "description": "The destination path when promise is rejected; can be an object like <Link to>",
          "type": "intlToShape"
        },
        "failToMessage": {
          "description": "The message shown when promise is rejected; shown if 'failTo' is not provided",
          "type": "string"
        },
        "message": {
          "description": "The message shown when executing trigger/promise",
          "type": "intlMessageShape"
        },
        "replace": {
          "description": "The replace prop will replace the current entry in the history stack",
          "type": "boolean"
        },
        "to": {
          "description": "The destination path when promise is resolved; can be an object like <Link to>",
          "type": "intlToShape"
        },
        "toMessage": {
          "description": "The message shown when promise is resolved; shown if 'to' is not provided",
          "type": "string"
        },
        "onTrigger": {
          "description": "The method used to trigger the promise",
          "type": "string",
          "required": true
        },
        "onClick": {
          "description": "The method to be called before (instead in case of event.preventDefault been called) built-in onClick handler",
          "type": "string"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "innerRef": {
          "description": "Get ref to the inner rendered <a> or <button>",
          "type": ["string", "string"]
        }
      }
    },
    "AsyncLink": {
      "description": "AsyncLink is a Jutro component, designed following the principles of Link (React Router 4). AsyncLink invokes the trigger and wait for promise to be resolved or rejected. Meanwhile the promise is in execution, the component updates its content within the message provided by property {message} Case promise has been resolved, AsyncLink attempts to navigate to destination provided by property {to} Case promise has been rejected, AsyncLink attempts to navigate to destination provided by property {failTo} AsyncLink automatically adds the href for anchor tag having the to property defined; It follows the react-router-4 implementation: https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/Link.js",
      "metadataType": "action",
      "props": {
        "failTo": {
          "description": "The destination path when promise is rejected; can be an object like <Link to>",
          "type": "intlToShape"
        },
        "failToMessage": {
          "description": "The message shown when promise is rejected; shown if 'failTo' is not provided",
          "type": "string"
        },
        "message": {
          "description": "The message shown when executing trigger/promise",
          "type": "intlMessageShape"
        },
        "replace": {
          "description": "The replace prop will replace the current entry in the history stack",
          "type": "boolean"
        },
        "to": {
          "description": "The destination path when promise is resolved; can be an object like <Link to>",
          "type": "intlToShape"
        },
        "toMessage": {
          "description": "The message shown when promise is resolved; shown if 'to' is not provided",
          "type": "string"
        },
        "onTrigger": {
          "description": "The method used to trigger the promise",
          "type": "string",
          "required": true
        },
        "onClick": {
          "description": "The method to be called before (instead in case of event.preventDefault been called) built-in onClick handler",
          "type": "string"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        }
      }
    },
    "ButtonLink": {
      "description": "ButtonLink is an Jutro component,",
      "metadataType": "action",
      "props": {
        "replace": {
          "description": "The replace prop will replace the current entry in the history stack",
          "type": "boolean"
        },
        "to": {
          "description": "The destination path when promise is resolved; can be an object like <Link to>.. Use this for paths internal to the application.",
          "type": "intlToShape"
        },
        "href": {
          "description": "The destination path when promise is resolved;. Use this for paths external to the application.",
          "type": "intlMessageShape"
        },
        "innerRef": {
          "description": "Get ref to the inner rendered <a> or <button>",
          "type": ["string", "string", "shapeObject"]
        },
        "onClick": {
          "description": "Callback when button is clicked",
          "type": "string"
        },
        "className": {
          "description": "CSS class name for this component",
          "type": "string"
        },
        "allowNoLeadingSlash": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "DropdownMenuAvatar": {
      "description": "DropdownMenuAvatar",
      "metadataType": "container",
      "props": {
        "title": {
          "description": "Menu header title text",
          "type": "intlMessageShape"
        },
        "subtitle": {
          "description": "Menu header subtitle text",
          "type": "intlMessageShape"
        },
        "username": {
          "description": "Users first and last names, used as component alt text as well. as to display initials if no image selected",
          "type": "string"
        },
        "icon": {
          "description": "Icon name from Material Icons icon list to be displayed if no image or initials present",
          "type": "string"
        },
        "className": {
          "description": "Additional component styling class name",
          "type": "string"
        },
        "imageSource": {
          "description": "Path to user image, preferentially shown before user initials or icon",
          "type": "string"
        },
        "id": {
          "description": "Used to identify menu component.",
          "type": "string",
          "required": true
        },
        "isOpen": {
          "description": "The prop that indicates if the menu is currently visible.",
          "type": "boolean"
        },
        "dropUp": {
          "description": "If `true`, the menu appears above the trigger component.",
          "type": "boolean"
        },
        "alignRight": {
          "description": "If `true`, items are aligned to the right edge of the menu.",
          "type": "boolean"
        },
        "useAuthInfo": {
          "description": "If `true`, display header information from Okta, if available, and Logout menu link",
          "type": "boolean"
        },
        "showImageBorder": {
          "description": "Defines whether image border should be shown or not",
          "type": "boolean"
        },
        "headerClassName": {
          "description": "Additional css class to the dropdown menu avatar header",
          "type": "string"
        },
        "authLinksClassName": {
          "description": "Additional css class to the dropdown menu avatar auth links",
          "type": "string"
        },
        "separatorClassName": {
          "description": "Optional css class to the dropdown menu separator",
          "type": "string"
        },
        "onBeforeLogout": {
          "description": "Callback to be called before okta logout",
          "type": "string"
        },
        "dropdownClassName": {
          "description": "Optional css class to the dropdown menu",
          "type": "string"
        }
      }
    },
    "DropdownMenuButton": {
      "description": "DropdownMenuButton",
      "metadataType": "action",
      "props": {
        "id": {
          "description": "Used to identify menu component.",
          "type": "string",
          "required": true
        },
        "buttonText": {
          "description": "Content to be rendered as the 'children' for the 'Button' component.",
          "type": ["object", "intlMessageShape"]
        },
        "isOpen": {
          "description": "The prop that indicates if the menu is currently visible.",
          "type": "boolean"
        },
        "dropUp": {
          "description": "If `true`, the menu appears above the trigger component.",
          "type": "boolean"
        },
        "alignRight": {
          "description": "If `true`, menu items are aligned to the right edge of the menu.",
          "type": "boolean"
        },
        "menuClassName": {
          "description": "Override class for the inner menu of the dropdown menu",
          "type": "string"
        }
      }
    },
    "DropdownMenuHeader": {
      "description": "DropdownMenuHeader",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Used to identify dropdown menu header component.",
          "type": "string"
        },
        "title": {
          "description": "The element node representing the header title, in most cases, will be a plain string.",
          "type": ["object", "intlMessageShape"]
        }
      }
    },
    "DropdownMenuLink": {
      "description": "DropdownMenuLink",
      "metadataType": "action",
      "props": {
        "id": {
          "description": "Used to identify dropdown menu link component.",
          "type": "string"
        },
        "to": {
          "description": "Internal link.",
          "type": "intlToShape"
        },
        "href": {
          "description": "External link.",
          "type": "intlMessageShape"
        },
        "target": {
          "description": "Specifies where to open the external link.",
          "type": "string"
        },
        "rel": {
          "description": "Specifies the relationship between the current and an external document.",
          "type": "string"
        },
        "disabled": {
          "description": "If `true`, this link is disabled",
          "type": "boolean"
        },
        "onMenuItemClick": {
          "description": "Callback supposed to be triggered when clicked in the context of menu",
          "type": "string"
        },
        "focused": {
          "description": "If `true`, the link is considered as a currently active one",
          "type": "boolean"
        },
        "className": {
          "description": "The class name of the link",
          "type": "string"
        },
        "activeClassName": {
          "description": "The class to give the link when it is active",
          "type": "string"
        },
        "visible": {
          "description": "If true, this link is visible.",
          "type": "boolean"
        },
        "onClick": {
          "description": "On link click event handler",
          "type": "string"
        }
      }
    },
    "DropdownMenuSeparator": {
      "description": "DropdownMenuSeparator",
      "metadataType": "element",
      "props": {
        "id": {
          "description": "Used to identify dropdown menu separator component.",
          "type": "string"
        },
        "className": {
          "description": "Additional style class for the separator.",
          "type": "string"
        }
      }
    },
    "DropdownMenu": {
      "description": "A dropdown menu where you can add your actions to each item.",
      "metadataType": "container",
      "props": {
        "id": {
          "description": "Used to identify menu component.",
          "type": "string",
          "required": true
        },
        "renderTrigger": {
          "description": "The function that generates a component that the user clicks on to show the menu.",
          "type": "string"
        },
        "onRenderTrigger": {
          "description": "",
          "type": "string"
        },
        "isOpen": {
          "description": "The prop that indicates if the menu is currently visible.",
          "type": "boolean"
        },
        "dropUp": {
          "description": "If `true`, the menu appears above the trigger component.",
          "type": "boolean"
        },
        "alignRight": {
          "description": "If `true`, items are aligned to the right edge of the menu.",
          "type": "boolean"
        },
        "className": {
          "description": "Override class for dropdown menu",
          "type": "string"
        },
        "menuClassName": {
          "description": "Override class for the inner menu of the dropdown menu",
          "type": "string"
        },
        "focused": {
          "description": "If `true`, root element is considered as a currently active one",
          "type": "boolean"
        },
        "openMenuId": {
          "description": "Optional id of the component instance that's supposed be to currently opened.. Mostly useful when rendering multiple instances next to each other (e.g. within Header)",
          "type": "string"
        },
        "onMenuOpen": {
          "description": "Optional callback that's supposed to be triggered when menu gets opened",
          "type": "string"
        },
        "onMenuClose": {
          "description": "Optional callback that's supposed to be triggered when menu gets closed",
          "type": "string"
        },
        "keepContext": {
          "description": "Optional boolean that if true sets title to selected value",
          "type": "boolean"
        }
      }
    },
    "SideNavigation": {
      "description": "The `SideNavigation` component is designed as a container for navigation links and dropdowns",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "Additional class names for component.",
          "type": "string"
        },
        "routes": {
          "description": "Routing metadata object",
          "type": "array",
          "items": {
            "type": "routeShape"
          },
          "required": true
        },
        "contextSwitcher": {
          "description": "Context switcher object",
          "type": "shapeObject"
        },
        "collapsible": {
          "description": "Defines whether component can be collapsed",
          "type": "boolean"
        },
        "collapsed": {
          "description": "Default state for SideNavigation",
          "type": "boolean"
        },
        "expandOverContent": {
          "description": "If true, menu will expand over content. If false, content will be squeezed",
          "type": "boolean"
        }
      }
    },
    "TopNavigation": {
      "description": "The `TopNavigation` component is designed as a container for navigation links and dropdowns in Header.",
      "metadataType": "container",
      "props": {
        "className": {
          "description": "Additional class names for component",
          "type": "string"
        },
        "routes": {
          "description": "Routing metadata object",
          "type": "array",
          "items": {
            "type": "routeShape"
          },
          "required": true
        },
        "contextSwitcher": {
          "description": "Context switcher object",
          "type": "shapeObject"
        },
        "wrap": {
          "description": "Defines if items should wrap when not enough space",
          "type": "boolean"
        },
        "navBarRef": {
          "description": "Reference to the navigation bar HTML element",
          "type": "shapeObject"
        }
      }
    },
    "a": {
      "metadataType": "element"
    },
    "br": {
      "metadataType": "element"
    },
    "code": {
      "metadataType": "element"
    },
    "h1": {
      "metadataType": "element"
    },
    "h2": {
      "metadataType": "element"
    },
    "h3": {
      "metadataType": "element"
    },
    "h4": {
      "metadataType": "element"
    },
    "h5": {
      "metadataType": "element"
    },
    "h6": {
      "metadataType": "element"
    },
    "hr": {
      "metadataType": "element"
    },
    "label": {
      "metadataType": "element"
    },
    "iframe": {
      "metadataType": "element"
    },
    "i": {
      "metadataType": "element"
    },
    "p": {
      "metadataType": "element"
    },
    "b": {
      "metadataType": "element"
    },
    "img": {
      "metadataType": "element"
    },
    "image": {
      "metadataType": "element"
    },
    "pre": {
      "metadataType": "element"
    },
    "span": {
      "metadataType": "element"
    },
    "div": {
      "metadataType": "container"
    },
    "form": {
      "metadataType": "container"
    },
    "article": {
      "metadataType": "container"
    },
    "ul": {
      "metadataType": "container"
    },
    "ol": {
      "metadataType": "container"
    },
    "li": {
      "metadataType": "container"
    }
  }
}
