import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import cx from"classnames";import{TranslatorContext}from"@jutro/locale";import{intlMessageShape,tooltipBaseProps,placementOptions}from"@jutro/prop-types";import{ContextConsumer,getMessageProp}from"@jutro/platform";import{TooltipContent}from"./TooltipContent";import styles from"./TooltipIcon.module.css";import{Tooltip}from"./Tooltip";import{Icon}from"../Icon/Icon";import{messages}from"./TooltipIcon.messages";export let TooltipIcon=function(_React$Component){_inherits(TooltipIcon,_React$Component);var _super=_createSuper(TooltipIcon);function TooltipIcon(props){var _this;return _classCallCheck(this,TooltipIcon),_this=_super.call(this,props),_defineProperty(_assertThisInitialized(_this),"handleClickOutside",(event=>{_this.iconRef&&_this.tooltip&&!_this.tooltip.popper.contains(event.target)&&!_this.iconRef.current.contains(event.target)&&_this.hideTooltip()})),_defineProperty(_assertThisInitialized(_this),"getOpenIcon",(icon=>`${icon}`)),_defineProperty(_assertThisInitialized(_this),"getClosedIcon",(icon=>`${icon}-outline`)),_defineProperty(_assertThisInitialized(_this),"setClosedIcon",(async()=>_this.setState({icon:_this.getClosedIcon(_this.props.icon)}))),_defineProperty(_assertThisInitialized(_this),"setOpenIcon",(async()=>_this.setState({icon:_this.getOpenIcon(_this.props.icon)}))),_defineProperty(_assertThisInitialized(_this),"toggleTooltip",(evt=>{evt.preventDefault();const _assertThisInitialize=_assertThisInitialized(_this),tooltip=_assertThisInitialize.tooltip,setClosedIcon=_assertThisInitialize.setClosedIcon,setOpenIcon=_assertThisInitialize.setOpenIcon;tooltip&&(tooltip.state.isVisible?setClosedIcon().then(tooltip.hide):setOpenIcon().then(tooltip.show))})),_defineProperty(_assertThisInitialized(_this),"hideTooltip",(()=>{const _assertThisInitialize2=_assertThisInitialized(_this),tooltip=_assertThisInitialize2.tooltip,setClosedIcon=_assertThisInitialize2.setClosedIcon;null!=tooltip&&tooltip.state.isVisible&&setClosedIcon().then(tooltip.hide)})),_defineProperty(_assertThisInitialized(_this),"getAccessibilityProperties",(translator=>{const messageProps=_this.props.messageProps;return{"aria-label":translator(getMessageProp("showTooltip",messageProps,messages)),"aria-haspopup":"true"}})),_defineProperty(_assertThisInitialized(_this),"renderComponent",(translator=>{const _this$props=_this.props,id=_this$props.id,text=_this$props.text,title=_this$props.title,link=_this$props.link,href=_this$props.href,renderContent=_this$props.renderContent,className=_this$props.className,placement=_this$props.placement,flipBehavior=_this$props.flipBehavior,labelPosition=_this$props.labelPosition,showInlineLabel=_this$props.showInlineLabel,icon=_this.state.icon,tooltipProps={id:id,content:renderContent?renderContent():React.createElement(TooltipContent,{title:title,text:text,href:href,link:link,translator:translator}),placement:placement,trigger:"manual",hideOnClick:!1,flipBehavior:flipBehavior},classes=cx(styles.tooltipIcon,{[styles[labelPosition]]:!showInlineLabel},className);return React.createElement(Tooltip,_extends({},tooltipProps,{onCreate:tooltip=>{_this.tooltip=tooltip}}),React.createElement("button",_extends({ref:_this.iconRef,type:"button",onClick:_this.toggleTooltip,className:classes},_this.getAccessibilityProperties(translator)),React.createElement(Icon,{icon:icon,"aria-hidden":"true",size:"large"})))})),_this.state={icon:_this.getClosedIcon(props.icon)},_this.iconRef=React.createRef(),_this}return _createClass(TooltipIcon,[{key:"componentDidMount",value:function(){document.addEventListener("mousedown",this.handleClickOutside)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("mousedown",this.handleClickOutside)}},{key:"render",value:function(){return React.createElement(ContextConsumer,{contexts:[TranslatorContext]},this.renderComponent)}}]),TooltipIcon}(React.Component);_defineProperty(TooltipIcon,"propTypes",{id:PropTypes.string.isRequired,icon:PropTypes.string,...tooltipBaseProps,placement:PropTypes.oneOf(placementOptions),className:PropTypes.string,messageProps:PropTypes.shape({showTooltip:intlMessageShape}),flipBehavior:PropTypes.array,labelPosition:PropTypes.oneOf(["top","left"]),showInlineLabel:PropTypes.bool}),_defineProperty(TooltipIcon,"defaultProps",{icon:"gw-help"}),TooltipIcon.__docgenInfo={description:"@typedef {typeof TooltipIcon.propTypes} TooltipIconPropTypes\n@extends React.Component<PropTypes.InferProps<TooltipIconPropTypes>>",methods:[{name:"handleClickOutside",docblock:"Handles clicking outside\n@param {Event} event",modifiers:[],params:[{name:"event",description:null,type:{name:"Event"},optional:!1}],returns:null,description:"Handles clicking outside"},{name:"getOpenIcon",docblock:"getOpenIcon\n@param {string} icon\n@returns {string}",modifiers:[],params:[{name:"icon",description:null,type:{name:"string"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"getOpenIcon"},{name:"getClosedIcon",docblock:"getClosedIcon\n@param {string} icon\n@returns {string}",modifiers:[],params:[{name:"icon",description:null,type:{name:"string"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"getClosedIcon"},{name:"setClosedIcon",docblock:null,modifiers:["async"],params:[],returns:null},{name:"setOpenIcon",docblock:null,modifiers:["async"],params:[],returns:null},{name:"toggleTooltip",docblock:"toggleTooltip\n@param {Event} evt",modifiers:[],params:[{name:"evt",description:null,type:{name:"Event"},optional:!1}],returns:null,description:"toggleTooltip"},{name:"hideTooltip",docblock:null,modifiers:[],params:[],returns:null},{name:"getAccessibilityProperties",docblock:"Returns accessibility properties for tooltip icon button\n\n@param {Function} translator function used to translate the message\n@returns {object} object containing accessibility properties",modifiers:[],params:[{name:"translator",description:"function used to translate the message",type:{name:"Function"},optional:!1}],returns:{description:"object containing accessibility properties",type:{name:"object"}},description:"Returns accessibility properties for tooltip icon button"},{name:"renderComponent",docblock:"Render tooltip icon\n\n@param {Function} translator function to translate strings\n@returns {React.ReactElement} tooltip icon",modifiers:[],params:[{name:"translator",description:"function to translate strings",type:{name:"Function"},optional:!1}],returns:{description:"tooltip icon",type:{name:"React.ReactElement"}},description:"Render tooltip icon"}],displayName:"TooltipIcon",props:{icon:{defaultValue:{value:"'gw-help'",computed:!1},type:{name:"string"},required:!1,description:"Icon to be displayed"},id:{type:{name:"string"},required:!0,description:"Used to identify the component. Referenced to find it in the document tree"},placement:{type:{name:"enum",computed:!0,value:"placementOptions"},required:!1,description:"Positions of the tooltip relative to its reference element (icon)"},className:{type:{name:"string"},required:!1,description:"Additional class names for component."},messageProps:{type:{name:"shape",value:{showTooltip:{name:"custom",raw:"intlMessageShape",required:!1}}},required:!1,description:"Message props(error message/aria-label)"},flipBehavior:{type:{name:"array"},required:!1,description:"Determines the order of flipping of tooltip, i.e. which placements to prefer if a certain placement cannot be used"},labelPosition:{type:{name:"enum",value:[{value:"'top'",computed:!1},{value:"'left'",computed:!1}]},required:!1,description:"Information from Field Component to the Tooltip Icon about the whole label position"},showInlineLabel:{type:{name:"bool"},required:!1,description:"Information from Field Component. If true, label is displayed inline"}},composes:["@jutro/prop-types"]},TooltipIcon.__docgenInfo={componentName:"TooltipIcon",packageName:"@jutro/components",description:"",displayName:"TooltipIcon",methods:[{name:"handleClickOutside",docblock:"Handles clicking outside\n@param {Event} event",modifiers:[],params:[{name:"event",description:null,type:{name:"Event"},optional:!1}],returns:null,description:"Handles clicking outside"},{name:"getOpenIcon",docblock:"getOpenIcon\n@param {string} icon\n@returns {string}",modifiers:[],params:[{name:"icon",description:null,type:{name:"string"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"getOpenIcon"},{name:"getClosedIcon",docblock:"getClosedIcon\n@param {string} icon\n@returns {string}",modifiers:[],params:[{name:"icon",description:null,type:{name:"string"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"getClosedIcon"},{name:"setClosedIcon",docblock:null,modifiers:["async"],params:[],returns:null},{name:"setOpenIcon",docblock:null,modifiers:["async"],params:[],returns:null},{name:"toggleTooltip",docblock:"toggleTooltip\n@param {Event} evt",modifiers:[],params:[{name:"evt",description:null,type:{name:"Event"},optional:!1}],returns:null,description:"toggleTooltip"},{name:"hideTooltip",docblock:null,modifiers:[],params:[],returns:null},{name:"getAccessibilityProperties",docblock:"Returns accessibility properties for tooltip icon button\n\n@param {Function} translator function used to translate the message\n@returns {object} object containing accessibility properties",modifiers:[],params:[{name:"translator",description:"function used to translate the message",type:{name:"Function"},optional:!1}],returns:{description:"object containing accessibility properties",type:{name:"object"}},description:"Returns accessibility properties for tooltip icon button"},{name:"renderComponent",docblock:"Render tooltip icon\n\n@param {Function} translator function to translate strings\n@returns {React.ReactElement} tooltip icon",modifiers:[],params:[{name:"translator",description:"function to translate strings",type:{name:"Function"},optional:!1}],returns:{description:"tooltip icon",type:{name:"React.ReactElement"}},description:"Render tooltip icon"}],actualName:"TooltipIcon",props:{id:{type:{name:"string"},required:!0,description:"Used to identify the component. Referenced to find it in the document tree"},icon:{type:{name:"string"},required:!1,description:"Icon to be displayed",defaultValue:{value:"'gw-help'",computed:!1}},placement:{type:{name:"enum",computed:!0,value:"placementOptions"},required:!1,description:"Positions of the tooltip relative to its reference element (icon)"},className:{type:{name:"string"},required:!1,description:"Additional class names for component."},messageProps:{type:{name:"shape",value:{showTooltip:{name:"union",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"},flipBehavior:{type:{name:"array"},required:!1,description:"Determines the order of flipping of tooltip, i.e. which placements to prefer if a certain placement cannot be used"},labelPosition:{type:{name:"enum",value:[{value:"'top'",computed:!1},{value:"'left'",computed:!1}]},required:!1,description:"Information from Field Component to the Tooltip Icon about the whole label position"},showInlineLabel:{type:{name:"bool"},required:!1,description:"Information from Field Component. If true, label is displayed inline"}},composes:["@jutro/prop-types"]};