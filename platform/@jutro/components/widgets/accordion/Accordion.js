import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{Component}from"react";import PropTypes from"prop-types";import _ from"lodash";import cx from"classnames";import{ComponentPropTypes}from"@jutro/prop-types";import{AccordionCard}from"./AccordionCard";import styles from"./Accordion.module.css";import{AccordionContext}from"./AccordionContext";export let Accordion=function(_Component){_inherits(Accordion,Component);var _super=_createSuper(Accordion);function Accordion(props){var _props$accordionState,_this;_classCallCheck(this,Accordion),_this=_super.call(this,props),_defineProperty(_assertThisInitialized(_this),"isAccordionOpen",(accordionId=>_this.state.openedAccordions.indexOf(accordionId)>=0)),_defineProperty(_assertThisInitialized(_this),"toggleAccordionOpen",(accordionId=>{_this.props.disabled||_this.setState((prevState=>{const newOpenedAccordions=prevState.openedAccordions.slice(),index=newOpenedAccordions.indexOf(accordionId);return index>=0?newOpenedAccordions.splice(index,1):_this.props.closeOthers&&!_this.props.accordionStates?newOpenedAccordions[0]=accordionId:newOpenedAccordions.push(accordionId),prevState.stateChangeCallBack(newOpenedAccordions),{openedAccordions:newOpenedAccordions}}))}));const useStates=null!==(_props$accordionState=props.accordionStates)&&void 0!==_props$accordionState&&_props$accordionState.length?props.accordionStates:void 0,openedAccordions=useStates||props.defaultOpenedId?useStates||[props.defaultOpenedId]:[],stateChangeCallBack=props.onUpdateAccordionStates;return _this.state={openedAccordions:openedAccordions,stateChangeCallBack:stateChangeCallBack},_this}return _createClass(Accordion,[{key:"UNSAFE_componentWillReceiveProps",value:function(nextProps){const _this$props=this.props,closeOthers=_this$props.closeOthers,accordionStates=_this$props.accordionStates;if(nextProps.accordionStates&&nextProps.accordionStates!==accordionStates)this.setState({openedAccordions:nextProps.accordionStates});else if(!accordionStates&&!closeOthers&&nextProps.closeOthers){const openedAccordions=this.state.openedAccordions,lastOpenedAccordion=openedAccordions.length-1,newOpenedAccordions=lastOpenedAccordion>=0?[openedAccordions[lastOpenedAccordion]]:[];this.setState({openedAccordions:newOpenedAccordions})}}},{key:"render",value:function(){const _this$props2=this.props,id=_this$props2.id,className=_this$props2.className,children=_this$props2.children,onUpdateAccordionStates=_this$props2.onUpdateAccordionStates,showFrame=_this$props2.showFrame,boldFont=_this$props2.boldFont,disabled=_this$props2.disabled,context={isAccordionOpen:this.isAccordionOpen,toggleAccordionOpen:this.toggleAccordionOpen,stateCallBack:onUpdateAccordionStates,showFrame:showFrame};return React.createElement("div",_extends({className:cx(styles.accordion,{[styles.normalFont]:!boldFont,[styles.accordionFrame]:showFrame,[styles.disabled]:disabled},className),"aria-disabled":disabled,"aria-haspopup":"true","aria-expanded":this.isAccordionOpen},id?{"data-testid":id,id:id}:{}),React.createElement(AccordionContext.Provider,{value:context},children))}}]),Accordion}();_defineProperty(Accordion,"propTypes",{id:PropTypes.string,accordionStates:PropTypes.array,boldFont:PropTypes.bool,className:PropTypes.string,children:ComponentPropTypes.childOfComponentType(AccordionCard),closeOthers:PropTypes.bool,defaultOpenedId:PropTypes.string,disabled:PropTypes.bool,showFrame:PropTypes.bool,onUpdateAccordionStates:PropTypes.func}),_defineProperty(Accordion,"defaultProps",{closeOthers:!0,onUpdateAccordionStates:_.noop,showFrame:!0,boldFont:!0,disabled:!1}),Accordion.__docgenInfo={description:"The `Accordion` component is used to surround a set of `Card` components so that the user can open or close them.\n\n@typedef {typeof Accordion.propTypes} AccordionPropTypes\n@extends Component<PropTypes.InferProps<AccordionPropTypes>>\n\n@metadataType container",methods:[{name:"isAccordionOpen",docblock:"Returns whether or not the `Accordion` with the given id is expanded by looking to see if that id is in the\nlist of `openedAccordions`.\n\n@param {string} accordionId - The id of the `Accordion` whose expanded state is desired\n@returns {boolean} - True if the `Accordion` is expanded, false otherwise",modifiers:[],params:[{name:"accordionId",description:"The id of the `Accordion` whose expanded state is desired",type:{name:"string"},optional:!1}],returns:{description:"True if the `Accordion` is expanded, false otherwise",type:{name:"boolean"}},description:"Returns whether or not the `Accordion` with the given id is expanded by looking to see if that id is in the\nlist of `openedAccordions`."},{name:"toggleAccordionOpen",docblock:"Toggles the expand state of the `Accordion` with the given id.  First, look up to see if the `openedAccordions`\nlist contains the `accordionId`.  If it does, then remove it otherwise add it to the list, either at the end\nwhen `closeOthers` is `false` or at the first position when `closeOthers` is `true`.\n\n@param {string} accordionId - The id of the `Accordion` being toggled",modifiers:[],params:[{name:"accordionId",description:"The id of the `Accordion` being toggled",type:{name:"string"},optional:!1}],returns:null,description:"Toggles the expand state of the `Accordion` with the given id.  First, look up to see if the `openedAccordions`\nlist contains the `accordionId`.  If it does, then remove it otherwise add it to the list, either at the end\nwhen `closeOthers` is `false` or at the first position when `closeOthers` is `true`."}],displayName:"Accordion",props:{closeOthers:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Optional flag indicating whether other accordions should be collapsed when this one is expanded"},onUpdateAccordionStates:{defaultValue:{value:"_.noop",computed:!0},type:{name:"func"},required:!1,description:"A callback function for querying the list of expanded accordions"},showFrame:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Shows the accordion borders when true, set to `true` by default"},boldFont:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Changes the font weight of the accordion header, set to `true` by default (bold)"},disabled:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Property to make accordion disabled"},id:{type:{name:"string"},required:!1,description:"Used to identify accordion"},accordionStates:{type:{name:"array"},required:!1,description:"An array containing the expanded accordion ids"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},children:{type:{name:"custom",raw:"ComponentPropTypes.childOfComponentType(AccordionCard)"},required:!1,description:"The children elements to render inside this component"},defaultOpenedId:{type:{name:"string"},required:!1,description:"The optional id of the accordion to be opened by default"}}},Accordion.__docgenInfo={componentName:"Accordion",packageName:"@jutro/components",description:"The `Accordion` component is used to surround a set of `Card` components so that the user can open or close them.",displayName:"Accordion",methods:[{name:"isAccordionOpen",docblock:"Returns whether or not the `Accordion` with the given id is expanded by looking to see if that id is in the\nlist of `openedAccordions`.\n\n@param {string} accordionId - The id of the `Accordion` whose expanded state is desired\n@returns {boolean} - True if the `Accordion` is expanded, false otherwise",modifiers:[],params:[{name:"accordionId",description:"The id of the `Accordion` whose expanded state is desired",type:{name:"string"},optional:!1}],returns:{description:"True if the `Accordion` is expanded, false otherwise",type:{name:"boolean"}},description:"Returns whether or not the `Accordion` with the given id is expanded by looking to see if that id is in the\nlist of `openedAccordions`."},{name:"toggleAccordionOpen",docblock:"Toggles the expand state of the `Accordion` with the given id.  First, look up to see if the `openedAccordions`\nlist contains the `accordionId`.  If it does, then remove it otherwise add it to the list, either at the end\nwhen `closeOthers` is `false` or at the first position when `closeOthers` is `true`.\n\n@param {string} accordionId - The id of the `Accordion` being toggled",modifiers:[],params:[{name:"accordionId",description:"The id of the `Accordion` being toggled",type:{name:"string"},optional:!1}],returns:null,description:"Toggles the expand state of the `Accordion` with the given id.  First, look up to see if the `openedAccordions`\nlist contains the `accordionId`.  If it does, then remove it otherwise add it to the list, either at the end\nwhen `closeOthers` is `false` or at the first position when `closeOthers` is `true`."}],actualName:"Accordion",metadataType:"container",props:{id:{type:{name:"string"},required:!1,description:"Used to identify accordion"},accordionStates:{type:{name:"array"},required:!1,description:"An array containing the expanded accordion ids"},boldFont:{type:{name:"bool"},required:!1,description:"Changes the font weight of the accordion header, set to `true` by default (bold)",defaultValue:{value:"true",computed:!1}},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},children:{type:{name:"custom",raw:"ComponentPropTypes.childOfComponentType(AccordionCard)"},required:!1,description:"The children elements to render inside this component"},closeOthers:{type:{name:"bool"},required:!1,description:"Optional flag indicating whether other accordions should be collapsed when this one is expanded",defaultValue:{value:"true",computed:!1}},defaultOpenedId:{type:{name:"string"},required:!1,description:"The optional id of the accordion to be opened by default"},disabled:{type:{name:"bool"},required:!1,description:"Property to make accordion disabled",defaultValue:{value:"false",computed:!1}},showFrame:{type:{name:"bool"},required:!1,description:"Shows the accordion borders when true, set to `true` by default",defaultValue:{value:"true",computed:!1}},onUpdateAccordionStates:{type:{name:"func"},required:!1,description:"A callback function for querying the list of expanded accordions",defaultValue:{value:"_.noop",computed:!0}}}};