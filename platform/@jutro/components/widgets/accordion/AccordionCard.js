import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{PureComponent}from"react";import PropTypes from"prop-types";import cx from"classnames";import{warning}from"@jutro/logger";import{uniqueInnerId,ContextConsumer}from"@jutro/platform";import{intlMessageShape}from"@jutro/prop-types";import{TranslatorContext}from"@jutro/locale";import styles from"./Accordion.module.css";import{Collapse}from"../collapse/Collapse";import{AccordionContext}from"./AccordionContext";import{getKeyPressHandler}from"../../accessibility/getKeyPressHandler";import{AccordionCardHeader}from"./AccordionCardHeader";export let AccordionCard=function(_PureComponent){_inherits(AccordionCard,PureComponent);var _super=_createSuper(AccordionCard);function AccordionCard(...args){var _this;return _classCallCheck(this,AccordionCard),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"translator",_this.context),_defineProperty(_assertThisInitialized(_this),"state",{focused:!1}),_defineProperty(_assertThisInitialized(_this),"toggleFunc",(onToggleOpen=>{const id=_this.props.id;onToggleOpen?onToggleOpen(id):warning(`The Card with id='${id}' was clicked but does not have an 'onToggleOpen' function`)})),_defineProperty(_assertThisInitialized(_this),"getHeadingAccessibilityProperties",(isOpen=>({"aria-controls":uniqueInnerId(_this.props.id,"contentId").contentId,"aria-expanded":isOpen}))),_defineProperty(_assertThisInitialized(_this),"getCardContentAccessibilityProperties",(()=>({"aria-live":"assertive"}))),_defineProperty(_assertThisInitialized(_this),"handleClick",((evt,toggleAccordionOpen)=>{_this.toggleFunc(toggleAccordionOpen),evt.preventDefault()})),_defineProperty(_assertThisInitialized(_this),"handleFocus",(()=>{_this.setState({focused:!0})})),_defineProperty(_assertThisInitialized(_this),"handleBlur",(()=>{_this.setState({focused:!1})})),_defineProperty(_assertThisInitialized(_this),"renderAccordionCard",(context=>{const _this$props=_this.props,id=_this$props.id,className=_this$props.className,collapseClassName=_this$props.collapseClassName,cardBodyClassName=_this$props.cardBodyClassName,cardHeadingClassName=_this$props.cardHeadingClassName,cardTitleClassName=_this$props.cardTitleClassName,errorState=_this$props.errorState,isCollapsible=_this$props.isCollapsible,renderHeader=_this$props.renderHeader,chevron=_this$props.chevron,chevronAlignment=_this$props.chevronAlignment,title=_this$props.title,isAccordionOpen=context.isAccordionOpen,toggleAccordionOpen=context.toggleAccordionOpen,showFrame=context.showFrame,_uniqueInnerId2=uniqueInnerId(id,"headingId","contentId"),headingId=_uniqueInnerId2.headingId,contentId=_uniqueInnerId2.contentId,isOpen=isAccordionOpen(id),accordionCardClass=cx({[styles.accordionFrame]:showFrame,isOpen:isOpen},className),accordionTitleClass=cx(styles.cardTitle,cardTitleClassName,{isOpen:isOpen,[styles.headerFocused]:_this.state.focused,[styles.headerError]:errorState,[styles.accordionToggle]:isCollapsible}),cardHeadingClassNames=cx(styles.cardHeading,cardHeadingClassName),cardBodyClassNames=cx(styles.cardBody,cardBodyClassName),collapsibleHeadingProps={onClick:evt=>{evt.detail>0&&_this.handleClick(evt,toggleAccordionOpen)},onKeyPress:getKeyPressHandler((evt=>_this.handleClick(evt,toggleAccordionOpen)))};return React.createElement("div",{id:id,className:accordionCardClass},React.createElement("div",_extends({id:headingId,className:cardHeadingClassNames,onFocus:_this.handleFocus,onBlur:_this.handleBlur,role:"button",tabIndex:"0"},_this.getHeadingAccessibilityProperties(isOpen),isCollapsible&&collapsibleHeadingProps),React.createElement("div",{className:accordionTitleClass},renderHeader?renderHeader(isOpen,id,styles.header):React.createElement(AccordionCardHeader,{isOpen:isOpen,chevron:chevron,chevronAlignment:chevronAlignment,errorState:errorState,title:title,isCollapsible:isCollapsible}))),React.createElement(Collapse,_extends({id:contentId,isOpen:isOpen,className:collapseClassName},_this.getCardContentAccessibilityProperties()),React.createElement("div",{className:cardBodyClassNames},_this.renderBody())))})),_this}return _createClass(AccordionCard,[{key:"renderBody",value:function(){return this.props.children}},{key:"render",value:function(){return React.createElement(ContextConsumer,{contexts:[AccordionContext]},(accordion=>this.renderAccordionCard(accordion)))}}]),AccordionCard}();_defineProperty(AccordionCard,"propTypes",{id:PropTypes.string.isRequired,chevron:PropTypes.bool,chevronAlignment:PropTypes.oneOf(["left","right"]),className:PropTypes.string,collapseClassName:PropTypes.string,cardBodyClassName:PropTypes.string,cardHeadingClassName:PropTypes.string,children:PropTypes.node,errorState:PropTypes.bool,title:intlMessageShape,renderHeader:PropTypes.func,isCollapsible:PropTypes.bool}),_defineProperty(AccordionCard,"defaultProps",{chevron:!1,chevronAlignment:"left",errorState:!1,isCollapsible:!0}),_defineProperty(AccordionCard,"contextType",TranslatorContext),AccordionCard.__docgenInfo={description:"The `AccordionCard` component offers Card-like behavior inside an `Accordion`. It accepts\nmost of the same properties as Card (except 'isOpen' and 'onToggleOpen' which is managed\nby the containing Accordion).\n\n@example\n<Accordion>\n    <AccordionCard id=\"card1\">Card 1 Content</AccordionCard>\n    <AccordionCard id=\"card2\">Card 2 Content</AccordionCard>\n</Accordion>\n\n@typedef {typeof AccordionCard.propTypes} AccordionCardPropTypes\n@extends PureComponent<PropTypes.InferProps<AccordionCardPropTypes>>\n\n@metadataType container",methods:[{name:"toggleFunc",docblock:null,modifiers:[],params:[{name:"onToggleOpen",type:null}],returns:null},{name:"getHeadingAccessibilityProperties",docblock:null,modifiers:[],params:[{name:"isOpen",type:null}],returns:null},{name:"getCardContentAccessibilityProperties",docblock:null,modifiers:[],params:[],returns:null},{name:"handleClick",docblock:null,modifiers:[],params:[{name:"evt",type:null},{name:"toggleAccordionOpen",type:null}],returns:null},{name:"handleFocus",docblock:null,modifiers:[],params:[],returns:null},{name:"handleBlur",docblock:null,modifiers:[],params:[],returns:null},{name:"renderBody",docblock:null,modifiers:[],params:[],returns:null},{name:"renderAccordionCard",docblock:null,modifiers:[],params:[{name:"context",type:null}],returns:null}],displayName:"AccordionCard",props:{chevron:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Show chevron in header"},chevronAlignment:{defaultValue:{value:"'left'",computed:!1},type:{name:"enum",value:[{value:"'left'",computed:!1},{value:"'right'",computed:!1}]},required:!1,description:"Position of chevron"},errorState:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Indicates if there is an error within the card contents"},isCollapsible:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Indicates if the card should be collapsible"},id:{type:{name:"string"},required:!0,description:"Used to identify header."},className:{type:{name:"string"},required:!1,description:"Additional styles for whole card"},collapseClassName:{type:{name:"string"},required:!1,description:"Additional styles for Collapse"},cardBodyClassName:{type:{name:"string"},required:!1,description:"Additional styles for card body inside Collapse"},cardHeadingClassName:{type:{name:"string"},required:!1,description:"Additional styles for card header"},children:{type:{name:"node"},required:!1,description:""},title:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"property to render title for header"},renderHeader:{type:{name:"func"},required:!1,description:"Callback to render header to be displayed in the Accordion"}}},AccordionCard.__docgenInfo={componentName:"AccordionCard",packageName:"@jutro/components",description:"The `AccordionCard` component offers Card-like behavior inside an `Accordion`. It accepts\nmost of the same properties as Card (except 'isOpen' and 'onToggleOpen' which is managed\nby the containing Accordion).",displayName:"AccordionCard",methods:[{name:"toggleFunc",docblock:null,modifiers:[],params:[{name:"onToggleOpen",optional:void 0,type:null}],returns:null},{name:"getHeadingAccessibilityProperties",docblock:null,modifiers:[],params:[{name:"isOpen",optional:void 0,type:null}],returns:null},{name:"getCardContentAccessibilityProperties",docblock:null,modifiers:[],params:[],returns:null},{name:"handleClick",docblock:null,modifiers:[],params:[{name:"evt",optional:void 0,type:null},{name:"toggleAccordionOpen",optional:void 0,type:null}],returns:null},{name:"handleFocus",docblock:null,modifiers:[],params:[],returns:null},{name:"handleBlur",docblock:null,modifiers:[],params:[],returns:null},{name:"renderBody",docblock:null,modifiers:[],params:[],returns:null},{name:"renderAccordionCard",docblock:null,modifiers:[],params:[{name:"context",optional:void 0,type:null}],returns:null}],actualName:"AccordionCard",metadataType:"container",props:{id:{type:{name:"string"},required:!0,description:"Used to identify header."},chevron:{type:{name:"bool"},required:!1,description:"Show chevron in header",defaultValue:{value:"false",computed:!1}},chevronAlignment:{type:{name:"enum",value:[{value:"'left'",computed:!1},{value:"'right'",computed:!1}]},required:!1,description:"Position of chevron",defaultValue:{value:"'left'",computed:!1}},className:{type:{name:"string"},required:!1,description:"Additional styles for whole card"},collapseClassName:{type:{name:"string"},required:!1,description:"Additional styles for Collapse"},cardBodyClassName:{type:{name:"string"},required:!1,description:"Additional styles for card body inside Collapse"},cardHeadingClassName:{type:{name:"string"},required:!1,description:"Additional styles for card header"},children:{type:{name:"node"},required:!1,description:""},errorState:{type:{name:"bool"},required:!1,description:"Indicates if there is an error within the card contents",defaultValue:{value:"false",computed:!1}},title:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"property to render title for header"},renderHeader:{type:{name:"func"},required:!1,description:"Callback to render header to be displayed in the Accordion"},isCollapsible:{type:{name:"bool"},required:!1,description:"Indicates if the card should be collapsible",defaultValue:{value:"true",computed:!1}}}};