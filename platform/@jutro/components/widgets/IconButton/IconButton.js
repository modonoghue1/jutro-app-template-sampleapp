import _extends from"@babel/runtime-corejs3/helpers/extends";import React,{useContext,useRef}from"react";import PropTypes from"prop-types";import{TranslatorContext}from"@jutro/locale";import{intlMessageShape,tooltipShape}from"@jutro/prop-types";import cx from"classnames";import{uniqueInnerId,useKeyActive}from"@jutro/platform";import{Icon}from"../Icon/Icon";import{Tooltip}from"../Tooltip/Tooltip";import{TooltipContent}from"../Tooltip/TooltipContent";import{messages}from"./IconButton.messages";import styles from"./IconButton.module.css";export const availableIconColors=["light","neutral","dark"];const iconButtonPropTypes={id:PropTypes.string,className:PropTypes.string,iconClassName:PropTypes.string,onClick:PropTypes.func,onMouseDown:PropTypes.func,onKeyDown:PropTypes.func,onKeyPress:PropTypes.func,ariaLabel:intlMessageShape,icon:PropTypes.string.isRequired,iconColor:PropTypes.oneOf(availableIconColors),disabled:PropTypes.bool,tooltip:tooltipShape};export const IconButton=React.forwardRef((({onClick:onClick,onKeyPress:onKeyPress,onKeyDown:onKeyDown,onMouseDown:onMouseDown,className:className,iconClassName:iconClassName,ariaLabel:ariaLabel,disabled:disabled,icon:icon,iconColor:iconColor,dangerouslySetInnerHTML:dangerouslySetInnerHTML,tooltip:tooltip,...rest},ref)=>{const translator=useContext(TranslatorContext),newRef=ref||useRef(),isActiveKeyPressed=useKeyActive(newRef),iconColorClass=styles[iconColor],classes=cx({[styles.activeKeypress]:isActiveKeyPressed},{[styles.padding]:!icon.startsWith("gw-")&&!icon.startsWith("cust-")},styles.iconButton,iconColorClass,className),iconClasses=cx(styles.icon,iconColorClass,iconClassName),buttonElement=React.createElement("button",_extends({type:"button",className:classes,onClick:onClick,onKeyPress:onKeyPress,onKeyDown:onKeyDown,onMouseDown:onMouseDown,"aria-label":translator(ariaLabel||messages.iconButtonText),tabIndex:"0",disabled:disabled,ref:newRef},rest),React.createElement(Icon,{className:iconClasses,icon:icon,"aria-hidden":"true"}));if(tooltip&&(tooltip.title||tooltip.text||tooltip.renderContent)){const text=tooltip.text,title=tooltip.title,link=tooltip.link,href=tooltip.href,renderContent=tooltip.renderContent,placement=tooltip.placement,content=renderContent?renderContent():React.createElement(TooltipContent,{title:title,text:text,href:href,link:link,translator:translator}),tooltipProps={id:uniqueInnerId("icon-button-tooltip","tooltipId").tooltipId,content:content,placement:placement,trigger:"mouseenter focus"};return React.createElement(Tooltip,tooltipProps,buttonElement)}return buttonElement}));IconButton.displayName="IconButton",IconButton.propTypes=iconButtonPropTypes,IconButton.defaultProps={disabled:!1,iconColor:"dark"},IconButton.__docgenInfo={description:"@type {React.ForwardRefRenderFunction<PropTypes.InferProps<typeof iconButtonPropTypes>>}\n@metadataType action",methods:[],displayName:"IconButton",props:{disabled:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If `true`, this button is disabled"},iconColor:{defaultValue:{value:"'dark'",computed:!1},type:{name:"enum",value:[{value:"'light'",computed:!1},{value:"'neutral'",computed:!1},{value:"'dark'",computed:!1}]},required:!1,description:"The color of the icon"},id:{type:{name:"string"},required:!1,description:"Used to identify this component."},className:{type:{name:"string"},required:!1,description:"Additional class names for component."},iconClassName:{type:{name:"string"},required:!1,description:"Additional class names for icon."},onClick:{type:{name:"func"},required:!1,description:"On click handler"},onMouseDown:{type:{name:"func"},required:!1,description:"On mouse down handler"},onKeyDown:{type:{name:"func"},required:!1,description:"On key down handler"},onKeyPress:{type:{name:"func"},required:!1,description:"On key press handler"},ariaLabel:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Aria label text"},icon:{type:{name:"string"},required:!0,description:"icon name"},tooltip:{type:{name:"custom",raw:"tooltipShape"},required:!1,description:"IconButton tooltip"}}},IconButton.__docgenInfo={componentName:"IconButton",packageName:"@jutro/components",description:"",displayName:"IconButton",methods:[],actualName:"IconButton",metadataType:"action",props:{id:{type:{name:"string"},required:!1,description:"Used to identify this component."},className:{type:{name:"string"},required:!1,description:"Additional class names for component."},iconClassName:{type:{name:"string"},required:!1,description:"Additional class names for icon."},onClick:{type:{name:"func"},required:!1,description:"On click handler"},onMouseDown:{type:{name:"func"},required:!1,description:"On mouse down handler"},onKeyDown:{type:{name:"func"},required:!1,description:"On key down handler"},onKeyPress:{type:{name:"func"},required:!1,description:"On key press handler"},ariaLabel:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Aria label text"},icon:{type:{name:"string"},required:!0,description:"icon name"},iconColor:{type:{name:"enum",value:[{value:"'light'",computed:!1},{value:"'neutral'",computed:!1},{value:"'dark'",computed:!1}]},required:!1,description:"The color of the icon",defaultValue:{value:"'dark'",computed:!1}},disabled:{type:{name:"bool"},required:!1,description:"If `true`, this button is disabled",defaultValue:{value:"false",computed:!1}},tooltip:{type:{name:"custom",raw:"tooltipShape"},required:!1,description:"IconButton tooltip"}}};