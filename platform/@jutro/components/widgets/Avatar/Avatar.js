import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useContext}from"react";import PropTypes from"prop-types";import cx from"classnames";import _ from"lodash";import{TranslatorContext}from"@jutro/locale";import{intlMessageShape}from"@jutro/prop-types";import{getMessageProp}from"@jutro/platform";import{useAuth}from"@jutro/auth";import styles from"./Avatar.module.css";import{messages}from"./Avatar.messages";import{Icon}from"../Icon/Icon";const avatarPropTypes={username:PropTypes.string,icon:PropTypes.string,onClick:PropTypes.func,className:PropTypes.string,imageSource:PropTypes.string,messageProps:PropTypes.shape({userAvatar:intlMessageShape}),useAuthInfo:PropTypes.bool,showImageBorder:PropTypes.bool};export const Avatar=React.forwardRef(((props,ref)=>{const username=props.username,icon=props.icon,onClick=props.onClick,className=props.className,imageSource=props.imageSource,showImageBorder=props.showImageBorder,messageProps=props.messageProps,useAuthInfo=props.useAuthInfo,other=(props.dangerouslySetInnerHTML,_objectWithoutProperties(props,["username","icon","onClick","className","imageSource","showImageBorder","messageProps","useAuthInfo","dangerouslySetInnerHTML"])),translator=useContext(TranslatorContext),auth=useAuth(),userAvatar=getMessageProp("userAvatar",messageProps,messages);function getUsername(){return useAuthInfo?_.get(auth,"userInfo.name",username):username}const classes=cx(styles.avatar,{[styles.image]:imageSource,[styles.userImage]:imageSource,[styles.border]:imageSource&&showImageBorder,[styles.withBackground]:!imageSource},className),title=getUsername()||translator(userAvatar);return React.createElement("button",_extends({ref:ref,type:"button",className:classes,onClick:onClick,"aria-label":title,title:ref?null:title},other),imageSource?React.createElement("img",{src:imageSource,className:styles.userImage,alt:username||translator(userAvatar)}):(name=>{if(!name)return null;const names=name.trim().split(/\s+/),_names=_slicedToArray(names,2),_names$=_names[0],firstName=void 0===_names$?"":_names$,_names$2=_names[1],secondName=void 0===_names$2?"":_names$2;return`${firstName[0]||""}${secondName[0]||""}`})(getUsername())||icon&&React.createElement(Icon,{icon:icon,"aria-label":username||translator(userAvatar),role:"img"}),React.createElement("div",{className:styles.overlay}))}));Avatar.propTypes=avatarPropTypes,Avatar.defaultProps={useAuthInfo:!1,icon:"gw-person"},Avatar.displayName="Avatar",Avatar.__docgenInfo={description:'Displays a "user avatar" element with an image, icon, or initials.\n\n@type {React.ForwardRefExoticComponent<PropTypes.InferProps<typeof avatarPropTypes>>}\n\n@metadataType action',methods:[],displayName:"Avatar",props:{useAuthInfo:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true, display user information based on Okta instead of passed props"},icon:{defaultValue:{value:"'gw-person'",computed:!1},type:{name:"string"},required:!1,description:"Icon name from the material icons list to be displayed if no image or initials present"},username:{type:{name:"string"},required:!1,description:"Users first and last names, used as component alt text as well\nas to display initials if no image selected"},onClick:{type:{name:"func"},required:!1,description:"On click event handler"},className:{type:{name:"string"},required:!1,description:"Additional component styling class name"},imageSource:{type:{name:"string"},required:!1,description:"Path to user image, preferentially shown before user initials or icon"},messageProps:{type:{name:"shape",value:{userAvatar:{name:"custom",raw:"intlMessageShape",description:"userAvatar message",required:!1}}},required:!1,description:"Message props(error message/aria-label)"},showImageBorder:{type:{name:"bool"},required:!1,description:"If true, border will be display"}}},Avatar.__docgenInfo={componentName:"Avatar",packageName:"@jutro/components",description:'Displays a "user avatar" element with an image, icon, or initials.',displayName:"Avatar",methods:[],actualName:"Avatar",metadataType:"action",props:{username:{type:{name:"string"},required:!1,description:"Users first and last names, used as component alt text as well\nas to display initials if no image selected"},icon:{type:{name:"string"},required:!1,description:"Icon name from the material icons list to be displayed if no image or initials present",defaultValue:{value:"'gw-person'",computed:!1}},onClick:{type:{name:"func"},required:!1,description:"On click event handler"},className:{type:{name:"string"},required:!1,description:"Additional component styling class name"},imageSource:{type:{name:"string"},required:!1,description:"Path to user image, preferentially shown before user initials or icon"},messageProps:{type:{name:"shape",value:{userAvatar:{name:"union",description:"userAvatar message",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"},useAuthInfo:{type:{name:"bool"},required:!1,description:"If true, display user information based on Okta instead of passed props",defaultValue:{value:"false",computed:!1}},showImageBorder:{type:{name:"bool"},required:!1,description:"If true, border will be display"}}};