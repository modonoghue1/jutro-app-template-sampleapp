import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{Component}from"react";import cx from"classnames";import PropTypes from"prop-types";import{intlMessageShape}from"@jutro/prop-types";import styles from"./InlineNotification.module.css";import{InlineNotificationContent}from"./InlineNotificationContent";const inlineTypes_WARNING="warning",inlineTypes_ERROR="error",inlineTypes_INFO="info",inlineTypes_SUCCESS="success";export let InlineNotification=function(_Component){_inherits(InlineNotification,Component);var _super=_createSuper(InlineNotification);function InlineNotification(...args){var _this;return _classCallCheck(this,InlineNotification),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"state",{open:!0}),_defineProperty(_assertThisInitialized(_this),"handleDismiss",(()=>{_this.props.onClosed&&_this.props.onClosed(),_this.setState({open:!1})})),_this}return _createClass(InlineNotification,[{key:"componentDidUpdate",value:function(prevProps){prevProps.type===this.props.type&&prevProps.message===this.props.message||this.setState({open:!0})}},{key:"render",value:function(){const open=this.state.open,_this$props=this.props,id=_this$props.id,className=_this$props.className,type=_this$props.type,isEmbeddedNotification=_this$props.isEmbeddedNotification,isDismissable=_this$props.isDismissable,messageProps=_this$props.messageProps,message=_this$props.message,classes=cx(styles.inlineNotification,open&&(type=>({[styles.inlineNotificationSuccess]:type===inlineTypes_SUCCESS,[styles.inlineNotificationInfo]:type===inlineTypes_INFO,[styles.inlineNotificationWarning]:type===inlineTypes_WARNING,[styles.inlineNotificationError]:type===inlineTypes_ERROR}))(type),className),ariaProps=isEmbeddedNotification?{}:{role:"alert","aria-hidden":!open};return React.createElement("div",_extends({id:id,className:classes},ariaProps),open&&React.createElement(InlineNotificationContent,{type:type,messageProps:messageProps,message:message,isEmbeddedNotification:isEmbeddedNotification,isDismissable:isDismissable,handleDismiss:this.handleDismiss}))}}]),InlineNotification}();_defineProperty(InlineNotification,"propTypes",{id:PropTypes.string.isRequired,className:PropTypes.string,message:intlMessageShape,type:PropTypes.oneOf([inlineTypes_SUCCESS,inlineTypes_INFO,inlineTypes_WARNING,inlineTypes_ERROR]),onClosed:PropTypes.func,isDismissable:PropTypes.bool,isEmbeddedNotification:PropTypes.bool,messageProps:PropTypes.shape({success:intlMessageShape,warning:intlMessageShape,info:intlMessageShape,error:intlMessageShape,dismissLabel:intlMessageShape})}),_defineProperty(InlineNotification,"defaultProps",{isDismissable:!0,type:inlineTypes_INFO,isEmbeddedNotification:!1}),InlineNotification.__docgenInfo={description:"Displays a message within the body of the page. You show it on event, and the user can dismiss it.\n\n@typedef {typeof InlineNotification.propTypes} InlineNotificationPropTypes\n@extends Component<PropTypes.InferProps<InlineNotificationPropTypes>>\n\n@metadataType element",methods:[{name:"handleDismiss",docblock:null,modifiers:[],params:[],returns:null}],displayName:"InlineNotification",props:{isDismissable:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"If true, the dismiss button appears with this component"},type:{defaultValue:{value:"'info'",computed:!1},type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'info'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1}]},required:!1,description:"Phrase allowing to set color and appearance of notification (success, warning, error, info)"},isEmbeddedNotification:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true, attributes 'aria-hidden' and 'role' will be added"},id:{type:{name:"string"},required:!0,description:"Component unique identifier"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},message:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Text to display on notification"},onClosed:{type:{name:"func"},required:!1,description:"Function called when the notification disappear"},messageProps:{type:{name:"shape",value:{success:{name:"custom",raw:"intlMessageShape",description:"prefix text for success type message",required:!1},warning:{name:"custom",raw:"intlMessageShape",description:"prefix text for warning type message",required:!1},info:{name:"custom",raw:"intlMessageShape",description:"prefix text for info type message",required:!1},error:{name:"custom",raw:"intlMessageShape",description:"prefix text for error type message",required:!1},dismissLabel:{name:"custom",raw:"intlMessageShape",description:"dismiss button aria-label",required:!1}}},required:!1,description:"Message props(error message/aria-label)"}}},InlineNotification.__docgenInfo={componentName:"InlineNotification",packageName:"@jutro/components",description:"Displays a message within the body of the page. You show it on event, and the user can dismiss it.",displayName:"InlineNotification",methods:[{name:"handleDismiss",docblock:null,modifiers:[],params:[],returns:null}],actualName:"InlineNotification",metadataType:"element",props:{id:{type:{name:"string"},required:!0,description:"Component unique identifier"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},message:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Text to display on notification"},type:{type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'info'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1}]},required:!1,description:"Phrase allowing to set color and appearance of notification (success, warning, error, info)",defaultValue:{value:"'info'",computed:!1}},onClosed:{type:{name:"func"},required:!1,description:"Function called when the notification disappear"},isDismissable:{type:{name:"bool"},required:!1,description:"If true, the dismiss button appears with this component",defaultValue:{value:"true",computed:!1}},isEmbeddedNotification:{type:{name:"bool"},required:!1,description:"If true, attributes 'aria-hidden' and 'role' will be added",defaultValue:{value:"false",computed:!1}},messageProps:{type:{name:"shape",value:{success:{name:"union",description:"prefix text for success type message",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},warning:{name:"union",description:"prefix text for warning type message",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},info:{name:"union",description:"prefix text for info type message",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},error:{name:"union",description:"prefix text for error type message",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},dismissLabel:{name:"union",description:"dismiss button aria-label",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"}}};