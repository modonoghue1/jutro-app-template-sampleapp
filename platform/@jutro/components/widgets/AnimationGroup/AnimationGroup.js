import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useMemo,useCallback}from"react";import PropTypes from"prop-types";import isFunction from"lodash/isFunction";import{CSSTransition,TransitionGroup}from"react-transition-group";import{log}from"@jutro/logger";import{resolveAnimationFromName,animationDelayDefault}from"../config/animationMap";import styles from"./animations.module.css";const animationGroupPropTypes={animation:PropTypes.oneOf(["expand","insert","highlight","reveal"]),className:PropTypes.string,children:PropTypes.node};export const AnimationGroup=props=>{const animation=props.animation,children=props.children,onEntered=(props.dangerouslySetInnerHTML,props.onEntered),other=_objectWithoutProperties(props,["animation","children","dangerouslySetInnerHTML","onEntered"]);let animationProps=useMemo((()=>{const animationConfig=resolveAnimationFromName(animation,!1);return isFunction(animationConfig)?animationConfig():animationConfig}),[animation]);const onEnteredCallback=useCallback(((node,isAppearing)=>{node.style={...node.style,height:"auto"},null==onEntered||onEntered(node,isAppearing)}),[onEntered]);animation&&!animationProps&&(log.warning(`Unable to find animation alias for '${animation}'. Using default properties.`),animationProps={classNames:animation,timeout:animationDelayDefault});const combinedProps={...animationProps,...other,onEntered:onEnteredCallback},classNames=combinedProps.classNames,enterClasses={enter:styles[`${classNames}_enter`],enterActive:styles[`${classNames}_enter_active`]},exitClasses={exit:styles[`${classNames}_exit`],exitActive:styles[`${classNames}_exit_active`]};let appearClasses;combinedProps.appear&&(appearClasses={appear:styles[`${classNames}_enter`],appearActive:styles[`${classNames}_enter_active`]}),combinedProps.classNames={...enterClasses,...exitClasses,...appearClasses};const transitionWrapper=combinedProps.transitionWrapper,groupProps=_objectWithoutProperties(combinedProps,["transitionWrapper"]);let transitionGroup;if(React.Children.count(children)>1){const childTransitions=React.Children.toArray(children).map(((child,index)=>React.createElement(CSSTransition,_extends({key:child.props.key||index},groupProps),child)));transitionGroup=React.createElement(TransitionGroup,null,childTransitions)}else transitionGroup=React.createElement(CSSTransition,groupProps,React.createElement("span",null,children));if(transitionWrapper){const wrapperClass=styles[transitionWrapper];return React.createElement("div",{className:wrapperClass},transitionGroup)}return transitionGroup};AnimationGroup.propTypes=animationGroupPropTypes,AnimationGroup.__docgenInfo={description:"Defines an Animation Group.\nThis wraps TransitionGroup/CSSTransition and provides support for animation aliases to define transition properties.\nThe animations are triggered when elements are added to or removed from the children of the animation group.\nFor the 'swap' type animations where you are replacing one element with another, each element requires a unique\n'key' to trigger the animation.\n\nProperties: {@link AnimationGroup.propTypes}\n\n@see https://github.com/reactjs/react-transition-group\n\n@example <AnimationGroup animation=\"reveal\">{ children to animate }</AnimationGroup>\n\n@type {React.FC<PropTypes.InferProps<typeof animationGroupPropTypes>>}",methods:[],displayName:"AnimationGroup",props:{animation:{type:{name:"enum",value:[{value:"'expand'",computed:!1},{value:"'insert'",computed:!1},{value:"'highlight'",computed:!1},{value:"'reveal'",computed:!1}]},required:!1,description:"Optional animation name/alias"},className:{type:{name:"string"},required:!1,description:"Optional css class(es) to add to the grid element"},children:{type:{name:"node"},required:!1,description:"Children, preferably 'Row'"}}},AnimationGroup.__docgenInfo={componentName:"AnimationGroup",packageName:"@jutro/components",description:"Defines an Animation Group.\nThis wraps TransitionGroup/CSSTransition and provides support for animation aliases to define transition properties.\nThe animations are triggered when elements are added to or removed from the children of the animation group.\nFor the 'swap' type animations where you are replacing one element with another, each element requires a unique\n'key' to trigger the animation.\n\nProperties: {@link AnimationGroup.propTypes}",displayName:"AnimationGroup",methods:[],actualName:"AnimationGroup",props:{animation:{type:{name:"enum",value:[{value:"'expand'",computed:!1},{value:"'insert'",computed:!1},{value:"'highlight'",computed:!1},{value:"'reveal'",computed:!1}]},required:!1,description:"Optional animation name/alias"},className:{type:{name:"string"},required:!1,description:"Optional css class(es) to add to the grid element"},children:{type:{name:"node"},required:!1,description:"Children, preferably 'Row'"}}};