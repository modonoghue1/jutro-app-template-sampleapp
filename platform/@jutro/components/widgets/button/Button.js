import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useContext,memo,useRef}from"react";import PropTypes from"prop-types";import cx from"classnames";import mapKeys from"lodash/mapKeys";import isString from"lodash/isString";import omit from"lodash/omit";import{TranslatorContext,useSafeTranslatedUrls}from"@jutro/locale";import{intlMessageShape}from"@jutro/prop-types";import{JUTRO_TOPICS}from"@jutro/events";import{useKeyActive}from"@jutro/platform";import{trackMethod}from"../../helpers";import styles from"./Button.module.css";import{Icon}from"../Icon/Icon";import{InlineLabel}from"../InlineLabel/InlineLabel";export const buttonTypes=["filled","outlined","text"];export const buttonActionTypes=["button","submit","reset"];export const buttonSizes=["small","medium"];export const buttonIconPositions=["left","right"];const typeStyleMap=mapKeys(buttonTypes),buttonPropTypes={id:PropTypes.string,children:PropTypes.oneOfType([PropTypes.node,intlMessageShape]),className:PropTypes.string,iconClassName:PropTypes.string,disabled:PropTypes.bool,fullWidth:PropTypes.bool,icon:PropTypes.string,iconPosition:PropTypes.oneOf(buttonIconPositions),onClick:PropTypes.func,renderContent:PropTypes.func,size:PropTypes.oneOf(buttonSizes),type:PropTypes.oneOf(buttonTypes),href:intlMessageShape,actionType:PropTypes.oneOf(buttonActionTypes),ref:PropTypes.oneOfType([PropTypes.func,PropTypes.object])},ButtonInternal=React.forwardRef(((props,ref)=>{const actionType=props.actionType,children=props.children,className=props.className,iconClassName=props.iconClassName,disabled=props.disabled,fullWidth=props.fullWidth,href=props.href,icon=props.icon,iconPosition=props.iconPosition,onClick=props.onClick,renderContent=props.renderContent,size=props.size,type=props.type,other=(props.dangerouslySetInnerHTML,_objectWithoutProperties(props,["actionType","children","className","iconClassName","disabled","fullWidth","href","icon","iconPosition","onClick","renderContent","size","type","dangerouslySetInnerHTML"])),translator=useContext(TranslatorContext),safeHref=useSafeTranslatedUrls()(href),typeStyle=typeStyleMap[type]||"filled",renderAsLink=void 0!==safeHref,newRef=ref||useRef(),isActiveKeyPressed=useKeyActive(newRef),classes=cx({[styles.activeKeypress]:isActiveKeyPressed},styles.button,{[styles.iconButton]:icon&&!children,[styles[typeStyle]]:typeStyle,[styles.small]:"small"===size,[styles.fullWidth]:fullWidth,[styles.disabled]:disabled,[styles.materialIcon]:icon&&icon.startsWith("mi")},className),isRight="right"===iconPosition,isLeft=!isRight,iconClasses=cx(styles.icon,{[styles.leftIcon]:isLeft&&children,[styles.rightIcon]:isRight&&children},iconClassName),iconComponent=icon&&React.createElement(Icon,{icon:icon,className:iconClasses}),translatedChildren=translator(children),content=React.createElement(InlineLabel,{icon:iconComponent,iconPosition:iconPosition},React.createElement("span",null,translatedChildren)),trackingProps={...props};isString(translatedChildren)&&(trackingProps.label=translatedChildren);const trackedTopic=renderAsLink?JUTRO_TOPICS.LINK_CLICKED:JUTRO_TOPICS.BUTTON_CLICKED,trackedOnClick=trackMethod(onClick,trackedTopic,trackingProps),contentToRender=renderContent?renderContent(content):content,remainingProps=omit(other,["translator","showRequired","onDataChange","onValueChange"]),defaultRender=React.createElement("button",_extends({ref:newRef,type:actionType,onClick:trackedOnClick,className:classes,disabled:disabled},remainingProps),contentToRender),renderLinkClasses=cx(classes,{[styles.disabled]:disabled}),renderLink=React.createElement("a",_extends({ref:newRef,href:disabled?void 0:safeHref,onClick:!disabled&&trackedOnClick,className:renderLinkClasses},remainingProps),contentToRender);return renderAsLink?renderLink:defaultRender}));export const Button=memo(ButtonInternal);ButtonInternal.propTypes=buttonPropTypes,ButtonInternal.defaultProps={actionType:"button",disabled:!1,fullWidth:!1,iconPosition:"left",size:"medium",type:"filled"},ButtonInternal.displayName="Button",Button.displayName="Button",ButtonInternal.__docgenInfo={description:"@type {React.ForwardRefExoticComponent<PropTypes.InferProps<typeof buttonPropTypes>>}\n\n@metadataType action",methods:[],displayName:"Button",props:{actionType:{defaultValue:{value:"'button'",computed:!1},type:{name:"enum",value:[{value:"'button'",computed:!1},{value:"'submit'",computed:!1},{value:"'reset'",computed:!1}]},required:!1,description:"Type of action button performs"},disabled:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If `true`, this button is disabled"},fullWidth:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If `true`, the button expands to the available width"},iconPosition:{defaultValue:{value:"'left'",computed:!1},type:{name:"enum",value:[{value:"'left'",computed:!1},{value:"'right'",computed:!1}]},required:!1,description:"Where the icon is placed relative to the text"},size:{defaultValue:{value:"'medium'",computed:!1},type:{name:"enum",value:[{value:"'small'",computed:!1},{value:"'medium'",computed:!1}]},required:!1,description:"Allows you to select the smaller or larger variant"},type:{defaultValue:{value:"'filled'",computed:!1},type:{name:"enum",value:[{value:"'filled'",computed:!1},{value:"'outlined'",computed:!1},{value:"'text'",computed:!1}]},required:!1,description:"Determines the display variety (filled, outlined, text)"},id:{type:{name:"string"},required:!1,description:"Optional string id for button"},children:{type:{name:"union",value:[{name:"node"},{name:"custom",raw:"intlMessageShape"}]},required:!1,description:"The children elements to render inside of the Button"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},iconClassName:{type:{name:"string"},required:!1,description:"CSS class name for icon"},icon:{type:{name:"string"},required:!1,description:"Optional icon name"},onClick:{type:{name:"func"},required:!1,description:"Callback when button is clicked"},renderContent:{type:{name:"func"},required:!1,description:"Callback when want to wrap button content"},href:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"if this prop is used an `<a>` tag will be used instead of `<button>`\n this will be the href passed to the `<a>` tag used."},ref:{type:{name:"union",value:[{name:"func"},{name:"object"}]},required:!1,description:"React.ForwardedRef or React.MutableRefObject access prop"}}},Button.__docgenInfo={componentName:"Button",packageName:"@jutro/components",description:"",displayName:"Button",methods:[],actualName:"Button",metadataType:"action",props:{id:{type:{name:"string"},required:!1,description:"Optional string id for button"},children:{type:{name:"union",value:[{name:"node"},{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}]},required:!1,description:"The children elements to render inside of the Button"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},iconClassName:{type:{name:"string"},required:!1,description:"CSS class name for icon"},disabled:{type:{name:"bool"},required:!1,description:"If `true`, this button is disabled",defaultValue:{value:"false",computed:!1}},fullWidth:{type:{name:"bool"},required:!1,description:"If `true`, the button expands to the available width",defaultValue:{value:"false",computed:!1}},icon:{type:{name:"string"},required:!1,description:"Optional icon name"},iconPosition:{type:{name:"enum",value:[{value:"'left'",computed:!1},{value:"'right'",computed:!1}]},required:!1,description:"Where the icon is placed relative to the text",defaultValue:{value:"'left'",computed:!1}},onClick:{type:{name:"func"},required:!1,description:"Callback when button is clicked"},renderContent:{type:{name:"func"},required:!1,description:"Callback when want to wrap button content"},size:{type:{name:"enum",value:[{value:"'small'",computed:!1},{value:"'medium'",computed:!1}]},required:!1,description:"Allows you to select the smaller or larger variant",defaultValue:{value:"'medium'",computed:!1}},type:{type:{name:"enum",value:[{value:"'filled'",computed:!1},{value:"'outlined'",computed:!1},{value:"'text'",computed:!1}]},required:!1,description:"Determines the display variety (filled, outlined, text)",defaultValue:{value:"'filled'",computed:!1}},href:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"if this prop is used an `<a>` tag will be used instead of `<button>`\n this will be the href passed to the `<a>` tag used."},actionType:{type:{name:"enum",value:[{value:"'button'",computed:!1},{value:"'submit'",computed:!1},{value:"'reset'",computed:!1}]},required:!1,description:"Type of action button performs",defaultValue:{value:"'button'",computed:!1}},ref:{type:{name:"union",value:[{name:"func"},{name:"object"}]},required:!1,description:"React.ForwardedRef or React.MutableRefObject access prop"}}};