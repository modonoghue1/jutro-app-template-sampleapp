import React,{useContext}from"react";import cx from"classnames";import PropTypes from"prop-types";import{TranslatorContext,useSafeTranslatedUrls}from"@jutro/locale";import{intlMessageShape,intlToShape}from"@jutro/prop-types";import styles from"./Breadcrumb.module.css";import{messages}from"./Breadcrumb.messages";import{Link}from"../Link/Link";const breadcrumbPropTypes={className:PropTypes.string,links:PropTypes.arrayOf(PropTypes.shape({text:intlMessageShape.isRequired,href:intlMessageShape,to:intlToShape,className:PropTypes.string,history:PropTypes.object})),theme:PropTypes.object,renderLinkTrigger:PropTypes.func,lastItemClickable:PropTypes.bool,backLinkWithoutText:PropTypes.bool};export const Breadcrumb=props=>{const className=props.className,links=props.links,renderLinkTrigger=props.renderLinkTrigger,lastItemClickable=props.lastItemClickable,backLinkWithoutText=props.backLinkWithoutText,translator=useContext(TranslatorContext),urlTranslatorAndSanitizer=useSafeTranslatedUrls();if(!links||links.length<2)return null;const breadcrumbClasses=cx(styles.breadcrumb,className),divider=React.createElement("span",{"aria-hidden":"true",className:styles.divider},"/"),renderLinkItem=renderLinkTrigger||(({text:text,...linkProps})=>React.createElement(Link,linkProps,text)),breadcrumbs=links.map((({className:linkClassName,href:href,to:to,text:text,history:history,...linkProps},index,array)=>{const linkClasses=cx(styles.breadcrumbLink,linkClassName),translatedText=translator(text),isLastItem=array.length-1===index,isReadOnly=isLastItem&&!lastItemClickable,ariaCurrent=isLastItem&&lastItemClickable?{"aria-current":"page"}:{};return React.createElement(React.Fragment,{key:`breadcrumb_link_${index}`},index>0&&divider,isReadOnly?(({text:text})=>React.createElement("span",{className:styles.currentLink},text))({text:translatedText}):renderLinkItem({className:linkClasses,text:translatedText,href:href&&urlTranslatorAndSanitizer(href),to:to&&urlTranslatorAndSanitizer(to),history:history,...ariaCurrent,...linkProps}))}));return React.createElement("div",{className:breadcrumbClasses,"aria-label":translator(messages.breadcrumbLabel),role:"navigation"},links.length>2&&breadcrumbs,2===links.length&&(()=>{const item=links[0],linkClassName=item.linkClassName,href=item.href,to=item.to,linkClasses=cx(styles.breadcrumbLink,linkClassName),label=translator(messages.breadcrumbBackButtonLabel),translatedText=backLinkWithoutText?"":label;return React.createElement(React.Fragment,null,renderLinkItem({icon:"gw-keyboard-backspace",className:linkClasses,text:translatedText,href:href&&urlTranslatorAndSanitizer(href),to:to&&urlTranslatorAndSanitizer(to),"aria-label":label,...item.linkProps}))})())};Breadcrumb.propTypes=breadcrumbPropTypes,Breadcrumb.__docgenInfo={description:'Displays a "breadcrumb" of links to previous pages with anchor tags or Link components\n\n@metadataType action\n\n@type {React.FC<PropTypes.InferProps<typeof breadcrumbPropTypes>>}',methods:[],displayName:"Breadcrumb",props:{className:{type:{name:"string"},required:!1,description:"Additional class to wrap the component."},links:{type:{name:"arrayOf",value:{name:"shape",value:{text:{name:"custom",raw:"intlMessageShape.isRequired",required:!0},href:{name:"custom",raw:"intlMessageShape",required:!1},to:{name:"custom",raw:"intlToShape",required:!1},className:{name:"string",required:!1},history:{name:"object",required:!1}}}},required:!1,description:"Takes an array of objects, each item having props for the used Link type component."},theme:{type:{name:"object"},required:!1,description:"Theme config to apply."},renderLinkTrigger:{type:{name:"func"},required:!1,description:"RenderProp function to generate the component that makes up the breadcrumb."},lastItemClickable:{type:{name:"bool"},required:!1,description:"Determines if the last item is a link."},backLinkWithoutText:{type:{name:"bool"},required:!1,description:'Determines if the backLink include "Back" text or just "arrow" icon.'}}},Breadcrumb.__docgenInfo={componentName:"Breadcrumb",packageName:"@jutro/components",description:'Displays a "breadcrumb" of links to previous pages with anchor tags or Link components',displayName:"Breadcrumb",methods:[],actualName:"Breadcrumb",metadataType:"action",props:{className:{type:{name:"string"},required:!1,description:"Additional class to wrap the component."},links:{type:{name:"arrayOf",value:{name:"shape",value:{text:{name:"union",required:!0,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},href:{name:"union",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},to:{name:"custom",raw:"intlToShape",required:!1},className:{name:"string",required:!1},history:{name:"object",required:!1}}}},required:!1,description:"Takes an array of objects, each item having props for the used Link type component."},theme:{type:{name:"object"},required:!1,description:"Theme config to apply."},renderLinkTrigger:{type:{name:"func"},required:!1,description:"RenderProp function to generate the component that makes up the breadcrumb."},lastItemClickable:{type:{name:"bool"},required:!1,description:"Determines if the last item is a link."},backLinkWithoutText:{type:{name:"bool"},required:!1,description:'Determines if the backLink include "Back" text or just "arrow" icon.'}}};