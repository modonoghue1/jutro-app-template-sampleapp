import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{Component,useRef,useEffect}from"react";import{ToastContainer,toast as _toast,Slide}from"react-toastify";import cx from"classnames";import PropTypes from"prop-types";import{intlMessageShape}from"@jutro/prop-types";import{generateComponentId}from"@jutro/platform";import styles from"./Toast.module.css";import{IconButton}from"../IconButton/IconButton";import{InlineNotification}from"../inlineNotification/InlineNotification";import{getKeyPressHandler}from"../../accessibility/getKeyPressHandler";const CloseToastButton=({closeToast:closeToast,iconColor:iconColor,className:className,setFocus:setFocus})=>{const focusReturn=useRef(document.activeElement),buttonRef=useRef(null),setFocusReturn=event=>{event.target!==buttonRef.current&&(focusReturn.current=document.activeElement)};useEffect((()=>(document.addEventListener("focusin",setFocusReturn),setFocus&&buttonRef.current.focus(),()=>{document.removeEventListener("focusin",setFocusReturn)})),[setFocus]);const closeHandler=event=>{closeToast(event),focusReturn.current.focus()};return React.createElement(IconButton,{icon:"gw-close",iconColor:iconColor,className:className,onKeyPress:getKeyPressHandler(closeHandler),onClick:closeHandler,ref:buttonRef})};export let ToastProvider=function(_Component){_inherits(ToastProvider,Component);var _super=_createSuper(ToastProvider);function ToastProvider(){return _classCallCheck(this,ToastProvider),_super.apply(this,arguments)}return _createClass(ToastProvider,[{key:"render",value:function(){return React.createElement(ToastContainer,{hideProgressBar:!0,transition:Slide,closeOnClick:!1,role:"status",className:styles.toastContainer})}}],[{key:"toast",value:function({message:message,type:type,autoClose:autoClose,autoFocus:autoFocus,onClosed:onClosed}){const closeButtonClasses=cx(styles.dismissButton,{[styles.toastWarning]:"warning"===type}),closeButtonColor="warning"===type?"dark":"light",setFocus=autoFocus||!autoClose,toastContent=React.createElement(InlineNotification,{id:generateComponentId("toast"),message:message,type:type,isEmbeddedNotification:!0,isDismissable:!1});_toast(toastContent,{autoClose:autoClose,type:type,onClose:onClosed,closeButton:React.createElement(CloseToastButton,{iconColor:closeButtonColor,className:closeButtonClasses,setFocus:setFocus}),className:styles.toast,bodyClassName:styles.toastBody})}}]),ToastProvider}();_defineProperty(ToastProvider,"propTypes",{autoClose:PropTypes.oneOfType([PropTypes.bool,PropTypes.number]),type:PropTypes.oneOf(["success","info","warning","error"]),message:intlMessageShape,autoFocus:PropTypes.bool,onClosed:PropTypes.func}),ToastProvider.__docgenInfo={description:"@typedef {typeof ToastProvider.propTypes} ToastProviderPropTypes\n@extends Component<PropTypes.InferProps<ToastProviderPropTypes>>",methods:[{name:"toast",docblock:"Static helper for triggering toasts directly from the ToastProvider\n\n@typedef {object} IntlMessageObject\n@prop {string} [id]\n@prop {string} [defaultMessage]\n@prop {Record<string, string>} [args]\n\n@typedef {string | IntlMessageObject} IntlMessageShape\n\n@typedef {object} ToastProps\n@prop {IntlMessageShape} message The message to be displayed in the toast container\n@prop {string} type The toast container type\n@prop {boolean | number} [autoClose] Whether to automatically close the toast container after 5s if boolean and time until close if number\n@prop {boolean} [autoFocus] Whether to automatically focus on the toast container after it is shown\n@prop {function} [onClosed] An optional callback to trigger\n@param {ToastProps} props\n@returns {void} nothing",modifiers:["static"],params:[{name:"{ message, type, autoClose, autoFocus, onClosed }"}],returns:null,description:"Static helper for triggering toasts directly from the ToastProvider"}],displayName:"ToastProvider",props:{autoClose:{type:{name:"union",value:[{name:"bool"},{name:"number"}]},required:!1,description:"number in ms until toast closes or boolean for autoclose. If boolean and true, the toast would be closed automatically after 5s\nIf false, focus will be drawn to the dismiss button"},type:{type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'info'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1}]},required:!1,description:"Phrase allowing to set color and appearance of toast (success, warning, error, info)"},message:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Text to display on notification"},autoFocus:{type:{name:"bool"},required:!1,description:"If true, focus will be drawn to the dismiss button on opening even if autoClose={true}"},onClosed:{type:{name:"func"},required:!1,description:"Function called when the notification disappear"}}},CloseToastButton.__docgenInfo={componentName:"CloseToastButton",packageName:"@jutro/components",description:"",displayName:"CloseToastButton",methods:[],actualName:"CloseToastButton"},ToastProvider.__docgenInfo={componentName:"ToastProvider",packageName:"@jutro/components",description:"",displayName:"ToastProvider",methods:[{name:"toast",docblock:"Static helper for triggering toasts directly from the ToastProvider\n\n@typedef {object} IntlMessageObject\n@prop {string} [id]\n@prop {string} [defaultMessage]\n@prop {Record<string, string>} [args]\n\n@typedef {string | IntlMessageObject} IntlMessageShape\n\n@typedef {object} ToastProps\n@prop {IntlMessageShape} message The message to be displayed in the toast container\n@prop {string} type The toast container type\n@prop {boolean | number} [autoClose] Whether to automatically close the toast container after 5s if boolean and time until close if number\n@prop {boolean} [autoFocus] Whether to automatically focus on the toast container after it is shown\n@prop {function} [onClosed] An optional callback to trigger\n@param {ToastProps} props\n@returns {void} nothing",modifiers:["static"],params:[{name:"{ message, type, autoClose, autoFocus, onClosed }"}],returns:null,description:"Static helper for triggering toasts directly from the ToastProvider"}],actualName:"ToastProvider",props:{autoClose:{type:{name:"union",value:[{name:"bool"},{name:"number"}]},required:!1,description:"number in ms until toast closes or boolean for autoclose. If boolean and true, the toast would be closed automatically after 5s\nIf false, focus will be drawn to the dismiss button"},type:{type:{name:"enum",value:[{value:"'success'",computed:!1},{value:"'info'",computed:!1},{value:"'warning'",computed:!1},{value:"'error'",computed:!1}]},required:!1,description:"Phrase allowing to set color and appearance of toast (success, warning, error, info)"},message:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Text to display on notification"},autoFocus:{type:{name:"bool"},required:!1,description:"If true, focus will be drawn to the dismiss button on opening even if autoClose={true}"},onClosed:{type:{name:"func"},required:!1,description:"Function called when the notification disappear"}}};