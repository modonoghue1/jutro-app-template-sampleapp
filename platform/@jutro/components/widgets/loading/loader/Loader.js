import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useState,useContext,useEffect}from"react";import PropTypes from"prop-types";import cx from"classnames";import{isPromise}from"@jutro/platform";import{intlMessageShape}from"@jutro/prop-types";import{TranslatorContext}from"@jutro/locale";import styles from"./Loader.module.css";import{BrandedLoader}from"./BrandedLoader";const isLoadingActive=loaded=>"boolean"==typeof loaded||void 0===loaded?!loaded:Array.isArray(loaded)||isPromise(loaded);export const Loader=({loaded:loaded,text:text,children:children,className:className,renderLoader:renderLoader=(()=>React.createElement(BrandedLoader,null))})=>{const _useState=useState(isLoadingActive(loaded)),_useState2=_slicedToArray(_useState,2),isloaderActive=_useState2[0],setIsLoaderActive=_useState2[1];useEffect((()=>{let isActive=!0;if(isLoadingActive(loaded)){if(setIsLoaderActive(!0),isPromise(loaded)||Array.isArray(loaded)){(Array.isArray(loaded)?Promise.all(loaded):loaded).then((()=>isActive&&setIsLoaderActive(!1))).catch((()=>isActive&&setIsLoaderActive(!1)))}}else setIsLoaderActive(!1);return()=>{isActive=!1}}),[loaded]);const classes=cx({[styles.loader]:isloaderActive},className),translator=useContext(TranslatorContext),loaderText=text?React.createElement("div",{className:styles.text},translator(text)):null;return React.createElement("div",{className:classes},isloaderActive?React.createElement("span",{role:"alert",className:styles.loaderAlertWrapper},renderLoader(),loaderText):children)};Loader.propTypes={className:PropTypes.string,children:PropTypes.node,loaded:PropTypes.oneOfType([PropTypes.bool,PropTypes.array,PropTypes.object]),text:PropTypes.oneOfType([PropTypes.node,intlMessageShape]),renderLoader:PropTypes.func},Loader.displayName="Loader",Loader.__docgenInfo={description:"Renders an animated component that you can show when loading some other content.\n\n@typedef {typeof Loader.propTypes} LoaderPropTypes\n@extends Component<PropTypes.InferProps<LoaderPropTypes>>\n\n@metadataType element",methods:[],displayName:"Loader",props:{renderLoader:{defaultValue:{value:"() => <BrandedLoader />",computed:!1},type:{name:"func"},required:!1,description:"Callback to render loader"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},children:{type:{name:"node"},required:!1,description:"The children elements to render inside of this component's body"},loaded:{type:{name:"union",value:[{name:"bool"},{name:"array"},{name:"object"}]},required:!1,description:"Controls whether the Loader UI is shown vs the `children`;\n     For boolean values, if `false` is passed then the Loader UI is shown otherwise the `children` are; For\n     Promise value(s), the Loader UI will be shown until the promise has completed then the `children` are."},text:{type:{name:"union",value:[{name:"node"},{name:"custom",raw:"intlMessageShape"}]},required:!1,description:"Optional message text to display when the Loader UI is shown"}}},Loader.__docgenInfo={componentName:"Loader",packageName:"@jutro/components",description:"Renders an animated component that you can show when loading some other content.",displayName:"Loader",methods:[],actualName:"Loader",metadataType:"element",props:{className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},children:{type:{name:"node"},required:!1,description:"The children elements to render inside of this component's body"},loaded:{type:{name:"union",value:[{name:"bool"},{name:"array"},{name:"object"}]},required:!1,description:"Controls whether the Loader UI is shown vs the `children`;\n     For boolean values, if `false` is passed then the Loader UI is shown otherwise the `children` are; For\n     Promise value(s), the Loader UI will be shown until the promise has completed then the `children` are."},text:{type:{name:"union",value:[{name:"node"},{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}]},required:!1,description:"Optional message text to display when the Loader UI is shown"},renderLoader:{type:{name:"func"},required:!1,description:"Callback to render loader",defaultValue:{value:"() => React.createElement(BrandedLoader, null)",computed:!1}}}};