import _extends from"@babel/runtime-corejs3/helpers/extends";import React,{useContext,memo}from"react";import PropTypes from"prop-types";import cx from"classnames";import{TranslatorContext}from"@jutro/locale";import{intlMessageShape}from"@jutro/prop-types";import{getMessageProp}from"@jutro/platform";import styles from"./Chevron.module.css";import{Icon}from"../Icon/Icon";import{messages}from"./Chevron.messages";const chevronPropTypes={className:PropTypes.string,chevronIcon:PropTypes.string,isOpen:PropTypes.oneOfType([PropTypes.bool,PropTypes.object]),messageProps:PropTypes.shape({label:intlMessageShape})},ChevronInternal=({className:className,chevronIcon:chevronIcon,isOpen:isOpen,messageProps:messageProps,...other})=>{const translator=useContext(TranslatorContext),accordionLabel=getMessageProp("label",messageProps,messages),chevronClass=cx(styles.chevron,{[styles.open]:isOpen},className);return React.createElement(Icon,_extends({icon:chevronIcon,size:"large",className:chevronClass,role:"button","aria-label":translator(accordionLabel),"aria-expanded":!!isOpen},other))};ChevronInternal.propTypes=chevronPropTypes,ChevronInternal.defaultProps={chevronIcon:"gw-chevron-right",isOpen:!1},ChevronInternal.displayName="Chevron";export const Chevron=memo(ChevronInternal);ChevronInternal.__docgenInfo={description:'The `Chevron` component is used to render the Chevron icon for an `Accordion` or `Card`.  This component is\nbuilt with optional props: `className`, `chevronIcon` and `isOpen`.  The optional `className` prop is used to provide any\ncustom styling to the chevron.  The optional `chevronIcon` prop will alter the chevron styling using a well-known,\npre-defined variant of the icon.  The optional `isOpen` prop, when `true`, will alter the style of the chevron icon\nto indicate the chevron is opened.\n\nProperties: {@link ChevronProps}\n\n@example\n<Chevron isOpen={this.state.isOpen}/>\n\n@example\n<Chevron isOpen={this.state.isOpen} chevronIcon="gw-chevron-right"/>\n\n@type {React.FC<PropTypes.InferProps<typeof chevronPropTypes>>}\n\n@metadataType element',methods:[],displayName:"Chevron",props:{chevronIcon:{defaultValue:{value:"'gw-chevron-right'",computed:!1},type:{name:"string"},required:!1,description:"The optional icon of this chevron"},isOpen:{defaultValue:{value:"false",computed:!1},type:{name:"union",value:[{name:"bool"},{name:"object"}]},required:!1,description:"Optional flag indicating whether this chevron is open"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},messageProps:{type:{name:"shape",value:{label:{name:"custom",raw:"intlMessageShape",description:"accordion icon aria-label",required:!1}}},required:!1,description:"Message props(error message/aria-label)"}}},ChevronInternal.__docgenInfo={componentName:"Chevron",packageName:"@jutro/components",description:"The `Chevron` component is used to render the Chevron icon for an `Accordion` or `Card`.  This component is\nbuilt with optional props: `className`, `chevronIcon` and `isOpen`.  The optional `className` prop is used to provide any\ncustom styling to the chevron.  The optional `chevronIcon` prop will alter the chevron styling using a well-known,\npre-defined variant of the icon.  The optional `isOpen` prop, when `true`, will alter the style of the chevron icon\nto indicate the chevron is opened.\n\nProperties: {@link ChevronProps}",displayName:"Chevron",methods:[],actualName:"ChevronInternal",metadataType:"element",props:{className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},chevronIcon:{type:{name:"string"},required:!1,description:"The optional icon of this chevron",defaultValue:{value:"'gw-chevron-right'",computed:!1}},isOpen:{type:{name:"union",value:[{name:"bool"},{name:"object"}]},required:!1,description:"Optional flag indicating whether this chevron is open",defaultValue:{value:"false",computed:!1}},messageProps:{type:{name:"shape",value:{label:{name:"union",description:"accordion icon aria-label",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"}}};