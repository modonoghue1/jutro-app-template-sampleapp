import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _get from"@babel/runtime-corejs3/helpers/get";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import DatePicker,{registerLocale}from"react-datepicker";import{isValid,isBefore,isAfter}from"date-fns";import defaultLocaleObject from"date-fns/locale/en-US";import isEqual from"lodash/isEqual";import isEmpty from"lodash/isEmpty";import isUndefined from"lodash/isUndefined";import cx from"classnames";import{mergeStyles,getDatePatternFromLocale,getDateInputFormats,formatDateToDataType,parseDateFromDataType,formatDateToLocalePattern}from"@jutro/platform";import{messages}from"./DateField.messages";import datePickerStyles from"./DatePickerField.module.css";import inputStyles from"../InputField/InputField.module.css";import{FieldIcon}from"../FieldComponent/FieldIcon";import{FieldComponent}from"../FieldComponent/FieldComponent";import{CustomHeader}from"./CustomHeader";import{PopperContainer}from"./PopperContainer";import{DateValue}from"../../values/DateValue";import{maxDefaultYear,minDefaultYear}from"./DateField.commons";import{DateFieldValidationImplementation}from"./DateFieldValidationImplementation";import{OldDateFieldValidationImplementation}from"./OldDateFieldValidationImplementation";function registerDateFnsLocale(locale){registerLocale(locale.code||"en-US",locale)}export let DateFieldInternal=function(_FieldComponent){_inherits(DateFieldInternal,FieldComponent);var _super=_createSuper(DateFieldInternal);function DateFieldInternal(_props){var _thisSuper,_thisSuper2,_this;_classCallCheck(this,DateFieldInternal),_this=_super.call(this,_props),_defineProperty(_assertThisInitialized(_this),"datePickerRef",void 0),_defineProperty(_assertThisInitialized(_this),"localePattern",void 0),_defineProperty(_assertThisInitialized(_this),"userInput",void 0),_defineProperty(_assertThisInitialized(_this),"ongoingUserInput",!1),_defineProperty(_assertThisInitialized(_this),"validationImplementation",void 0),_defineProperty(_assertThisInitialized(_this),"state",{isFocused:_this.state.isFocused,focused:_this.focused,isValidDate:!0,isOpen:_this.props.isInitiallyOpen}),_defineProperty(_assertThisInitialized(_this),"validationDependencyProps",["minDate","maxDate"]),_defineProperty(_assertThisInitialized(_this),"formatValue",(value=>{const dataType=_this.props.dataType;return formatDateToDataType(value,dataType)})),_defineProperty(_assertThisInitialized(_this),"handleDateChange",(date=>{_this.validationImplementation.handleDateChange(date)})),_defineProperty(_assertThisInitialized(_this),"handleChangeRaw",(evt=>{_this.validationImplementation.handleChangeRaw(evt)})),_defineProperty(_assertThisInitialized(_this),"renderPopperContainer",(labelId=>props=>React.createElement(PopperContainer,_extends({},props,{labelId:labelId,parentId:_this.fieldUniqueId})))),_defineProperty(_assertThisInitialized(_this),"renderCustomHeader",(props=>{const _this$props=_this.props,minDate=_this$props.minDate,maxDate=_this$props.maxDate,locale=_this$props.locale,min=minDate?parseDateFromDataType(minDate).getUTCFullYear():minDefaultYear,max=maxDate?parseDateFromDataType(maxDate).getUTCFullYear():maxDefaultYear;return React.createElement(CustomHeader,_extends({},props,{locale:locale,minYear:min,maxYear:max}))})),_defineProperty(_assertThisInitialized(_this),"handleFocus",(evt=>{_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(DateFieldInternal.prototype)),"handleFocus",_thisSuper).call(_thisSuper,evt),_this.setState({focused:_this.focused})})),_defineProperty(_assertThisInitialized(_this),"handleBlur",(evt=>{_get((_thisSuper2=_assertThisInitialized(_this),_getPrototypeOf(DateFieldInternal.prototype)),"handleBlur",_thisSuper2).call(_thisSuper2,evt),_this.setState({focused:_this.focused})})),_defineProperty(_assertThisInitialized(_this),"setFocus",(()=>{var _this$datePickerRef,_this$datePickerRef$c;null===(_this$datePickerRef=_this.datePickerRef)||void 0===_this$datePickerRef||null===(_this$datePickerRef$c=_this$datePickerRef.current)||void 0===_this$datePickerRef$c||_this$datePickerRef$c.setFocus()})),_defineProperty(_assertThisInitialized(_this),"renderTodayButton",(todayButtonText=>{const translator=_assertThisInitialized(_this).translator;return React.createElement("button",{className:datePickerStyles.todayButton,"aria-label":translator(todayButtonText||messages.today)},translator(todayButtonText||messages.today))})),_defineProperty(_assertThisInitialized(_this),"handleKeyDown",(e=>{if(_this.state.isOpen&&"Tab"===e.key&&e.target.id===_this.fieldUniqueId){e.preventDefault();const selectedDay=_this.datePickerRef.current.calendar.componentNode&&_this.datePickerRef.current.calendar.componentNode.querySelector('.react-datepicker__day[tabindex="0"]');selectedDay&&selectedDay.focus({preventScroll:!0})}}));const _locale=_props.locale;_this.datePickerRef=React.createRef(),_this.localePattern=getDatePatternFromLocale(isEmpty(_locale)?defaultLocaleObject:_locale),registerDateFnsLocale(_locale);const ValidationImplementation=_props.registerValidation?new DateFieldValidationImplementation:new OldDateFieldValidationImplementation;return _this.validationImplementation=ValidationImplementation.bind(_assertThisInitialized(_this)),_this}return _createClass(DateFieldInternal,[{key:"render",value:function(){return _get(_getPrototypeOf(DateFieldInternal.prototype),"render",this).call(this)}},{key:"componentDidUpdate",value:function(...args){_get(_getPrototypeOf(DateFieldInternal.prototype),"componentDidUpdate",this).call(this,...args);const prevLocale=args[0].locale,locale=this.props.locale;isEqual(prevLocale,locale)||registerDateFnsLocale(locale)}},{key:"getValue",value:function(value){return this.validationImplementation.getValue(value)}},{key:"getValidationMessages",value:function(...args){return this.validationImplementation.getValidationMessages(...args)}},{key:"getValidationConfig",value:function(){return _get(_getPrototypeOf(DateFieldInternal.prototype),"getValidationConfig",this).call(this,{propsList:["invalidDate","maxDate","minDate"],options:{locale:this.props.locale,format:this.props.format,localePattern:this.localePattern}})}},{key:"getPlaceholderOrDefault",value:function(placeholder){const translatedLocalPattern=this.localePattern.replace("dd",this.translator(messages.dd)).replace("MM",this.translator(messages.mm)).replace("yyyy",this.translator(messages.yy));return placeholder?this.translator(placeholder,{format:translatedLocalPattern}):translatedLocalPattern}},{key:"getInputValue",value:function(){const _this$props2=this.props,value=_this$props2.value,localeCode=_this$props2.localeCode,format=_this$props2.format,_this$state=this.state,focused=_this$state.focused,userInput=_this$state.userInput,selectedDate=value&&parseDateFromDataType(value);return focused||void 0!==userInput||!isValid(selectedDate)?userInput:formatDateToLocalePattern(selectedDate,localeCode||"en-US",format)}},{key:"renderControlReadOnly",value:function(breakpointProps){const id=breakpointProps.id,value=breakpointProps.value,showTime=breakpointProps.showTime,format=breakpointProps.format,classes=cx(datePickerStyles.datePicker,datePickerStyles.readOnly);return React.createElement(DateValue,{id:id,className:classes,value:value,format:format,showTime:showTime})}},{key:"renderControl",value:function(breakpointProps,options){const combinedStyles=mergeStyles(inputStyles,datePickerStyles),id=breakpointProps.id,disabled=breakpointProps.disabled,controlClassName=breakpointProps.controlClassName,required=breakpointProps.required,placeholder=breakpointProps.placeholder,minDate=breakpointProps.minDate,maxDate=breakpointProps.maxDate,autoComplete=breakpointProps.autoComplete,todayButtonText=breakpointProps.todayButtonText,popperPlacement=breakpointProps.popperPlacement,value=breakpointProps.value,locale=breakpointProps.locale,showCalendar=breakpointProps.showCalendar,isInitiallyOpen=breakpointProps.isInitiallyOpen,testId=breakpointProps.testId,startDate=breakpointProps.startDate,selectsStart=breakpointProps.selectsStart,endDate=breakpointProps.endDate,selectsEnd=breakpointProps.selectsEnd,name=breakpointProps.name,registerValidation=breakpointProps.registerValidation,_this$state2=this.state,calendarId=_this$state2.calendarId,isOpen=_this$state2.isOpen,minDateObject=minDate?parseDateFromDataType(minDate):null,maxDateObject=maxDate?parseDateFromDataType(maxDate):null,nowWithoutTime=new Date,isTodayBeforeMin=!!minDateObject&&isBefore(nowWithoutTime,minDateObject),isTodayAfterMax=!!maxDateObject&&isAfter(nowWithoutTime,maxDateObject),todayOutOfRange=isTodayBeforeMin||isTodayAfterMax,validationMessages=this.getValidationMessages(value),messageStyle=this.getValidationMessageStyle(validationMessages),inputClasses=cx({disabled:disabled,[messageStyle]:!options.isValid},combinedStyles.input,combinedStyles.datePicker,controlClassName,!isUndefined(registerValidation)&&!options.isValid&&combinedStyles.labpreviewBorder),popperClasses=cx({[combinedStyles.hidePopper]:!showCalendar}),isRequired=null!=required?required:void 0,isDisabled=null!=disabled?disabled:void 0,calendarClass=cx({todayOutOfRange:todayOutOfRange}),selectedDate=value?parseDateFromDataType(value):void 0,selectedStartDate=startDate?parseDateFromDataType(startDate):void 0,selectedEndDate=endDate?parseDateFromDataType(endDate):void 0,datePickerAutoComplete=name||autoComplete?"on":"off",inputElement=React.createElement(DatePicker,_extends({id:this.fieldUniqueId,ref:this.datePickerRef,selected:"object"==typeof selectedDate&&isValid(selectedDate)?selectedDate:null,value:this.getInputValue(),onChange:this.handleDateChange,onChangeRaw:this.handleChangeRaw,onKeyDown:this.handleKeyDown,onSelect:this.setFocus,todayButton:this.renderTodayButton(todayButtonText),className:inputClasses,locale:locale.code,calendarClassName:calendarClass,minDate:minDateObject,maxDate:maxDateObject,popperPlacement:popperPlacement,popperModifiers:{preventOverflow:{enabled:!0},flip:{behavior:["bottom"]}},customInput:React.createElement("input",_extends({"data-testid":testId||id},this.generateAccessibilityProperties())),dateFormat:getDateInputFormats(this.localePattern),isClearable:!1,popperClassName:popperClasses,popperContainer:this.renderPopperContainer(options.labelId),renderCustomHeader:this.renderCustomHeader,disabled:isDisabled,required:Boolean(isRequired),autoComplete:datePickerAutoComplete,name:name,placeholderText:this.getPlaceholderOrDefault(placeholder)},this.generateDataPathProperty(),this.generateAccessibilityProperties(),this.getInputFocusHandlers(),{startOpen:isInitiallyOpen,open:isOpen,onCalendarOpen:()=>this.setState({isOpen:!0,focused:!0}),onCalendarClose:()=>{this.setState({isOpen:!1,focused:!1})},startDate:selectedStartDate,endDate:selectedEndDate,selectsStart:selectsStart,selectsEnd:selectsEnd})),icon=breakpointProps.icon;return React.createElement("div",{className:combinedStyles.datePicker,"aria-expanded":"true","aria-haspopup":"true","aria-controls":calendarId},React.createElement(FieldIcon,{iconPosition:"right",icon:icon,disabled:disabled},inputElement))}}]),DateFieldInternal}();_defineProperty(DateFieldInternal,"displayName","DateFieldInternal"),DateFieldInternal.__docgenInfo={description:'Allows the user to either type or select a date. Displays them according to locale settings.\n\n@type {import("./DateField").DateFieldPropsWithContexts}\n@extends {FieldComponent<DateFieldPropsWithContexts>}\n\n@metadataType field',methods:[{name:"getValue",docblock:null,modifiers:[],params:[{name:"value",optional:!0,type:{name:"DateValueShape",alias:"DateValueShape"}}],returns:{type:{name:"DateValueShape"}}},{name:"formatValue",docblock:"Convert the date object returned by the datepicker to\nthe expected format based on dataType props.\n\n@param {object} [value] - date object\n@returns {object} - string or date object, always a UTC date",modifiers:[],params:[{name:"value",type:{name:"Date",alias:"Date"}}],returns:{type:{name:"DateValueShape"}},description:"Convert the date object returned by the datepicker to\nthe expected format based on dataType props."},{name:"handleDateChange",docblock:"Handles user triggered date changes\n\n@param {Date} [date] the date that the value was changed to",modifiers:[],params:[{name:"date",type:{name:"Date",alias:"Date"}}],returns:{type:{name:"void"}},description:"Handles user triggered date changes"},{name:"handleChangeRaw",docblock:"Called with a value when the input is edited manually or date is selected\n\n@param {object} [evt] - the event that triggers the change",modifiers:[],params:[{name:"evt",type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]}}],returns:{type:{name:"void"}},description:"Called with a value when the input is edited manually or date is selected"},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added\n\n@returns {Array<any>} validation messages",modifiers:[],params:[{name:"...args",type:{name:"Array",elements:[{name:"any"}],raw:"any[]"}}],returns:{description:"validation messages",type:{name:"Array",elements:[{name:"any"}]}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added"},{name:"getValidationConfig",docblock:null,modifiers:[],params:[],returns:null},{name:"getPlaceholderOrDefault",docblock:"Get the placeholder to display.\nIf no placeholder is provided it returns date format for locale.\n\n@param {intlMessageShape} [placeholder] placeholder provided by props\n@returns {string} placeholder",modifiers:[],params:[{name:"placeholder",type:{name:"union",raw:"IntlMessageShape | undefined | null",elements:[{name:"IntlMessageShape"},{name:"undefined"},{name:"null"}]}}],returns:{type:{name:"string"}},description:"Get the placeholder to display.\nIf no placeholder is provided it returns date format for locale."},{name:"getInputValue",docblock:"Format displaying date using Intl",modifiers:[],params:[],returns:{type:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]}},description:"Format displaying date using Intl"},{name:"renderPopperContainer",docblock:"Renders wrapped calendar element\n\n@param {string} [labelId] - id of the label element assigned to this field\n@returns {Function} container component for calendar popper",modifiers:[],params:[{name:"labelId",type:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]}}],returns:{type:{name:"signature",type:"function",raw:"(props: {\n    children: React.ReactNode[];\n}) => React.ReactNode",signature:{arguments:[{name:"props",type:{name:"signature",type:"object",raw:"{\n    children: React.ReactNode[];\n}",signature:{properties:[{key:"children",value:{name:"Array",elements:[{name:"ReactReactNode",raw:"React.ReactNode"}],raw:"React.ReactNode[]",required:!0}}]}}}],return:{name:"ReactReactNode",raw:"React.ReactNode"}}}},description:"Renders wrapped calendar element"},{name:"renderCustomHeader",docblock:"Renders custom header.\n\n@param {object} [props] - props for custom header\n\n@returns {React.ReactElement} - the resulting rendered header",modifiers:[],params:[{name:"props"}],returns:null,description:"Renders custom header."},{name:"handleFocus",docblock:null,modifiers:[],params:[{name:"evt",type:{name:"ReactFocusEvent",raw:"React.FocusEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]}}],returns:{type:{name:"void"}}},{name:"handleBlur",docblock:null,modifiers:[],params:[{name:"evt",type:{name:"ReactFocusEvent",raw:"React.FocusEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]}}],returns:{type:{name:"void"}}},{name:"setFocus",docblock:"set focus on select to prevent mishandling of focus state when clicking on elements in the custom header",modifiers:[],params:[],returns:{type:{name:"void"}},description:"set focus on select to prevent mishandling of focus state when clicking on elements in the custom header"},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"DateFieldPropsWithContexts",alias:"DateFieldPropsWithContexts"},optional:!1}],returns:{description:"JSX for the control",type:{name:"ReactElement"}},description:"Render readonly control for this component."},{name:"renderTodayButton",docblock:null,modifiers:[],params:[{name:"todayButtonText",optional:!0,type:{name:"IntlMessageShape",alias:"IntlMessageShape"}}],returns:{type:{name:"ReactReactNode",raw:"React.ReactNode"}}},{name:"handleKeyDown",docblock:null,modifiers:[],params:[{name:"e",type:{name:"ReactKeyboardEvent",raw:"React.KeyboardEvent<HTMLDivElement>",elements:[{name:"HTMLDivElement"}]}}],returns:{type:{name:"void"}}},{name:"renderControl",docblock:"Render the control\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} [options] - some options?\n@returns {React.ReactElement} - The resulting rendered DateField",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"DateFieldPropsWithContexts",alias:"DateFieldPropsWithContexts"},optional:!1},{name:"options",type:{name:"signature",type:"object",raw:"{ labelId?: string; isValid?: boolean }",signature:{properties:[{key:"labelId",value:{name:"string",required:!1}},{key:"isValid",value:{name:"boolean",required:!1}}]}}}],returns:{type:{name:"ReactElement"}},description:"Render the control"}],displayName:"DateFieldInternal"},DateFieldInternal.__docgenInfo={componentName:"DateFieldInternal",packageName:"@jutro/components",description:"Allows the user to either type or select a date. Displays them according to locale settings.",displayName:"DateFieldInternal",methods:[{name:"getValue",docblock:null,modifiers:[],params:[{name:"value",optional:void 0,type:null}],returns:null},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added\n\n@returns {Array<any>} validation messages",modifiers:[],params:[{name:"...args"}],returns:{description:"validation messages",type:{name:"Array",elements:[{name:"any"}]}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added"},{name:"getValidationConfig",docblock:null,modifiers:[],params:[],returns:null},{name:"getPlaceholderOrDefault",docblock:"Get the placeholder to display.\nIf no placeholder is provided it returns date format for locale.\n\n@param {intlMessageShape} [placeholder] placeholder provided by props\n@returns {string} placeholder",modifiers:[],params:[{name:"placeholder"}],returns:null,description:"Get the placeholder to display.\nIf no placeholder is provided it returns date format for locale."},{name:"getInputValue",docblock:"Format displaying date using Intl",modifiers:[],params:[],returns:null,description:"Format displaying date using Intl"},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"renderControl",docblock:"Render the control\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} [options] - some options?\n@returns {React.ReactElement} - The resulting rendered DateField",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options"}],returns:null,description:"Render the control"}],actualName:"DateFieldInternal",metadataType:"field"};