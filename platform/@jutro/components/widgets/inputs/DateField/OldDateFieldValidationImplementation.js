import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import{isEmptyValue}from"@jutro/data";import{isValid}from"date-fns";import isEmpty from"lodash/isEmpty";import{getMessageProp,formatDateToLocalePattern,parseDateFromDataType,getDateInputFormats,isDateInRange,validateDateUserInput}from"@jutro/platform";import{OldFieldComponentValidationImplementation}from"../FieldComponent/OldFieldComponentValidationImplementation";import{messages}from"./DateField.messages";export let OldDateFieldValidationImplementation=function(_OldFieldComponentVal){_inherits(OldDateFieldValidationImplementation,OldFieldComponentValidationImplementation);var _super=_createSuper(OldDateFieldValidationImplementation);function OldDateFieldValidationImplementation(){return _classCallCheck(this,OldDateFieldValidationImplementation),_super.apply(this,arguments)}return _createClass(OldDateFieldValidationImplementation,[{key:"bind",value:function(entityToBind){const superBoundMethods=_get(_getPrototypeOf(OldDateFieldValidationImplementation.prototype),"bind",this).call(this,entityToBind);return["getValidationMessages","handleChangeRaw","handleDateChange","getValue"].reduce(((acc,method)=>({...acc,[method]:this[method].bind(entityToBind)})),superBoundMethods)}},{key:"handleChangeRaw",value:function(evt){"change"===evt.type&&(this.touch(),this.ongoingUserInput=!0,this.setState({userInput:evt.target.value}))}},{key:"handleDateChange",value:function(date){const isValidDate=isValid(date);isEmptyValue(date)||isValidDate?(this.setState({userInput:void 0}),this.ongoingUserInput=!1,this.notifyChange(isValidDate?this.formatValue(date):void 0)):this.touch()}},{key:"getValue",value:function(value){return value||this.state.userInput||this.props.value}},{key:"getValidationMessages",value:function(value=this.getValue()){const validationMessages=_get(_getPrototypeOf(OldDateFieldValidationImplementation.prototype),"getValidationMessages",this).call(this,value)||[];if(isEmptyValue(value))return validationMessages;if(!isEmpty(validationMessages))return validationMessages;const _this$props=this.props,messageProps=_this$props.messageProps,locale=_this$props.locale,format=_this$props.format,minDate=_this$props.minDate,maxDate=_this$props.maxDate,incorrectInput=getMessageProp("incorrectInput",messageProps,messages),validationMinDate=getMessageProp("validationMinDate",messageProps,messages),validationMaxDate=getMessageProp("validationMaxDate",messageProps,messages);if(this.ongoingUserInput&&"string"==typeof value&&!validateDateUserInput(value,getDateInputFormats(this.localePattern)))return[this.translator(incorrectInput)];const date=parseDateFromDataType(value);if(!isValid(date))return[this.translator(incorrectInput)];const _isDateInRange=isDateInRange(date,minDate,maxDate),fulfillMinRequirement=_isDateInRange.fulfillMinRequirement,fulfillMaxRequirement=_isDateInRange.fulfillMaxRequirement;if(!fulfillMinRequirement&&minDate){const formattedMinDate=formatDateToLocalePattern(parseDateFromDataType(minDate),locale.code,format);return[this.translator(validationMinDate,{minDate:formattedMinDate})]}if(!fulfillMaxRequirement&&maxDate){const formattedMaxDate=formatDateToLocalePattern(parseDateFromDataType(maxDate),locale.code,format);return[this.translator(validationMaxDate,{maxDate:formattedMaxDate})]}return validationMessages}}]),OldDateFieldValidationImplementation}();