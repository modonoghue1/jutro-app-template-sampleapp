import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import PropTypes from"prop-types";import React from"react";import cx from"classnames";import{mergeStyles}from"@jutro/platform";import{FieldComponent}from"../FieldComponent/FieldComponent";import textAreaStyles from"./TextAreaField.module.css";import inputStyles from"../InputField/InputField.module.css";export let TextAreaField=function(_FieldComponent){_inherits(TextAreaField,FieldComponent);var _super=_createSuper(TextAreaField);function TextAreaField(props){var _this;return _classCallCheck(this,TextAreaField),_this=_super.call(this,props),_defineProperty(_assertThisInitialized(_this),"onKeyPress",(evt=>{if("Enter"===evt.key&&evt.altKey){const _evt$target=evt.target,selectionStart=_evt$target.selectionStart,selectionEnd=_evt$target.selectionEnd,_this$props$value=_this.props.value,value=void 0===_this$props$value?"":_this$props$value,newValue=`${value.substring(0,selectionStart)}\n${value.substring(selectionEnd)}`;_this.textAreaRef.current.value=newValue,_this.textAreaRef.current.selectionEnd=selectionStart+1,_this.notifyChange(newValue)}})),_this.textAreaRef=React.createRef(),_this}return _createClass(TextAreaField,[{key:"render",value:function(){return _get(_getPrototypeOf(TextAreaField.prototype),"render",this).call(this)}},{key:"renderControlReadOnly",value:function(breakpointProps){const modifiedProps={...breakpointProps,className:cx(breakpointProps.className,textAreaStyles.textAreaReadOnly)};return _get(_getPrototypeOf(TextAreaField.prototype),"renderControlReadOnly",this).call(this,modifiedProps)}},{key:"renderControl",value:function(breakpointProps,options){const value=breakpointProps.value,disabled=breakpointProps.disabled,required=breakpointProps.required,maxLength=breakpointProps.maxLength,rows=breakpointProps.rows,controlClassName=breakpointProps.controlClassName,id=breakpointProps.id,testId=breakpointProps.testId,fieldUniqueId=this.fieldUniqueId,focusHandlers=this.getInputFocusHandlers(),styles=mergeStyles(inputStyles,textAreaStyles),classes=cx(styles.input,styles.textArea,{disabled:disabled,invalid:!options.isValid},controlClassName);return React.createElement("textarea",_extends({ref:this.textAreaRef,id:fieldUniqueId,className:classes,value:value||"",onChange:this.handleChange,onKeyPress:this.onKeyPress},focusHandlers,{disabled:disabled,required:required,maxLength:maxLength,rows:rows},this.generateDataPathProperty(),this.generateAccessibilityProperties(),{"data-testid":testId||id}))}}]),TextAreaField}();_defineProperty(TextAreaField,"propTypes",{...FieldComponent.propTypes,rows:PropTypes.number,maxLength:PropTypes.number}),_defineProperty(TextAreaField,"defaultProps",{...FieldComponent.defaultProps,rows:3}),TextAreaField.__docgenInfo={description:"Renders a multi-line text area.\n@typedef {typeof TextAreaField.propTypes} TextAreaFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<TextAreaFieldPropTypes>>\n\n@metadataType field",methods:[{name:"renderControlReadOnly",docblock:"Render readonly control for TextArea.\n\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for TextArea."},{name:"onKeyPress",docblock:"Custom onKeyPress handler for `textarea` element. Allows to break line when pressing Alt/Option + Enter. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom onKeyPress handler for `textarea` element. Allows to break line when pressing Alt/Option + Enter. Uses `notifyChange` to invoke onValueChange callback"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - rendering options (like 'isInvalid', 'isValid', etc)\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"rendering options (like 'isInvalid', 'isValid', etc)",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"TextAreaField",props:{rows:{defaultValue:{value:"3",computed:!1},type:{name:"number"},required:!1,description:"The rows attribute specifies the visible height of a text area, in lines."},maxLength:{type:{name:"number"},required:!1,description:"Restricts the max length of the text in the text area field"}},composes:["../FieldComponent/FieldComponent"]},TextAreaField.__docgenInfo={componentName:"TextAreaField",packageName:"@jutro/components",description:"Renders a multi-line text area.",displayName:"TextAreaField",methods:[{name:"renderControlReadOnly",docblock:"Render readonly control for TextArea.\n\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for TextArea."},{name:"onKeyPress",docblock:"Custom onKeyPress handler for `textarea` element. Allows to break line when pressing Alt/Option + Enter. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom onKeyPress handler for `textarea` element. Allows to break line when pressing Alt/Option + Enter. Uses `notifyChange` to invoke onValueChange callback"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - rendering options (like 'isInvalid', 'isValid', etc)\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"rendering options (like 'isInvalid', 'isValid', etc)",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"TextAreaField",metadataType:"field",props:{rows:{type:{name:"number"},required:!1,description:"The rows attribute specifies the visible height of a text area, in lines.",defaultValue:{value:"3",computed:!1}},maxLength:{type:{name:"number"},required:!1,description:"Restricts the max length of the text in the text area field"}},composes:["../FieldComponent/FieldComponent"]};