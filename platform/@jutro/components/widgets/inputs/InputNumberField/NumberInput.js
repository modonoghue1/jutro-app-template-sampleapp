import _extends from"@babel/runtime-corejs3/helpers/extends";import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useContext,useState,useCallback,useMemo}from"react";import cx from"classnames";import{IntlContext}from"@jutro/locale";import{getDecimalRegex,isSafeNumber}from"@jutro/data";import{IconButton}from"../../IconButton/IconButton";import styles from"./NumberInput.module.css";export const NumberInput=({value:value,onChange:onChange,onFocus:onFocus,onBlur:onBlur,decimalPlaces:decimalPlaces,disabled:disabled,id:id,testId:testId,showGrouping:showGrouping=!0,...restProps})=>{const formatNumber=useContext(IntlContext).formatNumber,_useState=useState(),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setFocused=_useState2[1],numericValue=Number(value)||0,step=Number(restProps.step),handleValueChange=useCallback((event=>{var _event$target$value,_event$target;const newValue=null!==(_event$target$value=null===(_event$target=event.target)||void 0===_event$target?void 0:_event$target.value)&&void 0!==_event$target$value?_event$target$value:"";isSafeNumber(newValue)&&getDecimalRegex(decimalPlaces).test(newValue)&&onChange(newValue)}),[decimalPlaces,onChange]),handleUpArrowClick=useCallback((()=>{if(disabled)return;const newValue=numericValue+step;(void 0===restProps.max||newValue<=restProps.max)&&onChange(newValue)}),[numericValue,step]),handleDownArrowClick=useCallback((()=>{if(disabled)return;const newValue=numericValue-step;(void 0===restProps.min||newValue>=restProps.min)&&onChange(newValue)}),[numericValue,step]),handleOnArrowMouseDown=useCallback((event=>{event.preventDefault()}),[]),handleBlur=useCallback((event=>{setFocused(!1),onBlur(event)}),[onBlur]),handleFocus=useCallback((event=>{onFocus(event),setFocused(!0)}),[onFocus]),handleBeforeInput=useCallback((event=>{event.data.match(/^[0-9,-. ]+$/)||event.preventDefault()}),[]),formattedValue=useMemo((()=>value||0===value?formatNumber(value,{maximumFractionDigits:decimalPlaces,useGrouping:showGrouping}):""),[decimalPlaces,formatNumber,value,showGrouping]);return React.createElement("div",{className:styles.numberInput},React.createElement("input",_extends({id:id,"data-testid":testId,inputMode:"decimal",type:isFocused?"number":"text",value:isFocused?value:formattedValue,onChange:handleValueChange,onBlur:handleBlur,onBeforeInput:handleBeforeInput,onFocus:handleFocus,disabled:disabled},restProps)),isFocused&&React.createElement(React.Fragment,null,React.createElement(IconButton,{icon:"gw-arrow-drop-up",onMouseDown:handleOnArrowMouseDown,onClick:handleUpArrowClick,className:cx(styles.numberInputButton,styles.numberInputUp),tabIndex:-1}),React.createElement(IconButton,{icon:"gw-arrow-drop-down",onMouseDown:handleOnArrowMouseDown,onClick:handleDownArrowClick,className:cx(styles.numberInputButton,styles.numberInputDown),tabIndex:-1})))};NumberInput.__docgenInfo={description:"",methods:[],displayName:"NumberInput",props:{showGrouping:{defaultValue:{value:"true",computed:!1},required:!1}}},NumberInput.__docgenInfo={componentName:"NumberInput",packageName:"@jutro/components",description:"",displayName:"NumberInput",methods:[],actualName:"NumberInput",props:{showGrouping:{defaultValue:{value:"true",computed:!1},required:!1}}};