import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import _ from"lodash";import{isEmptyValue}from"@jutro/data";import{availableValueObjectShape,dataTypeShape,DATA_TYPE_STRING}from"@jutro/prop-types";import{FieldComponent}from"../FieldComponent/FieldComponent";import{GenericSelectControl,genericSelectInternalClassNamesShape}from"../GenericSelectControl/GenericSelectControl";import{getOptionCode,getOptionName}from"../availableValues";import{messages}from"./DropdownSelectField.messages";const isOther=value=>(null==value?void 0:value.toLowerCase)&&"other"===value.toLowerCase(),shouldRenderDetails=value=>_.isArray(value)?value.some(isOther):isOther(value),valuePropType=PropTypes.oneOfType([PropTypes.string,PropTypes.bool,PropTypes.array,PropTypes.number,availableValueObjectShape]),handleOnClick=e=>e.stopPropagation();export let DropdownSelectField=function(_FieldComponent){_inherits(DropdownSelectField,FieldComponent);var _super=_createSuper(DropdownSelectField);function DropdownSelectField(...args){var _this;return _classCallCheck(this,DropdownSelectField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"handleOnChange",(value=>{_this.beforeValue=_this.props.value,_this.notifyChange(_this.getNewValue(value))})),_this}return _createClass(DropdownSelectField,[{key:"render",value:function(){return _get(_getPrototypeOf(DropdownSelectField.prototype),"render",this).call(this)}},{key:"getNewValue",value:function({id:id,value:value}){if("placeholder"===id)return;const _this$props=this.props,dataType=_this$props.dataType,availableValues=_this$props.availableValues;return dataType===DATA_TYPE_STRING?value:availableValues.find((availableValue=>getOptionCode(availableValue).toString()===value))}},{key:"renderValue",get:function(){const value=this.props.value;if(_.isArray(value))return _.isObject(value[0])?value.map((({code:code,id:id})=>code||id)):value;if(isEmptyValue(value))return"";if(_.isObject(value)){return(value.code||value.id).toString()||""}return value.toString()}},{key:"placeholderText",get:function(){const _this$props2=this.props,placeholder=_this$props2.placeholder,label=_this$props2.label,translator=this.translator;return _.isObject(placeholder)?translator(placeholder):placeholder.replace("{LABEL}",translator(label))}},{key:"options",get:function(){const _this$props3=this.props,value=_this$props3.value,availableValues=_this$props3.availableValues,alwaysShowPlaceholder=_this$props3.alwaysShowPlaceholder,translator=this.translator,options=availableValues.map((option=>{const visible=option.visible,optionCode=getOptionCode(option),optionName=getOptionName(option);if(_.isBoolean(optionCode))return!1;if(!1===visible)return!1;const optionValue=_.isNumber(optionCode)?optionCode.toString():optionCode;return!!optionValue&&{label:translator(optionName),value:optionValue}})).filter(Boolean),hasPlaceholder=availableValues.some((({code:code})=>isEmptyValue(code)))&&availableValues.some((({id:id})=>isEmptyValue(id)));return!isEmptyValue(value)&&!alwaysShowPlaceholder||hasPlaceholder||options.unshift({label:this.placeholderText,id:"placeholder"}),options}},{key:"renderControl",value:function(breakpointProps,{isValid:isValid,labelId:labelId}={}){const disabled=breakpointProps.disabled,required=breakpointProps.required,children=breakpointProps.children,internalClassNames=breakpointProps.internalClassNames,defaultValue=breakpointProps.defaultValue,className=breakpointProps.className,searchable=breakpointProps.searchable,usePortal=breakpointProps.usePortal,isInitiallyOpen=breakpointProps.isInitiallyOpen,id=breakpointProps.id,testId=breakpointProps.testId,errorMessage=breakpointProps.errorMessage,registerValidation=breakpointProps.registerValidation,options=this.options,renderValue=this.renderValue,fieldUniqueId=this.fieldUniqueId,defaultValueStringified=defaultValue?defaultValue.toString():null,selectDefaultValue=defaultValueStringified?options.find((el=>el.value===defaultValueStringified)):null,detail=shouldRenderDetails(renderValue)&&children,renderValueForComponentValue=_.isObject(renderValue)?renderValue.id||renderValue.code:renderValue,componentValue=renderValueForComponentValue?options.filter((el=>el.value===renderValueForComponentValue)):null;return React.createElement("div",{onClick:handleOnClick,role:"presentation"},React.createElement(GenericSelectControl,{id:id,fieldUniqueId:fieldUniqueId,testId:testId,availableValues:options,className:className,internalClassNames:internalClassNames,defaultValue:selectDefaultValue,disabled:disabled,getOptionLabel:this.getOptionLabel,getOptionValue:this.getOptionValue,labelId:labelId,onBlur:this.handleBlur,onFocus:this.handleFocus,onValueChange:this.handleOnChange,placeholder:this.placeholderText,required:required,searchable:searchable,value:componentValue,valid:isValid,usePortal:usePortal,isInitiallyOpen:isInitiallyOpen,errorMessage:errorMessage,registerValidation:registerValidation}),detail&&React.createElement("div",null,detail))}},{key:"getOptionLabel",value:function({label:label}){return label}},{key:"getOptionValue",value:function({value:value}){return value}}],[{key:"isContentVisible",value:function(value){return shouldRenderDetails(value)}}]),DropdownSelectField}();_defineProperty(DropdownSelectField,"propTypes",{...FieldComponent.propTypes,value:valuePropType,defaultValue:valuePropType,dataType:dataTypeShape,availableValues:PropTypes.arrayOf(availableValueObjectShape),children:PropTypes.node,internalClassNames:genericSelectInternalClassNamesShape,alwaysShowPlaceholder:PropTypes.bool,searchable:PropTypes.bool,isInitiallyOpen:PropTypes.bool,usePortal:PropTypes.bool}),_defineProperty(DropdownSelectField,"defaultProps",{...FieldComponent.defaultProps,availableValues:[],placeholder:messages.defaultPlaceholder,dataType:DATA_TYPE_STRING,searchable:!1}),_defineProperty(DropdownSelectField,"contextType",FieldComponent.contextType),DropdownSelectField.__docgenInfo={description:"Renders a dropdown where the user can select one of the values. You specify the allowed values and the\naction using props.\n\n@typedef {typeof DropdownSelectField.propTypes} DropdownSelectFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<DropdownSelectFieldPropTypes>>\n\n@metadataType field",methods:[{name:"isContentVisible",docblock:null,modifiers:["static"],params:[{name:"value",type:null}],returns:null},{name:"getNewValue",docblock:null,modifiers:[],params:[{name:"{ id, value }",type:null}],returns:null},{name:"handleOnChange",docblock:"Handler function for when the select field value is changed\n@param {object} value - value that is passed when a change occurs",modifiers:[],params:[{name:"value",description:"value that is passed when a change occurs",type:{name:"object"},optional:!1}],returns:null,description:"Handler function for when the select field value is changed"},{name:"renderValue",docblock:null,modifiers:["get"],params:[],returns:null},{name:"placeholderText",docblock:null,modifiers:["get"],params:[],returns:null},{name:"options",docblock:null,modifiers:["get"],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} param1\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"{ isValid, labelId }"}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"getOptionLabel",docblock:null,modifiers:[],params:[{name:"{ label }",type:null}],returns:null},{name:"getOptionValue",docblock:null,modifiers:[],params:[{name:"{ value }",type:null}],returns:null}],displayName:"DropdownSelectField",props:{availableValues:{defaultValue:{value:"[]",computed:!1},type:{name:"arrayOf",value:{name:"custom",raw:"availableValueObjectShape"}},required:!1,description:"Array of choice objects to display; choice objects contains 'code' and 'name'"},placeholder:{defaultValue:{value:"messages.defaultPlaceholder",computed:!0},required:!1},dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"The format of the value"},searchable:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Allows you to type in dropdown field to find options."},value:{type:{name:"custom",raw:"valuePropType"},required:!1,description:"Selected item value"},defaultValue:{type:{name:"custom",raw:"valuePropType"},required:!1,description:"Default value to set if there is no value present."},children:{type:{name:"node"},required:!1,description:"Node to render when 'other' value is selected, as processed by `renderContentFromMetadata` method\n(won't be rendered when value is not 'other')"},internalClassNames:{type:{name:"custom",raw:"genericSelectInternalClassNamesShape"},required:!1,description:"Map of CSS class names for overriding individual parts of component's styles"},alwaysShowPlaceholder:{type:{name:"bool"},required:!1,description:"When set to `true` options will show the placeholder text and it will be the first option."},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},usePortal:{type:{name:"bool"},required:!1,description:"Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent"}},composes:["../FieldComponent/FieldComponent"]},DropdownSelectField.__docgenInfo={componentName:"DropdownSelectField",packageName:"@jutro/components",description:"Renders a dropdown where the user can select one of the values. You specify the allowed values and the\naction using props.",displayName:"DropdownSelectField",methods:[{name:"isContentVisible",docblock:null,modifiers:["static"],params:[{name:"value",optional:void 0,type:null}],returns:null},{name:"getNewValue",docblock:null,modifiers:[],params:[{name:"{ id, value }",optional:void 0,type:null}],returns:null},{name:"handleOnChange",docblock:"Handler function for when the select field value is changed\n@param {object} value - value that is passed when a change occurs",modifiers:[],params:[{name:"value",description:"value that is passed when a change occurs",type:{name:"object"},optional:!1}],returns:null,description:"Handler function for when the select field value is changed"},{name:"renderValue",docblock:null,modifiers:["get"],params:[],returns:null},{name:"placeholderText",docblock:null,modifiers:["get"],params:[],returns:null},{name:"options",docblock:null,modifiers:["get"],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} param1\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"{ isValid, labelId }"}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"getOptionLabel",docblock:null,modifiers:[],params:[{name:"{ label }",optional:void 0,type:null}],returns:null},{name:"getOptionValue",docblock:null,modifiers:[],params:[{name:"{ value }",optional:void 0,type:null}],returns:null}],actualName:"DropdownSelectField",metadataType:"field",props:{value:{type:{name:"custom",raw:"valuePropType"},required:!1,description:"Selected item value"},defaultValue:{type:{name:"custom",raw:"valuePropType"},required:!1,description:"Default value to set if there is no value present."},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"The format of the value",defaultValue:{value:"'string'",computed:!1}},availableValues:{type:{name:"arrayOf",value:{name:"union",value:[{name:"shape",value:{code:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},name:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}},{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},displayName:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}}]}},required:!1,description:"Array of choice objects to display; choice objects contains 'code' and 'name'",defaultValue:{value:"[]",computed:!1}},children:{type:{name:"node"},required:!1,description:"Node to render when 'other' value is selected, as processed by `renderContentFromMetadata` method\n(won't be rendered when value is not 'other')"},internalClassNames:{type:{name:"shape",value:{control:{name:"string",description:"CSS class name for control",required:!1},controlFocused:{name:"string",description:"CSS class name for focused control",required:!1},menuList:{name:"string",description:"CSS class name for list of options",required:!1},option:{name:"string",description:"CSS class name for option",required:!1},selectIcon:{name:"string",description:"CSS class name for select icon",required:!1}}},required:!1,description:"Map of CSS class names for overriding individual parts of component's styles"},alwaysShowPlaceholder:{type:{name:"bool"},required:!1,description:"When set to `true` options will show the placeholder text and it will be the first option."},searchable:{type:{name:"bool"},required:!1,description:"Allows you to type in dropdown field to find options.",defaultValue:{value:"false",computed:!1}},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},usePortal:{type:{name:"bool"},required:!1,description:"Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent"},placeholder:{defaultValue:{value:"messages.defaultPlaceholder",computed:!0},required:!1}},composes:["../FieldComponent/FieldComponent"]};