/// <reference types="react" />
import { DescribeMeta } from '../types';
export declare const renderingTests: <Props extends import("prop-types").InferPropsInner<Pick<{
    id: import("prop-types").Validator<string>;
    label: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    secondaryLabel: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    tooltip: import("prop-types").Requireable<string | import("prop-types").InferProps<{
        id: import("prop-types").Requireable<string>;
        icon: import("prop-types").Requireable<string>;
        placement: import("prop-types").Requireable<"top" | "top-start" | "top-end" | "right" | "right-start" | "right-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "auto" | "auto-start" | "auto-end">;
        text: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        title: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        link: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        href: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        renderContent: import("prop-types").Requireable<(...args: any[]) => any>;
    }>>;
    placeholder: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    required: import("prop-types").Requireable<boolean | any[]>;
    schemaRequired: import("prop-types").Requireable<boolean>;
    readOnly: import("prop-types").Requireable<boolean>;
    disabled: import("prop-types").Requireable<boolean>;
    nullable: import("prop-types").Requireable<boolean>;
    visible: import("prop-types").Requireable<boolean>;
    value: import("prop-types").Requireable<any>;
    defaultValue: import("prop-types").Requireable<any>;
    autoTrim: import("prop-types").Requireable<boolean>;
    onValueChange: import("prop-types").Requireable<(...args: any[]) => any>;
    onValidationChange: import("prop-types").Requireable<(...args: any[]) => any>;
    onBlur: import("prop-types").Requireable<(...args: any[]) => any>;
    onFocus: import("prop-types").Requireable<(...args: any[]) => any>;
    model: import("prop-types").Requireable<object>;
    path: import("prop-types").Requireable<string>;
    showErrors: import("prop-types").Requireable<boolean>;
    showRequired: import("prop-types").Requireable<boolean>;
    showOptional: import("prop-types").Requireable<boolean>;
    validationMessages: import("prop-types").Requireable<(import("@jutro/prop-types").IntlMessageShape | null | undefined)[]>;
    layout: import("prop-types").Requireable<string>;
    hideLabel: import("prop-types").Requireable<boolean>;
    className: import("prop-types").Requireable<string>;
    contentContainerClassName: import("prop-types").Requireable<string>;
    controlClassName: import("prop-types").Requireable<string>;
    labelClassName: import("prop-types").Requireable<string>;
    secondaryLabelClassName: import("prop-types").Requireable<string>;
    labelContainerClassName: import("prop-types").Requireable<string>;
    showValidationIcon: import("prop-types").Requireable<boolean>;
    dataPath: import("prop-types").Requireable<string>;
    validator: import("prop-types").Requireable<import("prop-types").InferProps<{
        pattern: import("prop-types").Validator<string>;
        message: import("prop-types").Validator<import("@jutro/prop-types").IntlMessageShape>;
    }>>;
    requiredFieldValidationMessage: import("prop-types").Requireable<string>;
    successMessage: import("prop-types").Requireable<string>;
    messageProps: import("prop-types").Requireable<import("prop-types").InferProps<{
        requiredField: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    }>>;
    labelPosition: import("prop-types").Requireable<string>;
    phone: import("prop-types").Requireable<object>;
    phoneWide: import("prop-types").Requireable<object>;
    tablet: import("prop-types").Requireable<object>;
    inputType: import("prop-types").Requireable<string>;
    testId: import("prop-types").Requireable<string>;
    registerValidation: import("prop-types").Requireable<(...args: any[]) => any>;
    enableMultipleValidation: import("prop-types").Requireable<boolean>;
}, "id">> & Partial<import("prop-types").InferPropsInner<Pick<{
    id: import("prop-types").Validator<string>;
    label: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    secondaryLabel: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    tooltip: import("prop-types").Requireable<string | import("prop-types").InferProps<{
        id: import("prop-types").Requireable<string>;
        icon: import("prop-types").Requireable<string>;
        placement: import("prop-types").Requireable<"top" | "top-start" | "top-end" | "right" | "right-start" | "right-end" | "bottom" | "bottom-start" | "bottom-end" | "left" | "left-start" | "left-end" | "auto" | "auto-start" | "auto-end">;
        text: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        title: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        link: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        href: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
        renderContent: import("prop-types").Requireable<(...args: any[]) => any>;
    }>>;
    placeholder: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    required: import("prop-types").Requireable<boolean | any[]>;
    schemaRequired: import("prop-types").Requireable<boolean>;
    readOnly: import("prop-types").Requireable<boolean>;
    disabled: import("prop-types").Requireable<boolean>;
    nullable: import("prop-types").Requireable<boolean>;
    visible: import("prop-types").Requireable<boolean>;
    value: import("prop-types").Requireable<any>;
    defaultValue: import("prop-types").Requireable<any>;
    autoTrim: import("prop-types").Requireable<boolean>;
    onValueChange: import("prop-types").Requireable<(...args: any[]) => any>;
    onValidationChange: import("prop-types").Requireable<(...args: any[]) => any>;
    onBlur: import("prop-types").Requireable<(...args: any[]) => any>;
    onFocus: import("prop-types").Requireable<(...args: any[]) => any>;
    model: import("prop-types").Requireable<object>;
    path: import("prop-types").Requireable<string>;
    showErrors: import("prop-types").Requireable<boolean>;
    showRequired: import("prop-types").Requireable<boolean>;
    showOptional: import("prop-types").Requireable<boolean>;
    validationMessages: import("prop-types").Requireable<(import("@jutro/prop-types").IntlMessageShape | null | undefined)[]>;
    layout: import("prop-types").Requireable<string>;
    hideLabel: import("prop-types").Requireable<boolean>;
    className: import("prop-types").Requireable<string>;
    contentContainerClassName: import("prop-types").Requireable<string>;
    controlClassName: import("prop-types").Requireable<string>;
    labelClassName: import("prop-types").Requireable<string>;
    secondaryLabelClassName: import("prop-types").Requireable<string>;
    labelContainerClassName: import("prop-types").Requireable<string>;
    showValidationIcon: import("prop-types").Requireable<boolean>;
    dataPath: import("prop-types").Requireable<string>;
    validator: import("prop-types").Requireable<import("prop-types").InferProps<{
        pattern: import("prop-types").Validator<string>;
        message: import("prop-types").Validator<import("@jutro/prop-types").IntlMessageShape>;
    }>>;
    requiredFieldValidationMessage: import("prop-types").Requireable<string>;
    successMessage: import("prop-types").Requireable<string>;
    messageProps: import("prop-types").Requireable<import("prop-types").InferProps<{
        requiredField: import("react").Requireable<import("@jutro/prop-types").IntlMessageShape>;
    }>>;
    labelPosition: import("prop-types").Requireable<string>;
    phone: import("prop-types").Requireable<object>;
    phoneWide: import("prop-types").Requireable<object>;
    tablet: import("prop-types").Requireable<object>;
    inputType: import("prop-types").Requireable<string>;
    testId: import("prop-types").Requireable<string>;
    registerValidation: import("prop-types").Requireable<(...args: any[]) => any>;
    enableMultipleValidation: import("prop-types").Requireable<boolean>;
}, "secondaryLabel" | "path" | "className" | "label" | "disabled" | "visible" | "value" | "onFocus" | "onBlur" | "messageProps" | "tooltip" | "phone" | "phoneWide" | "tablet" | "layout" | "defaultValue" | "placeholder" | "labelClassName" | "required" | "schemaRequired" | "readOnly" | "nullable" | "autoTrim" | "onValueChange" | "onValidationChange" | "model" | "showErrors" | "showRequired" | "showOptional" | "validationMessages" | "hideLabel" | "contentContainerClassName" | "controlClassName" | "secondaryLabelClassName" | "labelContainerClassName" | "showValidationIcon" | "dataPath" | "validator" | "requiredFieldValidationMessage" | "successMessage" | "labelPosition" | "inputType" | "testId" | "registerValidation" | "enableMultipleValidation">>>>(meta: DescribeMeta<Props>) => void;
