import{screen}from"@testing-library/react";import{getTranslation}from"@jutro/test";import{messages}from"../../FieldComponent/FieldComponent.messages";export const renderingTests=meta=>{const fieldValues=meta.fieldValues,getControl=meta.getControl,renderField=meta.renderField,itWithSkip=meta.itWithSkip;describe("rendering",(()=>{itWithSkip("renders with label",(()=>{renderField({label:"Label"}),expect(screen.getByText("Label")).toBeInTheDocument()})),itWithSkip("renders with required indicator if required and showRequired is true",(()=>{renderField({label:"Label",required:!0,showRequired:!0}),expect(screen.getByTestId("field-component-label")).toHaveTextContent("*Label")})),itWithSkip("renders without required indicator if required and showOptional is true",(()=>{renderField({label:"Label",required:!0,showOptional:!0}),expect(screen.getByTestId("field-component-label")).not.toHaveTextContent("*Label")})),itWithSkip("renders with optional indicator if not required and showOptional is true",(()=>{renderField({label:"Label",required:!1,showOptional:!0}),expect(screen.getByTestId("field-component-label")).toHaveTextContent(`Label${getTranslation(messages.optional)}`)})),itWithSkip("renders without optional indicator if not required and showRequired is true",(()=>{renderField({label:"Label",required:!1,showRequired:!0}),expect(screen.getByTestId("field-component-label")).not.toHaveTextContent(`Label${getTranslation(messages.optional)}`)})),itWithSkip("renders with secondary label with classname",(()=>{renderField({secondaryLabel:"Secondary Label",secondaryLabelClassName:"secondaryLabelClassName"}),expect(screen.getByText("Secondary Label")).toHaveClass("secondaryLabelClassName")})),itWithSkip("renders with placeholder",(()=>{renderField({placeholder:"Placeholder"}),expect(screen.getByPlaceholderText("Placeholder")).toBeInTheDocument()})),itWithSkip("renders as required",(()=>{renderField({required:!0}),expect(getControl()).toBeRequired()})),itWithSkip("renders as disabled",(()=>{renderField({disabled:!0}),expect(getControl()).toBeDisabled()})),itWithSkip("does not render if visible prop is false",(()=>{const container=renderField({visible:!1}).container;expect(container.firstChild).toBeNull()})),itWithSkip("renders with successMessage",(()=>{renderField({successMessage:"successMessage"}),expect(screen.getByText("successMessage")).toBeInTheDocument()})),itWithSkip("renders as read-only",(()=>{const value=fieldValues[0];renderField({readOnly:!0,value:value}),expect(getControl()).toBeNull(),expect(screen.getByText(value)).toBeInTheDocument()}))}))};