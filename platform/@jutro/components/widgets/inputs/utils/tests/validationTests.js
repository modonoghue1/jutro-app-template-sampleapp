import{screen}from"@testing-library/react";import{getTranslation}from"@jutro/test";import{messages}from"../../FieldComponent/FieldComponent.messages";export const validationTests=meta=>{const fieldValues=meta.fieldValues,getControl=meta.getControl,renderField=meta.renderField,rerenderField=meta.rerenderField,itWithSkip=meta.itWithSkip,changeValue=meta.changeValue,incorrectFieldValues=meta.incorrectFieldValues;describe("validation",(()=>{itWithSkip("renders with validation messages",(()=>{const validationChangeSpy=jest.fn(),message="Something went wrong";renderField({onValidationChange:validationChangeSpy,showErrors:!0,validationMessages:[message]}),expect(screen.getByText(message)).toBeInTheDocument(),expect(validationChangeSpy).toHaveBeenCalledWith(!1,void 0,[message])})),itWithSkip("onValidationChange is not called when defaultValue is valid",(()=>{const onValidationChange=jest.fn();renderField({onValidationChange:onValidationChange,value:fieldValues[0]}),expect(onValidationChange).not.toHaveBeenCalled()})),itWithSkip("onValidationChange is called when field value does not match pattern from validator prop",(()=>{const onValidationChange=jest.fn();renderField({onValidationChange:onValidationChange,validator:{pattern:fieldValues[0],message:"Wrong value"},path:"field.value",value:fieldValues[0]}),changeValue(getControl(),fieldValues[1]),expect(onValidationChange).toHaveBeenCalledWith(!1,"field.value",["Wrong value"])})),itWithSkip("when required and showErrors props are true field renders with validation error",(()=>{const onValidationChange=jest.fn();renderField({onValidationChange:onValidationChange,required:!0,showErrors:!0}),expect(onValidationChange).toHaveBeenCalledWith(!1,void 0,[getTranslation(messages.requiredField)])})),itWithSkip("when required is true and field is cleared, field renders with validation error",(()=>{const validationChangeSpy=jest.fn(),value=fieldValues[0],rerender=renderField({onValidationChange:validationChangeSpy,required:!0,value:value}).rerender;changeValue(getControl(),null),rerenderField({onValidationChange:validationChangeSpy,required:!0,value:null},rerender),expect(validationChangeSpy).toHaveBeenCalledWith(!1,void 0,expect.anything())})),itWithSkip("overrides default required message using requiredFieldValidationMessage prop",(()=>{const onValidationChange=jest.fn();renderField({onValidationChange:onValidationChange,required:!0,showErrors:!0,requiredFieldValidationMessage:"Custom required message"}),expect(onValidationChange).toHaveBeenCalledWith(!1,void 0,["Custom required message"])})),itWithSkip("overrides default required message using messageProps prop",(()=>{const onValidationChange=jest.fn();renderField({onValidationChange:onValidationChange,required:!0,showErrors:!0,messageProps:{requiredField:"Custom required message"}}),expect(onValidationChange).toHaveBeenCalledWith(!1,void 0,["Custom required message"])})),incorrectFieldValues.length>0&&(itWithSkip("renders with error for incorrect values",(()=>{incorrectFieldValues.forEach((value=>{const validationChangeSpy=jest.fn();renderField({onValidationChange:validationChangeSpy,value:value}),expect(validationChangeSpy).toHaveBeenCalledWith(!1,void 0,expect.anything())}))})),itWithSkip("renders with error for incorrect default values",(()=>{incorrectFieldValues.forEach((value=>{const validationChangeSpy=jest.fn();renderField({onValidationChange:validationChangeSpy,defaultValue:value}),expect(validationChangeSpy).toHaveBeenCalledWith(!1,void 0,expect.anything())}))})),itWithSkip("renders with custom error for incorrect values",(()=>{incorrectFieldValues.forEach((value=>{const validationChangeSpy=jest.fn();renderField({onValidationChange:validationChangeSpy,value:value,validationMessages:["Wrong value"]}),expect(validationChangeSpy).toHaveBeenCalledWith(!1,void 0,["Wrong value"])}))})))}))};