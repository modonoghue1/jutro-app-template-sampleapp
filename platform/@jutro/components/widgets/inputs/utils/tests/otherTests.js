import _extends from"@babel/runtime-corejs3/helpers/extends";import React from"react";import{renderWithTranslatorAndRouterContext}from"@jutro/test-rtl";import{BreakpointTrackerContext}from"@jutro/layout";import{screen,fireEvent}from"@testing-library/react";export const otherTests=meta=>{const name=meta.name,Component=meta.component,defaultProps=meta.defaultProps,fieldValues=meta.fieldValues,getControl=meta.getControl,renderField=meta.renderField,rerenderField=meta.rerenderField,itWithSkip=meta.itWithSkip,changeValue=meta.changeValue;describe("others",(()=>{itWithSkip("applies breakpoint properties",(()=>{["phone","phoneWide","tablet"].forEach((breakpoint=>{const label=`Label ${breakpoint}`,breakpointProps={[breakpoint]:{label:label}};renderWithTranslatorAndRouterContext(React.createElement(BreakpointTrackerContext.Provider,{value:breakpoint},React.createElement(Component,_extends({},defaultProps,{id:name,label:name},breakpointProps)))),expect(screen.getByText(label)).toBeInTheDocument()}))})),itWithSkip("set value to initially empty field",(()=>{const valueChangeSpy=jest.fn(),value=fieldValues[0];renderField({onValueChange:valueChangeSpy}),changeValue(getControl(),value),expect(valueChangeSpy).toHaveBeenCalledWith(value,void 0,expect.anything())})),itWithSkip("nullable prop works when field is not required",(()=>{const valueChangeSpy=jest.fn(),value=fieldValues[0];renderField({onValueChange:valueChangeSpy,nullable:!0,value:value}),changeValue(getControl(),null),expect(valueChangeSpy).toHaveBeenCalledWith(void 0,void 0,expect.anything())})),itWithSkip("nullable prop works when field is required",(async()=>{const valueChangeSpy=jest.fn(),validationChangeSpy=jest.fn(),value=fieldValues[0],rerender=renderField({onValueChange:valueChangeSpy,onValidationChange:validationChangeSpy,nullable:!0,required:!0,value:value}).rerender;changeValue(getControl(),null),rerenderField({onValueChange:valueChangeSpy,onValidationChange:validationChangeSpy,nullable:!0,required:!0,value:null},rerender),expect(valueChangeSpy).toHaveBeenCalledWith(void 0,void 0,expect.anything()),expect(validationChangeSpy).toHaveBeenCalledWith(!1,void 0,expect.anything())})),fieldValues.some((value=>"string"==typeof value))&&itWithSkip("autoTrim prop works",(()=>{const valueChangeSpy=jest.fn(),baseValue=fieldValues.find((value=>"string"==typeof value));renderField({onValueChange:valueChangeSpy,autoTrim:!0}),changeValue(getControl(),`\t${baseValue}  `),expect(valueChangeSpy).toHaveBeenCalledWith(baseValue,void 0,expect.anything())})),itWithSkip("blur and focus work",(()=>{const onFocus=jest.fn(),onBlur=jest.fn();renderField({onFocus:onFocus,onBlur:onBlur});const field=getControl();expect(onFocus).toHaveBeenCalledTimes(0),expect(onBlur).toHaveBeenCalledTimes(0),fireEvent.focus(field),expect(onFocus).toHaveBeenCalledTimes(1),expect(onBlur).toHaveBeenCalledTimes(0),fireEvent.blur(field),expect(onFocus).toHaveBeenCalledTimes(1),expect(onBlur).toHaveBeenCalledTimes(1)}))}))};