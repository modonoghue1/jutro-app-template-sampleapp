import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import cx from"classnames";import{uniqueInnerId}from"@jutro/platform";import{defaultAvailableValuePropType,dataTypeShape}from"@jutro/prop-types";import{ToggleField}from"../ToggleField/ToggleField";import{FieldComponent}from"../FieldComponent/FieldComponent";import{AnimationGroup}from"../../AnimationGroup/AnimationGroup";import{animationDelayDefault}from"../../config/animationMap";import styles from"./ToggleDetailField.module.css";export let ToggleDetailField=function(_ToggleField){_inherits(ToggleDetailField,ToggleField);var _super=_createSuper(ToggleDetailField);function ToggleDetailField(){return _classCallCheck(this,ToggleDetailField),_super.apply(this,arguments)}return _createClass(ToggleDetailField,[{key:"generateAccessibilityProperties",value:function(){const id=this.props.id,_uniqueInnerId=uniqueInnerId(id,"messageId","detailId");return{"aria-describedby":_uniqueInnerId.messageId,"aria-controls":_uniqueInnerId.detailId}}},{key:"render",value:function(){return _get(_getPrototypeOf(ToggleDetailField.prototype),"render",this).call(this)}},{key:"renderControl",value:function(breakpointProps){const detailElement=breakpointProps.detailElement,animation=breakpointProps.animation,controlClassName=breakpointProps.controlClassName,fieldUniqueId=this.fieldUniqueId,detailId=uniqueInnerId(fieldUniqueId,"detailId").detailId,control=_get(_getPrototypeOf(ToggleDetailField.prototype),"renderControl",this).call(this,breakpointProps),value=this.getDataTypeAwareSelectedValue(),detailVisible=null!=value&&"true"===value.toString()&&detailElement,classes=cx(styles.toggleDetail,controlClassName),otherContent=React.createElement("div",{id:detailId,className:styles.otherSection,role:"region","aria-live":"assertive","aria-hidden":!detailVisible},detailVisible&&React.createElement(AnimationGroup,{animation:animation||"insert",appear:!0,timeout:{appear:animationDelayDefault}},detailElement));return React.createElement("div",{className:classes},control,otherContent)}}]),ToggleDetailField}();_defineProperty(ToggleDetailField,"propTypes",{...FieldComponent.propTypes,value:defaultAvailableValuePropType,defaultValue:defaultAvailableValuePropType,dataType:dataTypeShape,availableValues:PropTypes.array,fullWidth:PropTypes.bool,detailElement:PropTypes.node,animation:PropTypes.string}),ToggleDetailField.displayName="ToggleDetailField",ToggleDetailField.__docgenInfo={description:"IN PROGRESS: Renders buttons that allow you to toggle between the available values. Can display additional content\nwhen the user selects a particular value.\n@typedef {typeof ToggleDetailField.propTypes} ToggleDetailFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<ToggleDetailFieldPropTypes>>\n\n@metadataType field",methods:[{name:"generateAccessibilityProperties",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"ToggleDetailField",props:{value:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"Boolean or string value"},defaultValue:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"Default value"},dataType:{type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"The format of the value"},availableValues:{type:{name:"array"},required:!1,description:"Array of choice objects to display; choice objects contains 'code' and 'name'; if not provided, default 'Yes'/'No' will be used"},fullWidth:{type:{name:"bool"},required:!1,description:"If true, displays with full width"},detailElement:{type:{name:"node"},required:!1,description:'Node to render when the "other" value is selected'},animation:{type:{name:"string"},required:!1,description:"Animation passed to AnimationGroup"}},composes:["../FieldComponent/FieldComponent"]},ToggleDetailField.__docgenInfo={componentName:"ToggleDetailField",packageName:"@jutro/components",description:"IN PROGRESS: Renders buttons that allow you to toggle between the available values. Can display additional content\nwhen the user selects a particular value.",displayName:"ToggleDetailField",methods:[{name:"generateAccessibilityProperties",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"ToggleDetailField",metadataType:"field",props:{value:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"Boolean or string value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"Default value"},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"The format of the value"},availableValues:{type:{name:"array"},required:!1,description:"Array of choice objects to display; choice objects contains 'code' and 'name'; if not provided, default 'Yes'/'No' will be used"},fullWidth:{type:{name:"bool"},required:!1,description:"If true, displays with full width"},detailElement:{type:{name:"node"},required:!1,description:'Node to render when the "other" value is selected'},animation:{type:{name:"string"},required:!1,description:"Animation passed to AnimationGroup"}},composes:["../FieldComponent/FieldComponent"]};