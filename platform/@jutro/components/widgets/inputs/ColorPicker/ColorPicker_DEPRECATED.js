import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import ReactDOM from"react-dom";import{ChromePicker}from"react-color";import{mergeStyles,logDeprecationMessage}from"@jutro/platform";import cx from"classnames";import _ from"lodash";import inputStyles from"../InputField/InputField.module.css";import colorPickerStyles from"./ColorPicker_DEPRECATED.module.css";import{FieldComponent}from"../FieldComponent/FieldComponent";export let ColorPicker=function(_FieldComponent){_inherits(ColorPicker,FieldComponent);var _super=_createSuper(ColorPicker);function ColorPicker(props){var _this;return _classCallCheck(this,ColorPicker),_this=_super.call(this,props),_defineProperty(_assertThisInitialized(_this),"setClickListener",(()=>{window.addEventListener("click",_this.hideColorSelector)})),_defineProperty(_assertThisInitialized(_this),"unsetClickListener",(()=>{window.removeEventListener("click",_this.hideColorSelector)})),_defineProperty(_assertThisInitialized(_this),"setPageListeners",(()=>{window.addEventListener("scroll",_this.updatePlacement),window.addEventListener("resize",_this.updatePlacement)})),_defineProperty(_assertThisInitialized(_this),"unsetPageListeners",(()=>{window.removeEventListener("scroll",_this.updatePlacement),window.removeEventListener("resize",_this.updatePlacement)})),_defineProperty(_assertThisInitialized(_this),"hideColorSelector",(evt=>{if(!_this.state.isOpen)return;const colorSelector=_this.colorSelectorRef.current;ReactDOM.findDOMNode(_assertThisInitialized(_this)).contains(evt.target)||colorSelector.contains(evt.target)||_this.toggleColorSelector(!1)})),_defineProperty(_assertThisInitialized(_this),"toggleColorSelector",(showOrHide=>{const newIsOpen=null==showOrHide?!_this.state.isOpen:showOrHide;_this.state.isOpen!==newIsOpen&&_this.setState({isOpen:newIsOpen})})),_defineProperty(_assertThisInitialized(_this),"updatePlacement",(()=>{if(!_this.colorSelectorRef.current)return;const viewportOffset=_this.inputRef.current.getBoundingClientRect(),colorSelectorHeight=_this.getColorSelectorHeight(),fitsTop=viewportOffset.top>colorSelectorHeight,fitsBottom=window.innerHeight-viewportOffset.bottom>colorSelectorHeight;let newPlacement=_this.props.placement;fitsTop&&!fitsBottom?newPlacement="top":fitsBottom&&!fitsTop&&(newPlacement="bottom"),_this.setState({placement:newPlacement})})),_defineProperty(_assertThisInitialized(_this),"handleTextInputChange",(evt=>{const newVal=evt.target.value.trim();_this.notifyChange(newVal)})),_defineProperty(_assertThisInitialized(_this),"handleOnBlur",(evt=>{_this.setState({editMode:!1}),_this.getInputFocusHandlers().onBlur(evt)})),_defineProperty(_assertThisInitialized(_this),"handleOnFocus",(evt=>{_this.setState({editMode:!0}),_this.getInputFocusHandlers().onFocus(evt)})),_defineProperty(_assertThisInitialized(_this),"inputSectionKeyDown",(evt=>{" "!==evt.key||_this.props.openTyping&&_this.state.editMode||(evt.preventDefault(),_this.toggleColorSelector())})),_defineProperty(_assertThisInitialized(_this),"onColorSelectorChangeComplete",(color=>_this.notifyChange(_this.parseInputValue(color)))),_defineProperty(_assertThisInitialized(_this),"setHashCSSVariable",(input=>new RegExp(/^([A-Fa-f0-9]{6}$)/).test(input)?`#${input}`:input)),_defineProperty(_assertThisInitialized(_this),"keepSelectorOpen",(evt=>{_this.state.isOpen&&evt.stopPropagation()})),_this.state={isOpen:props.isInitiallyOpen,placement:props.placement,editMode:!1},_this.colorSelectorRef=React.createRef(),_this.inputRef=React.createRef(),_this}return _createClass(ColorPicker,[{key:"componentDidMount",value:function(){logDeprecationMessage("ColorPicker","","Please create custom components if needed, not supported by Jutro anymore","7.0"),this.state.isOpen&&this.setClickListener(),this.setPageListeners()}},{key:"componentWillUnmount",value:function(){this.unsetClickListener(),this.unsetPageListeners()}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.props.isInitiallyOpen!==prevProps.isInitiallyOpen&&this.toggleColorSelector(this.props.isInitiallyOpen),this.state.isOpen!==prevState.isOpen&&(this.state.isOpen?this.setClickListener():this.unsetClickListener())}},{key:"render",value:function(){return _get(_getPrototypeOf(ColorPicker.prototype),"render",this).call(this)}},{key:"getColorSelectorHeight",value:function(){const inputFieldOffset=ReactDOM.findDOMNode(this).querySelector('div[class*="contentContainer"]').getBoundingClientRect(),colorSelectorOffset=this.colorSelectorRef.current.getBoundingClientRect(),topHeight=inputFieldOffset.top-colorSelectorOffset.top,bottomHeight=colorSelectorOffset.bottom-inputFieldOffset.bottom;return Math.max(topHeight,bottomHeight)}},{key:"parseInputValue",value:function(color){const source=color.source,value=color[source];switch(source){case"rgb":return`rgba(${value.r}, ${value.g}, ${value.b}, ${value.a})`;case"hsl":return`hsl(${Math.round(value.h)}, ${Math.round(100*value.s)}%, ${Math.round(100*value.l)}%)`;default:return value}}},{key:"renderControl",value:function(breakpointProps,options){const id=breakpointProps.id,disabled=breakpointProps.disabled,value=breakpointProps.value,required=breakpointProps.required,openTyping=breakpointProps.openTyping,colorPreviewSize=breakpointProps.colorPreviewSize,placeholder=breakpointProps.placeholder,testId=breakpointProps.testId,_this$state=this.state,editMode=_this$state.editMode,isOpen=_this$state.isOpen,placement=_this$state.placement,fieldUniqueId=this.fieldUniqueId,inputVal=_.isObject(value)?this.parseInputValue(value):this.setHashCSSVariable(value),color=_.isObject(value)?value:inputVal,combinedStyles=mergeStyles(inputStyles,colorPickerStyles),wrapperClasses=cx(combinedStyles.colorPicker,{invalid:!options.isValid},{disabled:disabled}),inputSectionClasses=cx(combinedStyles.colorPicker,combinedStyles.input,combinedStyles.inputContainer,{[combinedStyles.focusWithin]:editMode},{invalid:!options.isValid},{disabled:disabled}),popoverClasses=cx(combinedStyles.popover,{[combinedStyles.top]:"top"===placement},{[combinedStyles.bottom]:"bottom"===placement}),selectorWrapperClasses=cx(combinedStyles.selectorWrapper),colorPreviewStyles=cx(colorPickerStyles.colorPreview,{[colorPickerStyles.previewSmall]:"small"===colorPreviewSize}),colorPickerInputClasses=cx(combinedStyles.colorPickerInput,{[combinedStyles.openTyping]:!0===openTyping}),previewColorStyle={"--color-picker-preview-value":inputVal},colorPreview=React.createElement("span",{style:previewColorStyle,className:colorPreviewStyles}),inputField=React.createElement("input",_extends({id:fieldUniqueId,"data-testid":testId||id,type:"text",ref:this.inputRef,readOnly:!openTyping,className:colorPickerInputClasses,onClick:openTyping?this.keepSelectorOpen:void 0,value:inputVal,placeholder:placeholder,onChange:this.handleTextInputChange,onBlur:this.handleOnBlur,onFocus:this.handleOnFocus,disabled:disabled,required:required},this.generateDataPathProperty(),this.generateAccessibilityProperties())),colorSelector=React.createElement("div",{className:popoverClasses,ref:this.colorSelectorRef},React.createElement(ChromePicker,{color:color,onChangeComplete:this.onColorSelectorChangeComplete})),inputSection=React.createElement("div",{className:inputSectionClasses,onClick:disabled?void 0:()=>this.toggleColorSelector(!isOpen),"aria-disabled":disabled,onKeyPress:disabled?void 0:this.inputSectionKeyDown,role:"button",tabIndex:0},colorPreview,inputField),selectorWrapper=React.createElement("div",{className:selectorWrapperClasses},isOpen&&colorSelector);return React.createElement("div",{className:wrapperClasses},"top"===placement&&!disabled&&selectorWrapper,inputSection,"bottom"===placement&&!disabled&&selectorWrapper)}}]),ColorPicker}();_defineProperty(ColorPicker,"propTypes",{...FieldComponent.propTypes,value:PropTypes.string,placement:PropTypes.string,openTyping:PropTypes.bool,colorPreviewSize:PropTypes.string,isInitiallyOpen:PropTypes.bool}),_defineProperty(ColorPicker,"defaultProps",{...FieldComponent.defaultProps,placement:"bottom",openTyping:!1,value:"",placeholder:"",required:!1,disabled:!1}),ColorPicker.displayName="ColorPicker",ColorPicker.__docgenInfo={description:"@typedef {typeof ColorPicker.propTypes} ColorPickerPropTypes\n@extends FieldComponent<PropTypes.InferProps<ColorPickerPropTypes>>\n\n@metadataType field\n@deprecated",methods:[{name:"setClickListener",docblock:null,modifiers:[],params:[],returns:null},{name:"unsetClickListener",docblock:null,modifiers:[],params:[],returns:null},{name:"setPageListeners",docblock:null,modifiers:[],params:[],returns:null},{name:"unsetPageListeners",docblock:null,modifiers:[],params:[],returns:null},{name:"hideColorSelector",docblock:"Hides color selector\n@param {object} [evt] - event to react to",modifiers:[],params:[{name:"evt"}],returns:null,description:"Hides color selector"},{name:"toggleColorSelector",docblock:"Toggles color selector\n@param {boolean} [showOrHide] - flag whether to show or hide the color selector",modifiers:[],params:[{name:"showOrHide"}],returns:null,description:"Toggles color selector"},{name:"getColorSelectorHeight",docblock:"helper function to get height of chrome picker including margin respective to input field depending where it's currently rendered\n\n@returns {number} - height of chrome picker with bottom or top margin",modifiers:[],params:[],returns:{description:"height of chrome picker with bottom or top margin",type:{name:"number"}},description:"helper function to get height of chrome picker including margin respective to input field depending where it's currently rendered"},{name:"updatePlacement",docblock:"if position of color selector won't fit in screen it will change it's placement with respect to input field\n If it fits both or doesn't fit both it reverts to default.",modifiers:[],params:[],returns:null,description:"if position of color selector won't fit in screen it will change it's placement with respect to input field\n If it fits both or doesn't fit both it reverts to default."},{name:"handleTextInputChange",docblock:"handles input box if openTyping is enabled\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"handles input box if openTyping is enabled"},{name:"handleOnBlur",docblock:"Disables the input edit mode when user leaves the input and calls default FieldComponent.onBlur method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Disables the input edit mode when user leaves the input and calls default FieldComponent.onBlur method"},{name:"handleOnFocus",docblock:"Enables the input edit mode when user focuses on the input and calls default FieldComponent.onFocus method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Enables the input edit mode when user focuses on the input and calls default FieldComponent.onFocus method"},{name:"inputSectionKeyDown",docblock:"Enables the user to toggle the color selector with 'space bar'  when user focuses on the input\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Enables the user to toggle the color selector with 'space bar'  when user focuses on the input"},{name:"onColorSelectorChangeComplete",docblock:"updates color via 'react-color' tool when value is changed\n\n@param {object} color - color object provided by 'react-color' package\n@returns {string}",modifiers:[],params:[{name:"color",description:"color object provided by 'react-color' package",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"updates color via 'react-color' tool when value is changed"},{name:"parseInputValue",docblock:"parses color object value to a string depending on type of color source\n\n@param {object} color - color object provided by 'react-color' package\n@returns {string}",modifiers:[],params:[{name:"color",description:"color object provided by 'react-color' package",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"parses color object value to a string depending on type of color source"},{name:"setHashCSSVariable",docblock:"appends a hash if input string is of hex format without '#'\n\n@param {String|Object} input - color object provided by 'react-color' package or input string\n@returns {string}",modifiers:[],params:[{name:"input",description:"color object provided by 'react-color' package or input string",type:{name:"union",elements:[{name:"String"},{name:"Object"}]},optional:!1}],returns:{description:null,type:{name:"string"}},description:"appends a hash if input string is of hex format without '#'"},{name:"keepSelectorOpen",docblock:"if open Typing is enabled and the selector is open this function will\nstop the selector from closing if the user clicks on the text input section\n\n@param {object} evt - input text field",modifiers:[],params:[{name:"evt",description:"input text field",type:{name:"object"},optional:!1}],returns:null,description:"if open Typing is enabled and the selector is open this function will\nstop the selector from closing if the user clicks on the text input section"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - rendering options (like 'isInvalid', 'isValid', etc)\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"rendering options (like 'isInvalid', 'isValid', etc)",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"ColorPicker",props:{placement:{defaultValue:{value:"'bottom'",computed:!1},type:{name:"string"},required:!1,description:"default position for the color selector to render if there is insufficient space above and below input field."},openTyping:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"allows user to type into input field if active."},value:{defaultValue:{value:"''",computed:!1},type:{name:"string"},required:!1,description:"sets the values for the color selector and input field."},placeholder:{defaultValue:{value:"''",computed:!1},required:!1},required:{defaultValue:{value:"false",computed:!1},required:!1},disabled:{defaultValue:{value:"false",computed:!1},required:!1},colorPreviewSize:{type:{name:"string"},required:!1,description:"size of the color preview span. 'small' or 'medium' as default"},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"}},composes:["../FieldComponent/FieldComponent"]},ColorPicker.__docgenInfo={componentName:"ColorPicker",packageName:"@jutro/components",description:"",displayName:"ColorPicker",methods:[{name:"setClickListener",docblock:null,modifiers:[],params:[],returns:null},{name:"unsetClickListener",docblock:null,modifiers:[],params:[],returns:null},{name:"setPageListeners",docblock:null,modifiers:[],params:[],returns:null},{name:"unsetPageListeners",docblock:null,modifiers:[],params:[],returns:null},{name:"hideColorSelector",docblock:"Hides color selector\n@param {object} [evt] - event to react to",modifiers:[],params:[{name:"evt"}],returns:null,description:"Hides color selector"},{name:"toggleColorSelector",docblock:"Toggles color selector\n@param {boolean} [showOrHide] - flag whether to show or hide the color selector",modifiers:[],params:[{name:"showOrHide"}],returns:null,description:"Toggles color selector"},{name:"getColorSelectorHeight",docblock:"helper function to get height of chrome picker including margin respective to input field depending where it's currently rendered\n\n@returns {number} - height of chrome picker with bottom or top margin",modifiers:[],params:[],returns:{description:"height of chrome picker with bottom or top margin",type:{name:"number"}},description:"helper function to get height of chrome picker including margin respective to input field depending where it's currently rendered"},{name:"updatePlacement",docblock:"if position of color selector won't fit in screen it will change it's placement with respect to input field\n If it fits both or doesn't fit both it reverts to default.",modifiers:[],params:[],returns:null,description:"if position of color selector won't fit in screen it will change it's placement with respect to input field\n If it fits both or doesn't fit both it reverts to default."},{name:"handleTextInputChange",docblock:"handles input box if openTyping is enabled\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"handles input box if openTyping is enabled"},{name:"handleOnBlur",docblock:"Disables the input edit mode when user leaves the input and calls default FieldComponent.onBlur method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Disables the input edit mode when user leaves the input and calls default FieldComponent.onBlur method"},{name:"handleOnFocus",docblock:"Enables the input edit mode when user focuses on the input and calls default FieldComponent.onFocus method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Enables the input edit mode when user focuses on the input and calls default FieldComponent.onFocus method"},{name:"inputSectionKeyDown",docblock:"Enables the user to toggle the color selector with 'space bar'  when user focuses on the input\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Enables the user to toggle the color selector with 'space bar'  when user focuses on the input"},{name:"onColorSelectorChangeComplete",docblock:"updates color via 'react-color' tool when value is changed\n\n@param {object} color - color object provided by 'react-color' package\n@returns {string}",modifiers:[],params:[{name:"color",description:"color object provided by 'react-color' package",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"updates color via 'react-color' tool when value is changed"},{name:"parseInputValue",docblock:"parses color object value to a string depending on type of color source\n\n@param {object} color - color object provided by 'react-color' package\n@returns {string}",modifiers:[],params:[{name:"color",description:"color object provided by 'react-color' package",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"string"}},description:"parses color object value to a string depending on type of color source"},{name:"setHashCSSVariable",docblock:"appends a hash if input string is of hex format without '#'\n\n@param {String|Object} input - color object provided by 'react-color' package or input string\n@returns {string}",modifiers:[],params:[{name:"input",description:"color object provided by 'react-color' package or input string",type:{name:"union",elements:[{name:"String"},{name:"Object"}]},optional:!1}],returns:{description:null,type:{name:"string"}},description:"appends a hash if input string is of hex format without '#'"},{name:"keepSelectorOpen",docblock:"if open Typing is enabled and the selector is open this function will\nstop the selector from closing if the user clicks on the text input section\n\n@param {object} evt - input text field",modifiers:[],params:[{name:"evt",description:"input text field",type:{name:"object"},optional:!1}],returns:null,description:"if open Typing is enabled and the selector is open this function will\nstop the selector from closing if the user clicks on the text input section"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - rendering options (like 'isInvalid', 'isValid', etc)\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"rendering options (like 'isInvalid', 'isValid', etc)",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"ColorPicker",metadataType:"field",props:{value:{type:{name:"string"},required:!1,description:"sets the values for the color selector and input field.",defaultValue:{value:"''",computed:!1}},placement:{type:{name:"string"},required:!1,description:"default position for the color selector to render if there is insufficient space above and below input field.",defaultValue:{value:"'bottom'",computed:!1}},openTyping:{type:{name:"bool"},required:!1,description:"allows user to type into input field if active.",defaultValue:{value:"false",computed:!1}},colorPreviewSize:{type:{name:"string"},required:!1,description:"size of the color preview span. 'small' or 'medium' as default"},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},placeholder:{defaultValue:{value:"''",computed:!1},required:!1},required:{defaultValue:{value:"false",computed:!1},required:!1},disabled:{defaultValue:{value:"false",computed:!1},required:!1}},composes:["../FieldComponent/FieldComponent"]};