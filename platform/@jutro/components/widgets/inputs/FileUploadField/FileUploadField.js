import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _get from"@babel/runtime-corejs3/helpers/get";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import cx from"classnames";import{getMessageProp}from"@jutro/platform";import{intlMessageShape}from"@jutro/prop-types";import{renderWithBreakpoint}from"@jutro/layout";import get from"lodash/get";import styles from"./FileUploadField.module.css";import{FieldComponent}from"../FieldComponent/FieldComponent";import{Button,buttonTypes,buttonSizes}from"../../button/Button";import{messages}from"./FileUploadField.messages";import{FileUploadFieldValidationImplementation}from"./FileUploadFieldValidationImplementation";import{OldFileUploadFieldValidationImplementation}from"./OldFileUploadFieldValidationImplementation";import{Icon}from"../../Icon/Icon";import{UploadingProgress}from"./UploadingProgress";import{UploadingOverlay}from"./UploadingOverlay";const isThinType=type=>"thin"===type,isLargeType=type=>"large"===type;export let FileUploadField=function(_FieldComponent){_inherits(FileUploadField,FieldComponent);var _super=_createSuper(FileUploadField);function FileUploadField(props,context){var _thisSuper,_this;_classCallCheck(this,FileUploadField),_this=_super.call(this,props,context),_defineProperty(_assertThisInitialized(_this),"handleErrorStateChange",((prevErrorState,errorState)=>{const _this$props=_this.props,onValidationChange=_this$props.onValidationChange,model=_this$props.model,path=_this$props.path,value=_this$props.value;if(prevErrorState!==errorState){const isValid=!errorState&&_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(FileUploadField.prototype)),"validate",_thisSuper).call(_thisSuper,value,!0),currentValidationMessages=_this.getValidationMessages()||[];onValidationChange&&onValidationChange(isValid,model||path,currentValidationMessages),_this.valid=isValid}})),_defineProperty(_assertThisInitialized(_this),"handleChange",((...args)=>_this.validationImplementation.handleChange(...args))),_defineProperty(_assertThisInitialized(_this),"handleAddFile",(()=>{_this.myRef.current.click()})),_defineProperty(_assertThisInitialized(_this),"handleClearFile",(()=>_this.validationImplementation.handleClearFile())),_defineProperty(_assertThisInitialized(_this),"handleOnDragOver",(event=>{event.preventDefault(),event.stopPropagation()})),_defineProperty(_assertThisInitialized(_this),"handleOnFileDrop",(event=>{event.preventDefault(),_this.setState({dragCounter:0}),_this.handleChange(event)})),_defineProperty(_assertThisInitialized(_this),"updateDragCounter",(updatedCounter=>()=>{_this.props.disabled||_this.setState({dragCounter:updatedCounter})})),_defineProperty(_assertThisInitialized(_this),"renderEmptyUploadAreaMessage",((type,messageProps)=>{const textClasses=cx(styles.valueText,{[styles.paddedLeft]:isThinType(type)}),emptyUploadAreaMessage=getMessageProp("emptyUploadAreaMessage",messageProps,messages);return React.createElement("div",{className:textClasses},_this.translator(emptyUploadAreaMessage))})),_defineProperty(_assertThisInitialized(_this),"getFileName",(value=>_this.validationImplementation.getFileName(value))),_defineProperty(_assertThisInitialized(_this),"renderUploadedFileMessage",((type,messageProps,value)=>{const textClasses=cx(styles.valueText,{[styles.paddedLeft]:isThinType(type)}),uploadedFilesMessage=getMessageProp("uploadedFilesMessage",messageProps,messages);return React.createElement(React.Fragment,null,isThinType(type)?React.createElement(Icon,{icon:"gw-photo",className:styles.uploadedFileIcon,"aria-hidden":"true"}):null,React.createElement("div",{className:textClasses},_this.translator(uploadedFilesMessage)," ",_this.getFileName(value)))})),_defineProperty(_assertThisInitialized(_this),"renderEmptyUploadArea",((type,imageSource,disabled,messageProps,buttonType,buttonSize,buttonIcon,disableDragAndDrop)=>isLargeType(type)?_this.renderLargeFlavorArea(type,imageSource,disabled,void 0,_this.renderEmptyUploadAreaMessage,messageProps,buttonType,buttonSize,buttonIcon,disableDragAndDrop):isThinType(type)?React.createElement(React.Fragment,null,_this.renderActionButton(void 0,disabled,messageProps,buttonType,buttonSize,buttonIcon),!disableDragAndDrop&&_this.renderEmptyUploadAreaMessage(type,messageProps)):null)),_this.myRef=React.createRef(),_this.state={errorMessage:void 0,dragCounter:0};const ValidationImplementation=props.registerValidation?new FileUploadFieldValidationImplementation:new OldFileUploadFieldValidationImplementation;return _this.validationImplementation=ValidationImplementation.bind(_assertThisInitialized(_this)),_this}return _createClass(FileUploadField,[{key:"componentDidUpdate",value:function(prevProps,prevState){return this.validationImplementation.componentDidUpdate(prevProps,prevState)}},{key:"render",value:function(){return _get(_getPrototypeOf(FileUploadField.prototype),"render",this).call(this)}},{key:"getValidationConfig",value:function(...args){const validationConfig=_get(_getPrototypeOf(FileUploadField.prototype),"getValidationConfig",this).call(this,...args);return{...validationConfig,propsList:["required","accept","maxFileSizeKB","maxLength",...get(validationConfig,"propsList",[])],internalValidators:get(validationConfig,"internalValidators",[]),options:get(validationConfig,"options",[]),onIsValid:this.props.onUpload}}},{key:"getValidationMessages",value:function(){return this.validationImplementation.getValidationMessages()}},{key:"renderControlReadOnly",value:function(breakpointProps){const id=breakpointProps.id,value=breakpointProps.value;let displayValue=this.getFileName(value);return displayValue||(displayValue=FieldComponent.defaultROEmptyValue),React.createElement("span",{id:id},displayValue)}},{key:"disabledOrReadOnly",value:function(){return this.props.disabled||this.props.readOnly}},{key:"renderActionButton",value:function(value,disabled,messageProps,buttonType,buttonSize,buttonIcon){const uploadFilesMessage=getMessageProp("uploadFilesMessage",messageProps,messages),buttonClick=value?this.handleClearFile:this.handleAddFile,dragCounter=this.state.dragCounter;let icon;return icon=buttonIcon||"gw-cloud-upload",React.createElement(Button,{icon:icon,type:buttonType,size:buttonSize,onClick:buttonClick,disabled:disabled,onDragEnter:this.updateDragCounter(dragCounter+1),onDragLeave:this.updateDragCounter(dragCounter-1)},uploadFilesMessage)}},{key:"renderUploadAreaImage",value:function(imageSource,messageProps){if(!imageSource)return;const emptyUploadAreaMessage=getMessageProp("emptyUploadAreaMessage",messageProps,messages);return React.createElement("img",{src:imageSource,alt:this.translator(emptyUploadAreaMessage),className:styles.areaImage,"aria-hidden":!0})}},{key:"renderLargeFlavorArea",value:function(type,imageSource,disabled,value,renderMessage,messageProps,buttonType,buttonSize,buttonIcon,disableDragAndDrop){return React.createElement(React.Fragment,null,this.renderUploadAreaImage(imageSource,messageProps),!disableDragAndDrop&&renderMessage(type,messageProps,value),this.renderActionButton(value,disabled,messageProps,buttonType,buttonSize,buttonIcon))}},{key:"renderUploadedFileArea",value:function(type,imageSource,disabled,value,messageProps,buttonType,buttonSize,buttonIcon){var _validationMessages$m;const _this$props2=this.props,uploadState=_this$props2.uploadState,onCancel=_this$props2.onCancel,onValueClear=_this$props2.onValueClear,completed=_this$props2.completed,total=_this$props2.total,progressErrorMessage=_this$props2.progressErrorMessage,id=_this$props2.id,actionHandle="progress"!==uploadState?()=>{this.handleClearFile(),onValueClear&&onValueClear()}:()=>{onCancel&&onCancel(value)},validationMessages=this.validationImplementation.getValidationMessages(progressErrorMessage,!0),progressComponent=React.createElement(UploadingProgress,{id:id,filename:this.getFileName(value),messageProps:messageProps,state:uploadState,completed:completed,total:total,onActionClick:actionHandle,onActionKeyDown:event=>{event.preventDefault()," "!==event.key&&"Spacebar"!==event.key&&"Enter"!==event.key||actionHandle()},errorMessage:null!==(_validationMessages$m=null==validationMessages?void 0:validationMessages.message)&&void 0!==_validationMessages$m?_validationMessages$m:validationMessages});return isLargeType(type)?React.createElement(UploadingOverlay,{renderProgress:()=>progressComponent,messageProps:messageProps},(({messageProps:overlayMessageProps})=>this.renderLargeFlavorArea(type,imageSource,!0,value,this.renderUploadedFileMessage,overlayMessageProps,buttonType,buttonSize,buttonIcon,!1))):isThinType(type)?progressComponent:null}},{key:"isDraggedOverAndEnabled",value:function(){const dragCounter=this.state.dragCounter,disabled=this.props.disabled;return 0!==dragCounter&&!disabled}},{key:"renderControl",value:function(breakpointProps){return renderWithBreakpoint((breakpoint=>{var _breakpointProps$disa,_this$myRef,_this$myRef$current;const value=breakpointProps.value,maxLength=breakpointProps.maxLength,disabled=breakpointProps.disabled,controlClassName=breakpointProps.controlClassName,required=breakpointProps.required,accept=breakpointProps.accept,messageProps=breakpointProps.messageProps,type=breakpointProps.type,imageSource=breakpointProps.imageSource,buttonType=breakpointProps.buttonType,buttonSize=breakpointProps.buttonSize,buttonIcon=breakpointProps.buttonIcon,id=breakpointProps.id,testId=breakpointProps.testId,fieldUniqueId=this.fieldUniqueId,isDesktop="desktop"===breakpoint,disableDragAndDrop=null!==(_breakpointProps$disa=null==breakpointProps?void 0:breakpointProps.disableDragAndDrop)&&void 0!==_breakpointProps$disa?_breakpointProps$disa:!isDesktop,focusHandlers=this.getInputFocusHandlers(),filePath=value===(null===(_this$myRef=this.myRef)||void 0===_this$myRef||null===(_this$myRef$current=_this$myRef.current)||void 0===_this$myRef$current?void 0:_this$myRef$current.value)?value:"",classes=cx(styles.fileUploadField,controlClassName),wrapperClasses=cx(styles.wrapper,{[styles.wrapperLarge]:"large"===type,[styles.wrapperThin]:"thin"===type,[styles.wrapperThinWithUpload]:"thin"===type&&value,[styles.wrapperWithDragAndDropDisabled]:disableDragAndDrop&&("thin"===type&&!value||"large"===type),[styles.dragOver]:!disableDragAndDrop&&this.isDraggedOverAndEnabled()}),dragCounter=this.state.dragCounter;let dragAndDropProps={};return disableDragAndDrop||(dragAndDropProps={onDragOver:this.disabledOrReadOnly()?void 0:this.handleOnDragOver,onDrop:this.disabledOrReadOnly()?void 0:this.handleOnFileDrop,onDragEnter:this.updateDragCounter(dragCounter+1),onDragLeave:this.updateDragCounter(dragCounter-1)}),React.createElement("div",_extends({className:classes},dragAndDropProps),React.createElement("div",{className:wrapperClasses},value?this.renderUploadedFileArea(type,imageSource,disabled,value,messageProps,buttonType,buttonSize,buttonIcon):this.renderEmptyUploadArea(type,imageSource,disabled,messageProps,buttonType,buttonSize,buttonIcon,disableDragAndDrop),React.createElement("input",_extends({id:fieldUniqueId,type:"file","data-testid":testId||id,ref:this.myRef,accept:accept,className:controlClassName,style:{display:"none"},maxLength:maxLength,value:filePath||void 0,onChange:this.handleChange},focusHandlers,{disabled:disabled,required:required},this.generateDataPathProperty(),this.generateAccessibilityProperties()))))}))}}]),FileUploadField}();_defineProperty(FileUploadField,"propTypes",{...FieldComponent.propTypes,accept:PropTypes.string,type:PropTypes.oneOf(["thin","large"]).isRequired,imageSource:PropTypes.string,maxLength:PropTypes.number,maxFileSizeKB:PropTypes.number,onUpload:PropTypes.func,messageProps:PropTypes.shape({emptyUploadAreaMessage:intlMessageShape,uploadFilesMessage:intlMessageShape,uploadedFilesMessage:intlMessageShape,removeFileMessage:intlMessageShape,maxLengthMessage:intlMessageShape,maxFileSizeKBMessage:intlMessageShape,incorrectFileTypeMessage:intlMessageShape,uploadSelectedMessage:intlMessageShape,uploadProgressMessage:intlMessageShape,uploadCompletedMessage:intlMessageShape,uploadCancelledMessage:intlMessageShape,uploadFailedMessage:intlMessageShape,backgroundUploadFileMessage:intlMessageShape}),buttonType:PropTypes.oneOf(buttonTypes),buttonSize:PropTypes.oneOf(buttonSizes),buttonIcon:PropTypes.string,disableDragAndDrop:PropTypes.bool,total:PropTypes.number,completed:PropTypes.number,onCancel:PropTypes.func,onFileClear:PropTypes.func,uploadState:PropTypes.oneOf(["selection","progress","completed","cancelled","failed"]),progressErrorMessage:intlMessageShape}),_defineProperty(FileUploadField,"defaultProps",{...FieldComponent.defaultProps,controlClassName:styles.fileUploadField,type:"thin",placeholder:messages.placeholder,buttonType:"outlined",buttonSize:"small"}),_defineProperty(FileUploadField,"contextType",FieldComponent.contextType),FileUploadField.displayName="FileUploadField",FileUploadField.__docgenInfo={description:"Renders a control which allows the user to upload a file. Allows you to specify validation and actions for specific events.\n@typedef {typeof FileUploadField.propTypes} FileUploadFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<FileUploadFieldPropTypes>>\n\n@metadataType field",methods:[{name:"handleErrorStateChange",docblock:null,modifiers:[],params:[{name:"prevErrorState",type:null},{name:"errorState",type:null}],returns:null},{name:"getValidationConfig",docblock:null,modifiers:[],params:[{name:"...args",type:null}],returns:null},{name:"handleChange",docblock:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden.\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"...args"}],returns:null,description:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden."},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added\n\n@returns {Array<any>} validation messages",modifiers:[],params:[],returns:{description:"validation messages",type:{name:"Array",elements:[{name:"any"}]}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added"},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps"}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"disabledOrReadOnly",docblock:"Return true flag if component is disabled or readOnly\n\n@returns {boolean} disabled or readonly flag",modifiers:[],params:[],returns:{description:"disabled or readonly flag",type:{name:"boolean"}},description:"Return true flag if component is disabled or readOnly"},{name:"handleAddFile",docblock:null,modifiers:[],params:[],returns:null},{name:"handleClearFile",docblock:null,modifiers:[],params:[],returns:null},{name:"handleOnDragOver",docblock:"Handle onDragOver event.\n\n@param {event} event onDragOver event",modifiers:[],params:[{name:"event",description:"onDragOver event",type:{name:"event"},optional:!1}],returns:null,description:"Handle onDragOver event."},{name:"handleOnFileDrop",docblock:"Handle onDrop event.\n\n@param {event} event onDrop event",modifiers:[],params:[{name:"event",description:"onDrop event",type:{name:"event"},optional:!1}],returns:null,description:"Handle onDrop event."},{name:"updateDragCounter",docblock:"Updates the drag counter only if component is not disabled\n\n@param {number} updatedCounter new counter value\n@returns {Function} function that updates the counter with the given value",modifiers:[],params:[{name:"updatedCounter",description:"new counter value",type:{name:"number"},optional:!1}],returns:{description:"function that updates the counter with the given value",type:{name:"Function"}},description:"Updates the drag counter only if component is not disabled"},{name:"renderActionButton",docblock:"Renders control's action button\n@param {string} value control value, file path\n@param {boolean} disabled indicates if control is disabled\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@returns {Function} render function for the action button",modifiers:[],params:[{name:"value",description:"control value, file path",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1}],returns:{description:"render function for the action button",type:{name:"Function"}},description:"Renders control's action button"},{name:"renderEmptyUploadAreaMessage",docblock:"Renders message to be displayed when no file is uploaded\n@param {string} type upload field type to render\n@param {object} messageProps i18n messages\n@returns {Function} render function for uploaded file area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1}],returns:{description:"render function for uploaded file area",type:{name:"Function"}},description:"Renders message to be displayed when no file is uploaded"},{name:"renderUploadAreaImage",docblock:"Renders image in empty upload area\n@param {string} imageSource source path for the image to display in upload area\n@param {object} messageProps i18n messages\n@returns {Function} render function for uploaded file area",modifiers:[],params:[{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1}],returns:{description:"render function for uploaded file area",type:{name:"Function"}},description:"Renders image in empty upload area"},{name:"getFileName",docblock:null,modifiers:[],params:[{name:"value",type:null}],returns:null},{name:"renderUploadedFileMessage",docblock:"Renders message to be displayed when file is uploaded\n@param {string} type upload field type to render\n@param {object} messageProps i18n messages\n@param {string} value uploaded file path\n@returns {Function} render function for uploaded file message",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"value",description:"uploaded file path",type:{name:"string"},optional:!1}],returns:{description:"render function for uploaded file message",type:{name:"Function"}},description:"Renders message to be displayed when file is uploaded"},{name:"renderLargeFlavorArea",docblock:"Renders Large type upload area\n@param {string} type upload field type to render\n@param {string} imageSource source path for the image to display in upload area\n@param {boolean} disabled indicates if control is disabled\n@param {string} value uploaded file path or `undefined` if no file is uploaded\n@param {Function} renderMessage function to render upload area message\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@param {boolean} disableDragAndDrop determine whether the empty upload message should be displayed\n@returns {Function} render function for empty upload area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"value",description:"uploaded file path or `undefined` if no file is uploaded",type:{name:"string"},optional:!1},{name:"renderMessage",description:"function to render upload area message",type:{name:"Function"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1},{name:"disableDragAndDrop",description:"determine whether the empty upload message should be displayed",type:{name:"boolean"},optional:!1}],returns:{description:"render function for empty upload area",type:{name:"Function"}},description:"Renders Large type upload area"},{name:"renderEmptyUploadArea",docblock:"Renders empty upload area\n@param {string} type upload field type to render\n@param {string} imageSource source path for the image to display in upload area\n@param {boolean} disabled indicates if control is disabled\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@param {boolean} disableDragAndDrop determine whether the empty upload message should be displayed\n@returns {Function} render function for empty upload area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1},{name:"disableDragAndDrop",description:"determine whether the empty upload message should be displayed",type:{name:"boolean"},optional:!1}],returns:{description:"render function for empty upload area",type:{name:"Function"}},description:"Renders empty upload area"},{name:"renderUploadedFileArea",docblock:"Renders uploaded file area\n@param {string} type upload field type to render\n@param {string} imageSource source path for the image to display in upload area\n@param {boolean} disabled indicates if control is disabled\n@param {string} value control value - uploaded file path\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@returns {Function} render function for uploaded file area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"value",description:"control value - uploaded file path",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1}],returns:{description:"render function for uploaded file area",type:{name:"Function"}},description:"Renders uploaded file area"},{name:"isDraggedOverAndEnabled",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"FileUploadField",props:{controlClassName:{defaultValue:{value:"styles.fileUploadField",computed:!0},required:!1},type:{defaultValue:{value:"'thin'",computed:!1},type:{name:"enum",value:[{value:"'thin'",computed:!1},{value:"'large'",computed:!1}]},required:!1,description:"File upload field type (eg. 'thin', etc.)"},placeholder:{defaultValue:{value:"messages.placeholder",computed:!0},required:!1},buttonType:{defaultValue:{value:"'outlined'",computed:!1},type:{name:"enum",computed:!0,value:"buttonTypes"},required:!1,description:"'type' prop for the rendered button"},buttonSize:{defaultValue:{value:"'small'",computed:!1},type:{name:"enum",computed:!0,value:"buttonSizes"},required:!1,description:"'size' prop for the rendered button"},accept:{type:{name:"string"},required:!1,description:"File type filter. (eg. '.md,.pdf' or 'audio/*')"},imageSource:{type:{name:"string"},required:!1,description:"Path to empty dropdown area image"},maxLength:{type:{name:"number"},required:!1,description:"Max length for the input field"},maxFileSizeKB:{type:{name:"number"},required:!1,description:"Max file size in KB for the input field"},onUpload:{type:{name:"func"},required:!1,description:"Callback when valid file is selected"},messageProps:{type:{name:"shape",value:{emptyUploadAreaMessage:{name:"custom",raw:"intlMessageShape",description:"Message for drag & drop",required:!1},uploadFilesMessage:{name:"custom",raw:"intlMessageShape",description:"Message for upload file",required:!1},uploadedFilesMessage:{name:"custom",raw:"intlMessageShape",description:"Message for uploaded file",required:!1},removeFileMessage:{name:"custom",raw:"intlMessageShape",description:"Message for removing file",required:!1},maxLengthMessage:{name:"custom",raw:"intlMessageShape",description:"Message for file name max length",required:!1},maxFileSizeKBMessage:{name:"custom",raw:"intlMessageShape",description:"Message for max file size",required:!1},incorrectFileTypeMessage:{name:"custom",raw:"intlMessageShape",description:"Error message to present if the file type is incorrect",required:!1},uploadSelectedMessage:{name:"custom",raw:"intlMessageShape",description:"Message dispayed when file is selected",required:!1},uploadProgressMessage:{name:"custom",raw:"intlMessageShape",description:"Message displayed during uploading",required:!1},uploadCompletedMessage:{name:"custom",raw:"intlMessageShape",description:"Message displayed after completed upload",required:!1},uploadCancelledMessage:{name:"custom",raw:"intlMessageShape",description:"Message displayed when upload is cancelled",required:!1},uploadFailedMessage:{name:"custom",raw:"intlMessageShape",description:"Message displayed when upload failed to finish",required:!1},backgroundUploadFileMessage:{name:"custom",raw:"intlMessageShape",description:"Message displayed on disabled button in large field",required:!1}}},required:!1,description:"Message props(error message/aria-label)"},buttonIcon:{type:{name:"string"},required:!1,description:"'icon' prop for the rendered button"},disableDragAndDrop:{type:{name:"bool"},required:!1,description:"Determines if the drag and drop functionality of the component should be disabled"},total:{type:{name:"number"},required:!1,description:"Total size in bytes of selected file to upload"},completed:{type:{name:"number"},required:!1,description:"Current bytes uploaded"},onCancel:{type:{name:"func"},required:!1,description:"Action triggered when user clicks cancel button during uploading"},onFileClear:{type:{name:"func"},required:!1,description:"Action triggered when user clears selected file"},uploadState:{type:{name:"enum",value:[{value:"'selection'",computed:!1},{value:"'progress'",computed:!1},{value:"'completed'",computed:!1},{value:"'cancelled'",computed:!1},{value:"'failed'",computed:!1}]},required:!1,description:"Current state of upload"},progressErrorMessage:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"User defined error message on failed upload"}},composes:["../FieldComponent/FieldComponent"]},FileUploadField.__docgenInfo={componentName:"FileUploadField",packageName:"@jutro/components",description:"Renders a control which allows the user to upload a file. Allows you to specify validation and actions for specific events.",displayName:"FileUploadField",methods:[{name:"handleErrorStateChange",docblock:null,modifiers:[],params:[{name:"prevErrorState",optional:void 0,type:null},{name:"errorState",optional:void 0,type:null}],returns:null},{name:"getValidationConfig",docblock:null,modifiers:[],params:[{name:"...args",optional:void 0,type:null}],returns:null},{name:"handleChange",docblock:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden.\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"...args"}],returns:null,description:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden."},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added\n\n@returns {Array<any>} validation messages",modifiers:[],params:[],returns:{description:"validation messages",type:{name:"Array",elements:[{name:"any"}]}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added"},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps"}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"disabledOrReadOnly",docblock:"Return true flag if component is disabled or readOnly\n\n@returns {boolean} disabled or readonly flag",modifiers:[],params:[],returns:{description:"disabled or readonly flag",type:{name:"boolean"}},description:"Return true flag if component is disabled or readOnly"},{name:"handleAddFile",docblock:null,modifiers:[],params:[],returns:null},{name:"handleClearFile",docblock:null,modifiers:[],params:[],returns:null},{name:"handleOnDragOver",docblock:"Handle onDragOver event.\n\n@param {event} event onDragOver event",modifiers:[],params:[{name:"event",description:"onDragOver event",type:{name:"event"},optional:!1}],returns:null,description:"Handle onDragOver event."},{name:"handleOnFileDrop",docblock:"Handle onDrop event.\n\n@param {event} event onDrop event",modifiers:[],params:[{name:"event",description:"onDrop event",type:{name:"event"},optional:!1}],returns:null,description:"Handle onDrop event."},{name:"updateDragCounter",docblock:"Updates the drag counter only if component is not disabled\n\n@param {number} updatedCounter new counter value\n@returns {Function} function that updates the counter with the given value",modifiers:[],params:[{name:"updatedCounter",description:"new counter value",type:{name:"number"},optional:!1}],returns:{description:"function that updates the counter with the given value",type:{name:"Function"}},description:"Updates the drag counter only if component is not disabled"},{name:"renderActionButton",docblock:"Renders control's action button\n@param {string} value control value, file path\n@param {boolean} disabled indicates if control is disabled\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@returns {Function} render function for the action button",modifiers:[],params:[{name:"value",description:"control value, file path",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1}],returns:{description:"render function for the action button",type:{name:"Function"}},description:"Renders control's action button"},{name:"renderEmptyUploadAreaMessage",docblock:"Renders message to be displayed when no file is uploaded\n@param {string} type upload field type to render\n@param {object} messageProps i18n messages\n@returns {Function} render function for uploaded file area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1}],returns:{description:"render function for uploaded file area",type:{name:"Function"}},description:"Renders message to be displayed when no file is uploaded"},{name:"renderUploadAreaImage",docblock:"Renders image in empty upload area\n@param {string} imageSource source path for the image to display in upload area\n@param {object} messageProps i18n messages\n@returns {Function} render function for uploaded file area",modifiers:[],params:[{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1}],returns:{description:"render function for uploaded file area",type:{name:"Function"}},description:"Renders image in empty upload area"},{name:"getFileName",docblock:null,modifiers:[],params:[{name:"value",optional:void 0,type:null}],returns:null},{name:"renderUploadedFileMessage",docblock:"Renders message to be displayed when file is uploaded\n@param {string} type upload field type to render\n@param {object} messageProps i18n messages\n@param {string} value uploaded file path\n@returns {Function} render function for uploaded file message",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"value",description:"uploaded file path",type:{name:"string"},optional:!1}],returns:{description:"render function for uploaded file message",type:{name:"Function"}},description:"Renders message to be displayed when file is uploaded"},{name:"renderLargeFlavorArea",docblock:"Renders Large type upload area\n@param {string} type upload field type to render\n@param {string} imageSource source path for the image to display in upload area\n@param {boolean} disabled indicates if control is disabled\n@param {string} value uploaded file path or `undefined` if no file is uploaded\n@param {Function} renderMessage function to render upload area message\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@param {boolean} disableDragAndDrop determine whether the empty upload message should be displayed\n@returns {Function} render function for empty upload area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"value",description:"uploaded file path or `undefined` if no file is uploaded",type:{name:"string"},optional:!1},{name:"renderMessage",description:"function to render upload area message",type:{name:"Function"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1},{name:"disableDragAndDrop",description:"determine whether the empty upload message should be displayed",type:{name:"boolean"},optional:!1}],returns:{description:"render function for empty upload area",type:{name:"Function"}},description:"Renders Large type upload area"},{name:"renderEmptyUploadArea",docblock:"Renders empty upload area\n@param {string} type upload field type to render\n@param {string} imageSource source path for the image to display in upload area\n@param {boolean} disabled indicates if control is disabled\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@param {boolean} disableDragAndDrop determine whether the empty upload message should be displayed\n@returns {Function} render function for empty upload area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1},{name:"disableDragAndDrop",description:"determine whether the empty upload message should be displayed",type:{name:"boolean"},optional:!1}],returns:{description:"render function for empty upload area",type:{name:"Function"}},description:"Renders empty upload area"},{name:"renderUploadedFileArea",docblock:"Renders uploaded file area\n@param {string} type upload field type to render\n@param {string} imageSource source path for the image to display in upload area\n@param {boolean} disabled indicates if control is disabled\n@param {string} value control value - uploaded file path\n@param {object} messageProps i18n messages\n@param {string} buttonType type of button to render\n@param {string} buttonSize size of button to render\n@param {string} buttonIcon icon to render within the button\n@returns {Function} render function for uploaded file area",modifiers:[],params:[{name:"type",description:"upload field type to render",type:{name:"string"},optional:!1},{name:"imageSource",description:"source path for the image to display in upload area",type:{name:"string"},optional:!1},{name:"disabled",description:"indicates if control is disabled",type:{name:"boolean"},optional:!1},{name:"value",description:"control value - uploaded file path",type:{name:"string"},optional:!1},{name:"messageProps",description:"i18n messages",type:{name:"object"},optional:!1},{name:"buttonType",description:"type of button to render",type:{name:"string"},optional:!1},{name:"buttonSize",description:"size of button to render",type:{name:"string"},optional:!1},{name:"buttonIcon",description:"icon to render within the button",type:{name:"string"},optional:!1}],returns:{description:"render function for uploaded file area",type:{name:"Function"}},description:"Renders uploaded file area"},{name:"isDraggedOverAndEnabled",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"FileUploadField",metadataType:"field",props:{accept:{type:{name:"string"},required:!1,description:"File type filter. (eg. '.md,.pdf' or 'audio/*')"},type:{type:{name:"enum",value:[{value:"'thin'",computed:!1},{value:"'large'",computed:!1}]},required:!1,description:"File upload field type (eg. 'thin', etc.)",defaultValue:{value:"'thin'",computed:!1}},imageSource:{type:{name:"string"},required:!1,description:"Path to empty dropdown area image"},maxLength:{type:{name:"number"},required:!1,description:"Max length for the input field"},maxFileSizeKB:{type:{name:"number"},required:!1,description:"Max file size in KB for the input field"},onUpload:{type:{name:"func"},required:!1,description:"Callback when valid file is selected"},messageProps:{type:{name:"shape",value:{emptyUploadAreaMessage:{name:"union",description:"Message for drag & drop",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadFilesMessage:{name:"union",description:"Message for upload file",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadedFilesMessage:{name:"union",description:"Message for uploaded file",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},removeFileMessage:{name:"union",description:"Message for removing file",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},maxLengthMessage:{name:"union",description:"Message for file name max length",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},maxFileSizeKBMessage:{name:"union",description:"Message for max file size",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},incorrectFileTypeMessage:{name:"union",description:"Error message to present if the file type is incorrect",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadSelectedMessage:{name:"union",description:"Message dispayed when file is selected",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadProgressMessage:{name:"union",description:"Message displayed during uploading",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadCompletedMessage:{name:"union",description:"Message displayed after completed upload",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadCancelledMessage:{name:"union",description:"Message displayed when upload is cancelled",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},uploadFailedMessage:{name:"union",description:"Message displayed when upload failed to finish",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},backgroundUploadFileMessage:{name:"union",description:"Message displayed on disabled button in large field",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"},buttonType:{type:{name:"enum",computed:!1,value:[{value:"'filled'",computed:!1},{value:"'outlined'",computed:!1},{value:"'text'",computed:!1}]},required:!1,description:"'type' prop for the rendered button",defaultValue:{value:"'outlined'",computed:!1}},buttonSize:{type:{name:"enum",computed:!1,value:[{value:"'small'",computed:!1},{value:"'medium'",computed:!1}]},required:!1,description:"'size' prop for the rendered button",defaultValue:{value:"'small'",computed:!1}},buttonIcon:{type:{name:"string"},required:!1,description:"'icon' prop for the rendered button"},disableDragAndDrop:{type:{name:"bool"},required:!1,description:"Determines if the drag and drop functionality of the component should be disabled"},total:{type:{name:"number"},required:!1,description:"Total size in bytes of selected file to upload"},completed:{type:{name:"number"},required:!1,description:"Current bytes uploaded"},onCancel:{type:{name:"func"},required:!1,description:"Action triggered when user clicks cancel button during uploading"},onFileClear:{type:{name:"func"},required:!1,description:"Action triggered when user clears selected file"},uploadState:{type:{name:"enum",value:[{value:"'selection'",computed:!1},{value:"'progress'",computed:!1},{value:"'completed'",computed:!1},{value:"'cancelled'",computed:!1},{value:"'failed'",computed:!1}]},required:!1,description:"Current state of upload"},progressErrorMessage:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"User defined error message on failed upload"},controlClassName:{defaultValue:{value:"styles.fileUploadField",computed:!0},required:!1},placeholder:{defaultValue:{value:"messages.placeholder",computed:!0},required:!1}},composes:["../FieldComponent/FieldComponent"]};