import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import{useCallback,useState}from"react";export const uploadStates=["selection","progress","completed","cancelled","failed"];export const useFileUpload=({onCancel:onCancel,onValueClear:onValueClear})=>{var _file$size;const _useState=useState(),_useState2=_slicedToArray(_useState,2),file=_useState2[0],setFile=_useState2[1],_useState3=useState(0),_useState4=_slicedToArray(_useState3,2),completed=_useState4[0],setCompleted=_useState4[1],_useState5=useState("selection"),_useState6=_slicedToArray(_useState5,2),uploadState=_useState6[0],setUploadState=_useState6[1],_useState7=useState(),_useState8=_slicedToArray(_useState7,2),progressErrorMessage=_useState8[0],setProgressErrorMessage=_useState8[1],total=null!==(_file$size=null==file?void 0:file.size)&&void 0!==_file$size?_file$size:1,progress=useCallback((finished=>{finished===total?(setUploadState("completed"),setCompleted(total)):(setUploadState("progress"),setCompleted(finished))}),[total]),cancel=useCallback((()=>{var _file$size2;setUploadState("cancelled"),setCompleted(null!==(_file$size2=null==file?void 0:file.size)&&void 0!==_file$size2?_file$size2:0)}),[file]),error=useCallback((message=>{var _file$size3;setProgressErrorMessage(message),setUploadState("failed"),setCompleted(null!==(_file$size3=null==file?void 0:file.size)&&void 0!==_file$size3?_file$size3:0)}),[file]),valueClear=useCallback((()=>{setUploadState("selection"),setProgressErrorMessage(""),setCompleted(0),setFile(void 0)}),[]);return{progress:progress,cancel:cancel,error:error,file:file,props:{onUpload:f=>{setFile(f)},onCancel:()=>{cancel(),onCancel()},onValueClear:()=>{valueClear(),onValueClear()},total:total,completed:completed,uploadState:uploadState,progressErrorMessage:progressErrorMessage}}};