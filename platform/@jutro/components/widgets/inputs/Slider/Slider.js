import _extends from"@babel/runtime-corejs3/helpers/extends";import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import RCSlider,{Range as RCRange}from"rc-slider";import{FormattedNumber}from"react-intl";import cx from"classnames";import capitalize from"lodash/capitalize";import{error,warning}from"@jutro/logger";import{DATA_TYPE_NUMBER}from"@jutro/prop-types";import styles from"./Slider.module.css";import{FieldComponent}from"../FieldComponent/FieldComponent";import{sliderValuePropType}from"./sliderUtils";import{SliderIndicatorsContainer}from"./SliderIndicatorsContainer";import{SliderHandle}from"./SliderHandle";const HANDLE_TOOLTIP_VISIBILITY=["always","ondrag","onfocus","onblur"];export let Slider=function(_FieldComponent){_inherits(Slider,FieldComponent);var _super=_createSuper(Slider);function Slider(...args){var _this;return _classCallCheck(this,Slider),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"renderValue",(value=>React.createElement(FormattedNumber,{value:value}))),_defineProperty(_assertThisInitialized(_this),"renderValueRange",(([start,end])=>React.createElement(React.Fragment,null,_this.renderValue(start),"-",_this.renderValue(end)))),_defineProperty(_assertThisInitialized(_this),"onValueChanged",(value=>{_this.notifyChange(value)})),_this}return _createClass(Slider,[{key:"value",get:function(){const _this$props=this.props,min=_this$props.min,max=_this$props.max,range=_this$props.range,value=_this$props.value;if(!range)return Number.isFinite(value)?value:min;const _ref=Array.isArray(value)?value:[],_ref2=_slicedToArray(_ref,2),_ref2$=_ref2[0],start=void 0===_ref2$?min:_ref2$,_ref2$2=_ref2[1];return[start,void 0===_ref2$2?max:_ref2$2]}},{key:"renderControlReadOnly",value:function(breakpointProps){const id=breakpointProps.id,range=breakpointProps.range,className=breakpointProps.className,value=this.value;return React.createElement("div",{id:id,className:className},range?this.renderValueRange(value):this.renderValue(value))}},{key:"validateProps",value:function(){const _this$props2=this.props,min=_this$props2.min,step=_this$props2.step,minimumRange=_this$props2.minimumRange,max=_this$props2.max,range=_this$props2.range,value=this.value;range?((value[0]<min||value[0]>max)&&warning(`Value prop: First value is not between min: ${min} and max: ${max}`),(value[1]<min||value[1]>max)&&warning(`Value prop: Second value is not between min: ${min} and max: ${max}`),value[0]>value[1]&&error("Value prop: First value is greater than second value")):(value<min||value>max)&&warning(`Value prop: Value is not between min: ${min} and max: ${max}`),Number.isFinite(max)&&Number.isFinite(min)||error("Min and max must be finite numbers."),min>max&&error(`Min prop: Value ${min} is greater than max prop value: ${max}.`),step<0&&error(`Step prop: ${step} is not valid.`),step>max-min&&warning(`Step prop: ${step} is not valid.`),(minimumRange<0||minimumRange>max-min)&&error(`MinimumRange prop: ${minimumRange} is not valid.`)}},{key:"renderControl",value:function(breakpointProps,{labelId:labelId}){this.validateProps();const min=breakpointProps.min,max=breakpointProps.max,showIndicators=breakpointProps.showIndicators,step=breakpointProps.step,showNotches=breakpointProps.showNotches,range=breakpointProps.range,minimumRange=breakpointProps.minimumRange,handleTooltip=breakpointProps.handleTooltip,onUpdate=breakpointProps.onUpdate,disabled=breakpointProps.disabled,className=breakpointProps.className,value=this.value;this.styles=styles;const handleTooltipClassName=`tooltip${capitalize(handleTooltip)}`,classes=cx(this.styles.slider,{[this.styles.disabled]:disabled},this.styles[handleTooltipClassName],className),componentProps={min:min,max:max,step:step,value:value,pushable:minimumRange,disabled:disabled,dots:showNotches,onChange:this.onValueChanged,onUpdate:onUpdate,handle:({index:index,dragging:dragging,...handleProps})=>{const props=this.props,fieldUniqueId=this.fieldUniqueId,handleId=0===index?fieldUniqueId:`${fieldUniqueId}-${index}`,handleTestId=0===index?props.testId||props.id:`${props.testId||props.id}-${index}`;return React.createElement(SliderHandle,_extends({id:handleId,key:index},handleProps,{className:styles.handle,tooltipClassName:styles.tooltip,labelId:labelId,testId:handleTestId}))},allowCross:!1,labelId:labelId},Component=range?RCRange:RCSlider,indicatorsProps={min:min,max:max,value:value,range:range,containerClassName:this.styles.indicators,indicatorClassName:this.styles.indicator},slider=React.createElement(Component,componentProps);return React.createElement("div",{className:classes,"data-testid":"slider-container"},showIndicators?React.createElement(SliderIndicatorsContainer,indicatorsProps,slider):slider)}},{key:"render",value:function(){return _get(_getPrototypeOf(Slider.prototype),"render",this).call(this)}}]),Slider}();_defineProperty(Slider,"propTypes",{...FieldComponent.propTypes,min:PropTypes.number.isRequired,max:PropTypes.number.isRequired,value:sliderValuePropType.isRequired,defaultValue:sliderValuePropType,showIndicators:PropTypes.bool,step:PropTypes.number,showNotches:PropTypes.bool,range:PropTypes.bool,minimumRange:PropTypes.number,handleTooltip:PropTypes.oneOf(HANDLE_TOOLTIP_VISIBILITY),onUpdate:PropTypes.func}),_defineProperty(Slider,"defaultProps",{...FieldComponent.defaultProps,showIndicators:!0,range:!1,handleTooltip:HANDLE_TOOLTIP_VISIBILITY[0],dataType:DATA_TYPE_NUMBER}),Slider.__docgenInfo={description:"@typedef {typeof Slider.propTypes} SliderPropTypes\n@extends FieldComponent<PropTypes.InferProps<SliderPropTypes>>\n\n@metadataType field",methods:[{name:"value",docblock:"Returns value\n@returns {number | number[]}",modifiers:["get"],params:[],returns:{description:null,type:{name:"union",elements:[{name:"number"},{name:"Array",elements:[{name:"number"}]}]}},description:"Returns value"},{name:"renderValue",docblock:"Renders formatted number value\n@param {number} value\n@returns {React.ReactElement}",modifiers:[],params:[{name:"value",description:null,type:{name:"number"},optional:!1}],returns:{description:null,type:{name:"React.ReactElement"}},description:"Renders formatted number value"},{name:"renderValueRange",docblock:"@param {[ number, number ]} range\n@returns {React.ReactElement}",modifiers:[],params:[{name:"[start, end]"}],returns:{description:null,type:{name:"React.ReactElement"}},description:null},{name:"renderControlReadOnly",docblock:null,modifiers:[],params:[{name:"breakpointProps",type:null}],returns:null},{name:"onValueChanged",docblock:"Handles value change\n@param {number} value",modifiers:[],params:[{name:"value",description:null,type:{name:"number"},optional:!1}],returns:null,description:"Handles value change"},{name:"validateProps",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:null,modifiers:[],params:[{name:"breakpointProps",type:null},{name:"{ labelId }",type:null}],returns:null}],displayName:"Slider",props:{showIndicators:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Prop to specify whether indicators should be shown or not"},range:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If set - range selector will be shown"},handleTooltip:{defaultValue:{value:"HANDLE_TOOLTIP_VISIBILITY[0]",computed:!0},type:{name:"enum",value:[{value:"'always'",computed:!1},{value:"'ondrag'",computed:!1},{value:"'onfocus'",computed:!1},{value:"'onblur'",computed:!1}]},required:!1,description:"Prop to specify when handle tooltip should be visible\n- ondrag - tooltip is visible only when user drags handle\n- onfocus - tooltip is visible only when handle is focused\n- onblur - tooltip is visible only when handle is blured\n- always - tooltip is always visible"},dataType:{defaultValue:{value:"DATA_TYPE_NUMBER",computed:!0},required:!1},min:{type:{name:"number"},required:!0,description:"Minimum available slider value"},max:{type:{name:"number"},required:!0,description:"Maximum available slider value"},value:{type:{name:"custom",raw:"sliderValuePropType.isRequired"},required:!1,description:"Current slider value (to create fully controlled component)"},defaultValue:{type:{name:"custom",raw:"sliderValuePropType"},required:!1,description:"Initial slider value (to create uncontrolled component)"},step:{type:{name:"number"},required:!1,description:"Step between consecutive values"},showNotches:{type:{name:"bool"},required:!1,description:"Prop to specify whether notches should be shown or not"},minimumRange:{type:{name:"number"},required:!1,description:"Prop to specify minimum range size in case of range selection"},onUpdate:{type:{name:"func"},required:!1,description:"Callback when value changing is completed (to create uncontrolled component)"}},composes:["../FieldComponent/FieldComponent"]},Slider.__docgenInfo={componentName:"Slider",packageName:"@jutro/components",description:"",displayName:"Slider",methods:[{name:"value",docblock:"Returns value\n@returns {number | number[]}",modifiers:["get"],params:[],returns:{description:null,type:{name:"union",elements:[{name:"number"},{name:"Array",elements:[{name:"number"}]}]}},description:"Returns value"},{name:"renderValue",docblock:"Renders formatted number value\n@param {number} value\n@returns {React.ReactElement}",modifiers:[],params:[{name:"value",description:null,type:{name:"number"},optional:!1}],returns:{description:null,type:{name:"React.ReactElement"}},description:"Renders formatted number value"},{name:"renderValueRange",docblock:"@param {[ number, number ]} range\n@returns {React.ReactElement}",modifiers:[],params:[{name:"[start, end]"}],returns:{description:null,type:{name:"React.ReactElement"}},description:null},{name:"renderControlReadOnly",docblock:null,modifiers:[],params:[{name:"breakpointProps",optional:void 0,type:null}],returns:null},{name:"onValueChanged",docblock:"Handles value change\n@param {number} value",modifiers:[],params:[{name:"value",description:null,type:{name:"number"},optional:!1}],returns:null,description:"Handles value change"},{name:"validateProps",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:null,modifiers:[],params:[{name:"breakpointProps",optional:void 0,type:null},{name:"{ labelId }",optional:void 0,type:null}],returns:null}],actualName:"Slider",metadataType:"field",props:{min:{type:{name:"number"},required:!0,description:"Minimum available slider value"},max:{type:{name:"number"},required:!0,description:"Maximum available slider value"},value:{type:{name:"custom",raw:"sliderValuePropType"},required:!0,description:"Current slider value (to create fully controlled component)"},defaultValue:{type:{name:"custom",raw:"sliderValuePropType"},required:!1,description:"Initial slider value (to create uncontrolled component)"},showIndicators:{type:{name:"bool"},required:!1,description:"Prop to specify whether indicators should be shown or not",defaultValue:{value:"true",computed:!1}},step:{type:{name:"number"},required:!1,description:"Step between consecutive values"},showNotches:{type:{name:"bool"},required:!1,description:"Prop to specify whether notches should be shown or not"},range:{type:{name:"bool"},required:!1,description:"If set - range selector will be shown",defaultValue:{value:"false",computed:!1}},minimumRange:{type:{name:"number"},required:!1,description:"Prop to specify minimum range size in case of range selection"},handleTooltip:{type:{name:"enum",value:[{value:"'always'",computed:!1},{value:"'ondrag'",computed:!1},{value:"'onfocus'",computed:!1},{value:"'onblur'",computed:!1}]},required:!1,description:"Prop to specify when handle tooltip should be visible\n- ondrag - tooltip is visible only when user drags handle\n- onfocus - tooltip is visible only when handle is focused\n- onblur - tooltip is visible only when handle is blured\n- always - tooltip is always visible",defaultValue:{value:"HANDLE_TOOLTIP_VISIBILITY[0]",computed:!0}},onUpdate:{type:{name:"func"},required:!1,description:"Callback when value changing is completed (to create uncontrolled component)"},dataType:{defaultValue:{value:"DATA_TYPE_NUMBER",computed:!0},required:!1}},composes:["../FieldComponent/FieldComponent"]};