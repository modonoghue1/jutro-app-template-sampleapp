import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _get from"@babel/runtime-corejs3/helpers/get";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import _ from"lodash";import cx from"classnames";import{FieldComponent}from"../FieldComponent/FieldComponent";import{Checkbox}from"./Checkbox";import styles from"./CheckboxField.module.css";function isChecked(value){return!_.isNil(value)&&"true"===value.toString()}export let CheckboxField=function(_FieldComponent){_inherits(CheckboxField,FieldComponent);var _super=_createSuper(CheckboxField);function CheckboxField(...args){var _thisSuper,_this;return _classCallCheck(this,CheckboxField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"renderInlineLabel",(()=>{const classes=cx(styles.checkboxElementWrapper);return React.createElement("div",{className:classes},_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(CheckboxField.prototype)),"renderLabel",_thisSuper).call(_thisSuper,_this.props,styles.inlineLabel))})),_defineProperty(_assertThisInitialized(_this),"isInlineLabelVisible",(()=>{const _this$props=_this.props,showInlineLabel=_this$props.showInlineLabel,hideLabel=_this$props.hideLabel;return showInlineLabel||hideLabel})),_defineProperty(_assertThisInitialized(_this),"renderControl",(breakpointProps=>{const testId=breakpointProps.testId,id=breakpointProps.id;return React.createElement(Checkbox,_extends({},breakpointProps,_this.baseProps,{testId:testId||id}))})),_defineProperty(_assertThisInitialized(_this),"renderControlReadOnly",(breakpointProps=>React.createElement(Checkbox,_extends({},breakpointProps,_this.baseProps,{disabled:!0})))),_defineProperty(_assertThisInitialized(_this),"handleClick",(evt=>{null==evt||evt.stopPropagation(),null==evt||evt.preventDefault();const _this$props2=_this.props,value=_this$props2.value,disabled=_this$props2.disabled,readOnly=_this$props2.readOnly;disabled||readOnly||_this.notifyChange(!isChecked(value))})),_defineProperty(_assertThisInitialized(_this),"handleCheckChange",(evt=>{const value=evt.target.checked;_this.notifyChange(value)})),_defineProperty(_assertThisInitialized(_this),"handleKeyDown",(evt=>{if("Enter"===evt.key||" "===evt.key){const checked=isChecked(_this.props.value);_this.notifyChange(!checked),evt.preventDefault()}})),_this}return _createClass(CheckboxField,[{key:"render",value:function(){return _get(_getPrototypeOf(CheckboxField.prototype),"render",this).call(this)}},{key:"renderLabel",value:function(props){return this.isInlineLabelVisible()?null:_get(_getPrototypeOf(CheckboxField.prototype),"renderLabel",this).call(this,props)}},{key:"baseProps",get:function(){return{id:this.fieldUniqueId,onClick:this.handleClick,checked:isChecked(this.props.value),onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,onChange:this.handleCheckChange,accessibilityProps:this.generateAccessibilityProperties(),renderInlineLabel:this.renderInlineLabel}}}],[{key:"isContentVisible",value:function(value){return isChecked(value)}}]),CheckboxField}();_defineProperty(CheckboxField,"propTypes",{...FieldComponent.propTypes,value:PropTypes.oneOfType([PropTypes.string,PropTypes.bool]),defaultValue:PropTypes.oneOfType([PropTypes.string,PropTypes.bool]),showInlineLabel:PropTypes.bool,detailElement:PropTypes.node,children:PropTypes.node}),CheckboxField.__docgenInfo={description:"Displays a label, clickable box, and message.\n\n@typedef {typeof CheckboxField.propTypes} CheckboxFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<CheckboxFieldPropTypes>>\n\n@metadataType field",methods:[{name:"isContentVisible",docblock:null,modifiers:["static"],params:[{name:"value",type:null}],returns:null},{name:"renderInlineLabel",docblock:"Render label for this component. Override FieldComponent renderLabel\n\n@returns {React.ReactElement} JSX for the inline label",modifiers:[],params:[],returns:{description:"JSX for the inline label",type:{name:"React.ReactElement"}},description:"Render label for this component. Override FieldComponent renderLabel"},{name:"renderLabel",docblock:"Render label for this component. Override FieldComponent renderLabel\n\n@returns {React.ReactElement} JSX for the label",modifiers:[],params:[{name:"props"}],returns:{description:"JSX for the label",type:{name:"React.ReactElement"}},description:"Render label for this component. Override FieldComponent renderLabel"},{name:"isInlineLabelVisible",docblock:"Check is inline label is visible\n@returns {boolean} whether the inline label is visible",modifiers:[],params:[],returns:{description:"whether the inline label is visible",type:{name:"boolean"}},description:"Check is inline label is visible"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"renderControlReadOnly",docblock:"Renders Checkbox that is read only\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Renders Checkbox that is read only"},{name:"baseProps",docblock:null,modifiers:["get"],params:[],returns:null},{name:"handleClick",docblock:null,modifiers:[],params:[{name:"evt",type:null}],returns:null},{name:"handleCheckChange",docblock:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback"},{name:"handleKeyDown",docblock:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback"}],displayName:"CheckboxField",props:{value:{type:{name:"union",value:[{name:"string"},{name:"bool"}]},required:!1,description:"Boolean or string value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"bool"}]},required:!1,description:"Default value"},showInlineLabel:{type:{name:"bool"},required:!1,description:"If true, displays label inline"},detailElement:{type:{name:"node"},required:!1,description:"Node to render when checkbox is selected, as processed by `renderContentFromMetadata` method (metadata 3.0)"},children:{type:{name:"node"},required:!1,description:"Children to render when checkbox is selected (metadata 3.0)"}},composes:["../FieldComponent/FieldComponent"]},CheckboxField.__docgenInfo={componentName:"CheckboxField",packageName:"@jutro/components",description:"Displays a label, clickable box, and message.",displayName:"CheckboxField",methods:[{name:"isContentVisible",docblock:null,modifiers:["static"],params:[{name:"value",optional:void 0,type:null}],returns:null},{name:"renderInlineLabel",docblock:"Render label for this component. Override FieldComponent renderLabel\n\n@returns {React.ReactElement} JSX for the inline label",modifiers:[],params:[],returns:{description:"JSX for the inline label",type:{name:"React.ReactElement"}},description:"Render label for this component. Override FieldComponent renderLabel"},{name:"renderLabel",docblock:"Render label for this component. Override FieldComponent renderLabel\n\n@returns {React.ReactElement} JSX for the label",modifiers:[],params:[{name:"props"}],returns:{description:"JSX for the label",type:{name:"React.ReactElement"}},description:"Render label for this component. Override FieldComponent renderLabel"},{name:"isInlineLabelVisible",docblock:"Check is inline label is visible\n@returns {boolean} whether the inline label is visible",modifiers:[],params:[],returns:{description:"whether the inline label is visible",type:{name:"boolean"}},description:"Check is inline label is visible"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"renderControlReadOnly",docblock:"Renders Checkbox that is read only\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Renders Checkbox that is read only"},{name:"baseProps",docblock:null,modifiers:["get"],params:[],returns:null},{name:"handleClick",docblock:null,modifiers:[],params:[{name:"evt",optional:void 0,type:null}],returns:null},{name:"handleCheckChange",docblock:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback"},{name:"handleKeyDown",docblock:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `checkbox` element. Uses `notifyChange` to invoke onValueChange callback"}],actualName:"CheckboxField",metadataType:"field",props:{value:{type:{name:"union",value:[{name:"string"},{name:"bool"}]},required:!1,description:"Boolean or string value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"bool"}]},required:!1,description:"Default value"},showInlineLabel:{type:{name:"bool"},required:!1,description:"If true, displays label inline"},detailElement:{type:{name:"node"},required:!1,description:"Node to render when checkbox is selected, as processed by `renderContentFromMetadata` method (metadata 3.0)"},children:{type:{name:"node"},required:!1,description:"Children to render when checkbox is selected (metadata 3.0)"}},composes:["../FieldComponent/FieldComponent"]};