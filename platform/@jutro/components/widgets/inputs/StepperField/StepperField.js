import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import cx from"classnames";import clamp from"lodash/clamp";import{mappingDelta,getMessageProp}from"@jutro/platform";import{intlMessageShape}from"@jutro/prop-types";import{getValueForInput,isNumber}from"@jutro/data";import{FieldComponent}from"../FieldComponent/FieldComponent";import styles from"./StepperField.module.css";import inputStyles from"../InputField/InputField.module.css";import{Button}from"../../button/Button";import{messages}from"./StepperField.messages";export let StepperField=function(_FieldComponent){_inherits(StepperField,FieldComponent);var _super=_createSuper(StepperField);function StepperField(...args){var _this;return _classCallCheck(this,StepperField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"state",{min:0,max:0}),_defineProperty(_assertThisInitialized(_this),"getValidValue",(value=>{if(""===value)return"";const _this$state=_this.state,min=_this$state.min,max=_this$state.max;return clamp(value,min,max)})),_defineProperty(_assertThisInitialized(_this),"handleBlur",(evt=>{""===evt.target.value&&_this.notifyChange("");const value=getValueForInput("number",evt.target.value);_this.notifyChange(_this.getValidValue(value))})),_defineProperty(_assertThisInitialized(_this),"isValueInBoundaries",(value=>value>=_this.state.min&&value<=_this.state.max)),_defineProperty(_assertThisInitialized(_this),"handleStep",((evt,increase)=>{evt.preventDefault();const _this$state2=_this.state,step=_this$state2.step,value=_this$state2.value,newValue=increase?value+step:value-step;_this.notifyChange(newValue)})),_defineProperty(_assertThisInitialized(_this),"stepUp",(evt=>_this.handleStep(evt,!0))),_defineProperty(_assertThisInitialized(_this),"stepDown",(evt=>_this.handleStep(evt,!1))),_this}return _createClass(StepperField,[{key:"render",value:function(){return _get(_getPrototypeOf(StepperField.prototype),"render",this).call(this)}},{key:"generateAccessibilityProperties",value:function(){const _this$props=this.props,value=_this$props.value,minValue=_this$props.minValue,maxValue=_this$props.maxValue;return{..._get(_getPrototypeOf(StepperField.prototype),"generateAccessibilityProperties",this).call(this),"aria-valuenow":value,"aria-valuemin":minValue,"aria-valuemax":maxValue,"aria-live":"polite"}}},{key:"renderControl",value:function(breakpointProps){const disabled=breakpointProps.disabled,required=breakpointProps.required,controlClassName=breakpointProps.controlClassName,messageProps=breakpointProps.messageProps,id=breakpointProps.id,testId=breakpointProps.testId,fieldUniqueId=this.fieldUniqueId,controlClasses=cx(styles.stepper,controlClassName),inputClasses=cx(inputStyles.input,styles.input),translator=this.translator,decreaseBtnLabel=translator(getMessageProp("decreaseBtnLabel",messageProps,messages)),increaseBtnLabel=translator(getMessageProp("increaseBtnLabel",messageProps,messages)),_this$state3=this.state,min=_this$state3.min,max=_this$state3.max,value=_this$state3.value,step=_this$state3.step;return React.createElement("div",{className:controlClasses},React.createElement(Button,{icon:"gw-remove","aria-label":decreaseBtnLabel,onClick:this.stepDown,disabled:disabled||!this.isValueInBoundaries(value-step),type:"outlined"}),React.createElement("input",_extends({id:fieldUniqueId,type:"number",className:inputClasses,step:step,value:value,min:min,max:max,onChange:this.handleChange,onBlur:this.handleBlur},this.getInputFocusHandlers(),{disabled:disabled,required:required,tabIndex:"0"},this.generateDataPathProperty(),this.generateAccessibilityProperties(),{"data-testid":testId||id})),React.createElement(Button,{icon:"gw-add","aria-label":increaseBtnLabel,onClick:this.stepUp,disabled:disabled||!this.isValueInBoundaries(value+step),type:"outlined",className:styles.button}))}}],[{key:"getDerivedStateFromProps",value:function(nextProps,prevState){const minValue=nextProps.minValue,maxValue=nextProps.maxValue,stepValue=nextProps.stepValue,value=nextProps.value,min=isNumber(minValue)?minValue:-1/0,max=isNumber(maxValue)?maxValue:1/0,step=stepValue>0?stepValue:1;let newValue=getValueForInput("number",value);return!newValue||prevState&&prevState.min===min&&prevState.max===max||(newValue=clamp(newValue,min,max)),mappingDelta({min:min,max:max,step:step,value:newValue},prevState)}}]),StepperField}();_defineProperty(StepperField,"propTypes",{...FieldComponent.propTypes,value:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),defaultValue:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),stepValue:PropTypes.number,minValue:PropTypes.number,maxValue:PropTypes.number,messageProps:PropTypes.shape({decreaseBtnLabel:intlMessageShape,increaseBtnLabel:intlMessageShape})}),_defineProperty(StepperField,"contextType",FieldComponent.contextType),_defineProperty(StepperField,"defaultProps",{...FieldComponent.defaultProps}),StepperField.__docgenInfo={description:"Renders a numeric value and buttons to increase or decrease the value.\n@typedef {typeof StepperField.propTypes} StepperFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<StepperFieldPropTypes>>\n\n@metadataType field",methods:[{name:"getValidValue",docblock:"Given a number value, will clamp the value within the current max and min\n\n@param {number} value - Value to be clamped\n@returns {number|string} - The clamped number value or an empty string",modifiers:[],params:[{name:"value",description:"Value to be clamped",type:{name:"number"},optional:!1}],returns:{description:"The clamped number value or an empty string",type:{name:"union",elements:[{name:"number"},{name:"string"}]}},description:"Given a number value, will clamp the value within the current max and min"},{name:"handleBlur",docblock:"Overridden blur handler for `input` element. Converts possible string input into a number and clamps value.\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Overridden blur handler for `input` element. Converts possible string input into a number and clamps value."},{name:"isValueInBoundaries",docblock:"Checks whether value is between props.minValue and props.maxValue\n\n@param {number} value to be tested\n@returns {boolean} true if the value is between properties boundaries",modifiers:[],params:[{name:"value",description:"to be tested",type:{name:"number"},optional:!1}],returns:{description:"true if the value is between properties boundaries",type:{name:"boolean"}},description:"Checks whether value is between props.minValue and props.maxValue"},{name:"handleStep",docblock:"Custom handler for `button` element. Increments/decrements the stepper input control\n\n@param {object} evt - React event wrapper\n@param {boolean} increase - indicates whether to increase or decrease the value",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1},{name:"increase",description:"indicates whether to increase or decrease the value",type:{name:"boolean"},optional:!1}],returns:null,description:"Custom handler for `button` element. Increments/decrements the stepper input control"},{name:"stepUp",docblock:"Custom handler to increase the stepper input control\n\n@param {object} evt - React event wrapper\n@returns {undefined}",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:{description:null,type:null},description:"Custom handler to increase the stepper input control"},{name:"stepDown",docblock:"Custom handler to decrease the stepper input control\n\n@param {object} evt - React event wrapper\n@returns {undefined}",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:{description:null,type:null},description:"Custom handler to decrease the stepper input control"},{name:"generateAccessibilityProperties",docblock:"generates accessibility properties\n@returns {object} set of applicable wai-aria tags",modifiers:[],params:[],returns:{description:"set of applicable wai-aria tags",type:{name:"object"}},description:"generates accessibility properties"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"StepperField",props:{value:{type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1,description:"String or number passed as value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1,description:"Default value"},stepValue:{type:{name:"number"},required:!1,description:"Step increment value for the input field"},minValue:{type:{name:"number"},required:!1,description:"Minimum value for the input field (note: this is different than aspect)"},maxValue:{type:{name:"number"},required:!1,description:"Maximum value for the input field (note: this is different than aspect)"},messageProps:{type:{name:"shape",value:{decreaseBtnLabel:{name:"custom",raw:"intlMessageShape",description:"stepper decrease button aria-label",required:!1},increaseBtnLabel:{name:"custom",raw:"intlMessageShape",description:"stepper increase button aria-label",required:!1}}},required:!1,description:"Message props(error message/aria-label)"}},composes:["../FieldComponent/FieldComponent"]},StepperField.__docgenInfo={componentName:"StepperField",packageName:"@jutro/components",description:"Renders a numeric value and buttons to increase or decrease the value.",displayName:"StepperField",methods:[{name:"getValidValue",docblock:"Given a number value, will clamp the value within the current max and min\n\n@param {number} value - Value to be clamped\n@returns {number|string} - The clamped number value or an empty string",modifiers:[],params:[{name:"value",description:"Value to be clamped",type:{name:"number"},optional:!1}],returns:{description:"The clamped number value or an empty string",type:{name:"union",elements:[{name:"number"},{name:"string"}]}},description:"Given a number value, will clamp the value within the current max and min"},{name:"handleBlur",docblock:"Overridden blur handler for `input` element. Converts possible string input into a number and clamps value.\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Overridden blur handler for `input` element. Converts possible string input into a number and clamps value."},{name:"isValueInBoundaries",docblock:"Checks whether value is between props.minValue and props.maxValue\n\n@param {number} value to be tested\n@returns {boolean} true if the value is between properties boundaries",modifiers:[],params:[{name:"value",description:"to be tested",type:{name:"number"},optional:!1}],returns:{description:"true if the value is between properties boundaries",type:{name:"boolean"}},description:"Checks whether value is between props.minValue and props.maxValue"},{name:"handleStep",docblock:"Custom handler for `button` element. Increments/decrements the stepper input control\n\n@param {object} evt - React event wrapper\n@param {boolean} increase - indicates whether to increase or decrease the value",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1},{name:"increase",description:"indicates whether to increase or decrease the value",type:{name:"boolean"},optional:!1}],returns:null,description:"Custom handler for `button` element. Increments/decrements the stepper input control"},{name:"stepUp",docblock:"Custom handler to increase the stepper input control\n\n@param {object} evt - React event wrapper\n@returns {undefined}",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:{description:null,type:null},description:"Custom handler to increase the stepper input control"},{name:"stepDown",docblock:"Custom handler to decrease the stepper input control\n\n@param {object} evt - React event wrapper\n@returns {undefined}",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:{description:null,type:null},description:"Custom handler to decrease the stepper input control"},{name:"generateAccessibilityProperties",docblock:"generates accessibility properties\n@returns {object} set of applicable wai-aria tags",modifiers:[],params:[],returns:{description:"set of applicable wai-aria tags",type:{name:"object"}},description:"generates accessibility properties"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"StepperField",metadataType:"field",props:{value:{type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1,description:"String or number passed as value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1,description:"Default value"},stepValue:{type:{name:"number"},required:!1,description:"Step increment value for the input field"},minValue:{type:{name:"number"},required:!1,description:"Minimum value for the input field (note: this is different than aspect)"},maxValue:{type:{name:"number"},required:!1,description:"Maximum value for the input field (note: this is different than aspect)"},messageProps:{type:{name:"shape",value:{decreaseBtnLabel:{name:"union",description:"stepper decrease button aria-label",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},increaseBtnLabel:{name:"union",description:"stepper increase button aria-label",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"}},composes:["../FieldComponent/FieldComponent"]};