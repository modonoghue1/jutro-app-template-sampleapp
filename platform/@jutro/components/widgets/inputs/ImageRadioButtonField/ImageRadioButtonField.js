import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import{isEmptyValue,isNilValue}from"@jutro/data";import{defaultAvailableValuePropType,dataTypeShape,DATA_TYPE_STRING}from"@jutro/prop-types";import cx from"classnames";import{FieldComponent}from"../FieldComponent/FieldComponent";import{getOptionCode,getOptionName}from"../availableValues";import styles from"./ImageRadioButtonField.module.css";import{Icon}from"../../Icon/Icon";import{makeHandleRadioButtonKeyDown}from"../../../radiobuttonUtils";export let ImageRadioButtonField=function(_FieldComponent){_inherits(ImageRadioButtonField,FieldComponent);var _super=_createSuper(ImageRadioButtonField);function ImageRadioButtonField(...args){var _this;return _classCallCheck(this,ImageRadioButtonField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"handleRadioChange",(evt=>{const targetValue=evt.target.value;_this.handleAvailableValuesValueChange(targetValue)})),_defineProperty(_assertThisInitialized(_this),"getOtherOptionImageName",(breakpointProps=>{const otherOptionImage=breakpointProps.otherOptionImage,imageFormat=breakpointProps.imageFormat;return/.*\.([a-z]{3})/.test(otherOptionImage)?otherOptionImage:`${otherOptionImage}.${imageFormat}`})),_this}return _createClass(ImageRadioButtonField,[{key:"render",value:function(){return _get(_getPrototypeOf(ImageRadioButtonField.prototype),"render",this).call(this)}},{key:"renderControl",value:function(breakpointProps){const id=breakpointProps.id,availableValues=breakpointProps.availableValues,imageBasePath=breakpointProps.imageBasePath,imageClassName=breakpointProps.imageClassName,detailElement=breakpointProps.detailElement,disabled=breakpointProps.disabled,label=breakpointProps.label,required=breakpointProps.required,controlClassName=breakpointProps.controlClassName,imageFormat=breakpointProps.imageFormat,testId=breakpointProps.testId,translator=this.translator,fieldUniqueId=this.fieldUniqueId,values=availableValues,publicUrl=process.env.PUBLIC_URL,sourceRoot=publicUrl?`${publicUrl}/${imageBasePath}`:imageBasePath,componentClassName=cx(styles.imageRadioButton,imageClassName,controlClassName),selectedValue=this.getDataTypeAwareSelectedValue(),handleRadioButtonKeyDown=makeHandleRadioButtonKeyDown(((el,value)=>{el.querySelector(`label[for=${fieldUniqueId}_${value}]`).focus()})),radios=values.map((option=>{let code=getOptionCode(option),checked=!isNilValue(selectedValue)&&selectedValue.toString()===code;isNilValue(code)&&(code="empty",checked=isEmptyValue(selectedValue));const valueId=`${fieldUniqueId}_${code}`,valueTestId=`${testId||id}_${code}`,imageFile="other"===code?this.getOtherOptionImageName(breakpointProps):`${code}.${imageFormat}`,imageSource=`${sourceRoot}/${imageFile}`,name=getOptionName(option),optionName=translator(name),contentWrapperStyles=cx(styles.contentWrapper,{[styles.disabled]:disabled}),labelStyles=cx(styles.label,{[styles.disabled]:disabled});return React.createElement("label",{"aria-label":optionName,key:valueId,htmlFor:valueId,className:labelStyles},React.createElement("input",_extends({type:"radio",id:valueId,"data-testid":valueTestId,value:code||"",onChange:this.handleRadioChange,"aria-checked":checked,checked:checked,disabled:disabled,required:required},this.generateDataPathProperty(),this.generateAccessibilityProperties())),React.createElement("div",{className:contentWrapperStyles},React.createElement("div",{className:styles.iconImageContainer},React.createElement("div",{className:styles.imageWrapper},React.createElement("img",{alt:translator(option.imageAltText)||optionName,className:styles.image,src:imageSource})),React.createElement(Icon,{icon:"gw-check",className:styles.icon,size:"medium"})),React.createElement("div",{className:styles.text},optionName)))}));if("other"===selectedValue&&detailElement){const otherId=`${fieldUniqueId}_other_element`;radios.push(React.createElement("label",{key:otherId,htmlFor:otherId,className:cx(styles.label,styles.otherOption)},detailElement))}return React.createElement("div",{id:id,className:componentClassName,"aria-label":translator(label),onKeyDown:event=>handleRadioButtonKeyDown(event,breakpointProps,this.handleAvailableValuesValueChange),role:"radiogroup"},radios)}}]),ImageRadioButtonField}();_defineProperty(ImageRadioButtonField,"propTypes",{...FieldComponent.propTypes,value:defaultAvailableValuePropType,defaultValue:defaultAvailableValuePropType,dataType:dataTypeShape,availableValues:PropTypes.array,imageBasePath:PropTypes.string,imageFormat:PropTypes.string,imageClassName:PropTypes.string,otherOptionImage:PropTypes.string}),_defineProperty(ImageRadioButtonField,"defaultProps",{...FieldComponent.defaultProps,availableValues:[],dataType:DATA_TYPE_STRING,imageFormat:"jpg",otherOptionImage:"other.svg"}),_defineProperty(ImageRadioButtonField,"contextType",FieldComponent.contextType),ImageRadioButtonField.__docgenInfo={description:"Renders a list of radio buttons where each button is an image. You map images onto options\nas shown in the following example.\n@typedef {typeof ImageRadioButtonField.propTypes} ImageRadioButtonFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<ImageRadioButtonFieldPropTypes>>\n\n@metadataType field",methods:[{name:"handleRadioChange",docblock:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback"},{name:"getOtherOptionImageName",docblock:null,modifiers:[],params:[{name:"breakpointProps",type:null}],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"ImageRadioButtonField",props:{availableValues:{defaultValue:{value:"[]",computed:!1},type:{name:"array"},required:!1,description:"Array of choice objects to display; choice objects contains 'code', 'name' and 'imageAltText'"},dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"The format of the value"},imageFormat:{defaultValue:{value:"'jpg'",computed:!1},type:{name:"string"},required:!1,description:"Optional file format to reference images for options"},otherOptionImage:{defaultValue:{value:"'other.svg'",computed:!1},type:{name:"string"},required:!1,description:"Optional name of custom image to be used for 'other' option"},value:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"The selected value"},defaultValue:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"Default value to set if none is provided"},imageBasePath:{type:{name:"string"},required:!1,description:"Base path for image sources"},imageClassName:{type:{name:"string"},required:!1,description:"An optional class for the div surrounding the images"}},composes:["../FieldComponent/FieldComponent"]},ImageRadioButtonField.__docgenInfo={componentName:"ImageRadioButtonField",packageName:"@jutro/components",description:"Renders a list of radio buttons where each button is an image. You map images onto options\nas shown in the following example.",displayName:"ImageRadioButtonField",methods:[{name:"handleRadioChange",docblock:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback"},{name:"getOtherOptionImageName",docblock:null,modifiers:[],params:[{name:"breakpointProps",optional:void 0,type:null}],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"ImageRadioButtonField",metadataType:"field",props:{value:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"The selected value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"Default value to set if none is provided"},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"The format of the value",defaultValue:{value:"'string'",computed:!1}},availableValues:{type:{name:"array"},required:!1,description:"Array of choice objects to display; choice objects contains 'code', 'name' and 'imageAltText'",defaultValue:{value:"[]",computed:!1}},imageBasePath:{type:{name:"string"},required:!1,description:"Base path for image sources"},imageFormat:{type:{name:"string"},required:!1,description:"Optional file format to reference images for options",defaultValue:{value:"'jpg'",computed:!1}},imageClassName:{type:{name:"string"},required:!1,description:"An optional class for the div surrounding the images"},otherOptionImage:{type:{name:"string"},required:!1,description:"Optional name of custom image to be used for 'other' option",defaultValue:{value:"'other.svg'",computed:!1}}},composes:["../FieldComponent/FieldComponent"]};