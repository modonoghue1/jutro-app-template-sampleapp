import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import cx from"classnames";import{dataTypeShape,availableValueObjectShape}from"@jutro/prop-types";import{FieldComponent}from"../FieldComponent/FieldComponent";import{CheckboxField}from"../CheckboxField/CheckboxField";import styles from"./CheckboxGroupField.module.css";export let CheckboxGroupField=function(_FieldComponent){_inherits(CheckboxGroupField,FieldComponent);var _super=_createSuper(CheckboxGroupField);function CheckboxGroupField(...args){var _this;return _classCallCheck(this,CheckboxGroupField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"handleValueChange",(code=>{const value=_this.props.value?[..._this.props.value]:[];if(value.includes(code)){const index=value.indexOf(code);value.splice(index,1)}else value.push(code);_this.notifyChange(value)})),_this}return _createClass(CheckboxGroupField,[{key:"render",value:function(){return _get(_getPrototypeOf(CheckboxGroupField.prototype),"render",this).call(this)}},{key:"renderLabel",value:function(props){return _get(_getPrototypeOf(CheckboxGroupField.prototype),"renderLabel",this).call(this,{...props,labelContainerClassName:styles.fieldLabelContainer})}},{key:"renderTooltipIcon",value:function(props){var _tooltip$text;const tooltip=this.props.tooltip,tooltipText=null!==(_tooltip$text=null==tooltip?void 0:tooltip.text)&&void 0!==_tooltip$text?_tooltip$text:tooltip,tooltipClassName=null==tooltip?void 0:tooltip.className,newProps={...props,tooltip:{...tooltip,text:tooltipText,className:cx(tooltipClassName,styles.tooltip)}};return _get(_getPrototypeOf(CheckboxGroupField.prototype),"renderTooltipIcon",this).call(this,newProps)}},{key:"renderCheckboxValues",value:function(props,values){const disabled=props.disabled,value=props.value,classes=cx(styles.checkboxGroup);return values.map((({code:code,name:name,subtitle:subtitle,secondaryLabel:secondaryLabel})=>{const isCheckedVal=value&&value.includes(code);return React.createElement(CheckboxField,{id:code,label:name,secondaryLabel:subtitle||secondaryLabel,key:code,className:classes,showInlineLabel:!0,required:!1,disabled:disabled,value:isCheckedVal,onValueChange:()=>this.handleValueChange(code),labelContainerClassName:styles.labelContainer})}))}},{key:"generateAccessibilityProperties",value:function(props){const translator=this.translator,label=props.label;return{..._get(_getPrototypeOf(CheckboxGroupField.prototype),"generateAccessibilityProperties",this).call(this),"aria-label":translator(label)}}},{key:"renderControl",value:function(breakpointProps){const id=breakpointProps.id,availableValues=breakpointProps.availableValues,controlClassName=breakpointProps.controlClassName,isHorizontal=breakpointProps.isHorizontal,checkboxes=this.renderCheckboxValues(breakpointProps,availableValues),classes=cx({[styles.horizontal]:isHorizontal},controlClassName);return React.createElement("div",_extends({id:id,className:classes},this.generateAccessibilityProperties(breakpointProps)),checkboxes)}}]),CheckboxGroupField}();_defineProperty(CheckboxGroupField,"propTypes",{...FieldComponent.propTypes,availableValues:PropTypes.arrayOf(availableValueObjectShape),value:PropTypes.arrayOf(PropTypes.string),dataType:dataTypeShape,isHorizontal:PropTypes.bool}),_defineProperty(CheckboxGroupField,"defaultProps",{...FieldComponent.defaultProps,availableValues:[],isHorizontal:!1}),CheckboxGroupField.__docgenInfo={description:"@typedef {typeof CheckboxGroupField.propTypes} CheckboxGroupFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<CheckboxGroupFieldPropTypes>>\n\n@metadataType field",methods:[{name:"handleValueChange",docblock:"Handles value change\n@param {string} code",modifiers:[],params:[{name:"code",description:null,type:{name:"string"},optional:!1}],returns:null,description:"Handles value change"},{name:"renderLabel",docblock:"Render label for this component. Override FieldComponent renderLabel\n\n@returns {React.ReactElement} JSX for the label",modifiers:[],params:[{name:"props"}],returns:{description:"JSX for the label",type:{name:"React.ReactElement"}},description:"Render label for this component. Override FieldComponent renderLabel"},{name:"renderTooltipIcon",docblock:null,modifiers:[],params:[{name:"props",type:null}],returns:null},{name:"renderCheckboxValues",docblock:"Render the checkboxes for the specified values\n\n@param {object} props\n@param {Array<any>} values - values to render\n@returns {React.ReactElement} JSX for the radio buttons",modifiers:[],params:[{name:"props",description:null,type:{name:"object"},optional:!1},{name:"values",description:"values to render",type:{name:"Array",elements:[{name:"any"}]},optional:!1}],returns:{description:"JSX for the radio buttons",type:{name:"React.ReactElement"}},description:"Render the checkboxes for the specified values"},{name:"generateAccessibilityProperties",docblock:"generates accessibility properties for the field component\n\n@param {object} props\n@returns {object} set of applicable wai-aria tags",modifiers:[],params:[{name:"props",description:null,type:{name:"object"},optional:!1}],returns:{description:"set of applicable wai-aria tags",type:{name:"object"}},description:"generates accessibility properties for the field component"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"CheckboxGroupField",props:{availableValues:{defaultValue:{value:"[]",computed:!1},type:{name:"arrayOf",value:{name:"custom",raw:"availableValueObjectShape"}},required:!1,description:"Array of available checkboxes"},isHorizontal:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true component will be horizontally oriented"},value:{type:{name:"arrayOf",value:{name:"string"}},required:!1,description:"List of the selected checkboxes codes."},dataType:{type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"The format of the items in the value array"}},composes:["../FieldComponent/FieldComponent"]},CheckboxGroupField.__docgenInfo={componentName:"CheckboxGroupField",packageName:"@jutro/components",description:"",displayName:"CheckboxGroupField",methods:[{name:"handleValueChange",docblock:"Handles value change\n@param {string} code",modifiers:[],params:[{name:"code",description:null,type:{name:"string"},optional:!1}],returns:null,description:"Handles value change"},{name:"renderLabel",docblock:"Render label for this component. Override FieldComponent renderLabel\n\n@returns {React.ReactElement} JSX for the label",modifiers:[],params:[{name:"props"}],returns:{description:"JSX for the label",type:{name:"React.ReactElement"}},description:"Render label for this component. Override FieldComponent renderLabel"},{name:"renderTooltipIcon",docblock:null,modifiers:[],params:[{name:"props",optional:void 0,type:null}],returns:null},{name:"renderCheckboxValues",docblock:"Render the checkboxes for the specified values\n\n@param {object} props\n@param {Array<any>} values - values to render\n@returns {React.ReactElement} JSX for the radio buttons",modifiers:[],params:[{name:"props",description:null,type:{name:"object"},optional:!1},{name:"values",description:"values to render",type:{name:"Array",elements:[{name:"any"}]},optional:!1}],returns:{description:"JSX for the radio buttons",type:{name:"React.ReactElement"}},description:"Render the checkboxes for the specified values"},{name:"generateAccessibilityProperties",docblock:"generates accessibility properties for the field component\n\n@param {object} props\n@returns {object} set of applicable wai-aria tags",modifiers:[],params:[{name:"props",description:null,type:{name:"object"},optional:!1}],returns:{description:"set of applicable wai-aria tags",type:{name:"object"}},description:"generates accessibility properties for the field component"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"CheckboxGroupField",metadataType:"field",props:{availableValues:{type:{name:"arrayOf",value:{name:"union",value:[{name:"shape",value:{code:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},name:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}},{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},displayName:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}}]}},required:!1,description:"Array of available checkboxes",defaultValue:{value:"[]",computed:!1}},value:{type:{name:"arrayOf",value:{name:"string"}},required:!1,description:"List of the selected checkboxes codes."},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"The format of the items in the value array"},isHorizontal:{type:{name:"bool"},required:!1,description:"If true component will be horizontally oriented",defaultValue:{value:"false",computed:!1}}},composes:["../FieldComponent/FieldComponent"]};