import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{PureComponent}from"react";import PropTypes from"prop-types";import cx from"classnames";import omitBy from"lodash/omitBy";import isEmpty from"lodash/isEmpty";import isObject from"lodash/isObject";import isFunction from"lodash/isFunction";import isUndefined from"lodash/isUndefined";import cloneDeep from"lodash/cloneDeep";import{TranslatorContext}from"@jutro/locale";import{intlMessageShape,DATA_TYPE_OBJECT,getDisplayName,DATA_TYPE_STRING,nestedTooltipShape}from"@jutro/prop-types";import{ContextConsumer,uniqueInnerId,generateComponentId}from"@jutro/platform";import{publish,JUTRO_TOPICS}from"@jutro/events";import{metadataTypes}from"@jutro/uimetadata";import{BreakpointTracker,BreakpointTrackerContext}from"@jutro/layout";import{isEmptyValue,isNilValue,VISIBLE_IF_REQUIRED}from"@jutro/data";import{getConfigValue}from"@jutro/config";import styles from"./FieldComponent.module.css";import{TooltipIcon}from"../../Tooltip/TooltipIcon";import{InlineFieldLayout}from"./InlineFieldLayout";import{FieldLabel}from"./FieldLabel";import{Icon}from"../../Icon/Icon";import{FieldComponentValidationImplementation}from"./FieldComponentValidationImplementation";import{OldFieldComponentValidationImplementation}from"./OldFieldComponentValidationImplementation";export let FieldComponent=function(_PureComponent){_inherits(FieldComponent,PureComponent);var _super=_createSuper(FieldComponent);function FieldComponent(_props){var _this;_classCallCheck(this,FieldComponent),_this=_super.call(this,_props),_defineProperty(_assertThisInitialized(_this),"validationDependencyProps",[]),_defineProperty(_assertThisInitialized(_this),"getDataTypeAwareSelectedValue",(()=>{const _this$props=_this.props,dataType=_this$props.dataType,value=_this$props.value;if(dataType===DATA_TYPE_OBJECT&&!isEmptyValue(value)){const selectedValue=isNilValue(value.code)?value.id:value.code;return!isNilValue(selectedValue)&&selectedValue.toString()||void 0}return value})),_defineProperty(_assertThisInitialized(_this),"handleAvailableValuesValueChange",(targetValue=>{const _this$props2=_this.props,dataType=_this$props2.dataType,availableValues=_this$props2.availableValues;let value;value=dataType===DATA_TYPE_OBJECT?availableValues.find(findAvailableValue(targetValue)):tryToCastToBoolean(targetValue),_this.notifyChange(value)})),_defineProperty(_assertThisInitialized(_this),"handleChange",(evt=>{let value=evt.target.value;"string"==typeof value&&_this.props.autoTrim&&(value=value.trim()),_this.notifyChange(value)})),_defineProperty(_assertThisInitialized(_this),"handleFocus",_this.handleFocus.bind(_assertThisInitialized(_this))),_defineProperty(_assertThisInitialized(_this),"handleBlur",_this.handleBlur.bind(_assertThisInitialized(_this))),_defineProperty(_assertThisInitialized(_this),"renderFieldComponent",(breakpoint=>{var _props$inputType;const props=BreakpointTracker.applyBreakpointOverrides({..._this.props,phone:{labelPosition:"top",..._this.props.phone}},breakpoint),breakpointProps={...props,inputType:null!==(_props$inputType=props.inputType)&&void 0!==_props$inputType?_props$inputType:"text"},layout=breakpointProps.layout,inputType=breakpointProps.inputType,className=breakpointProps.className,contentContainerClassName=breakpointProps.contentContainerClassName,readOnly=breakpointProps.readOnly,hideLabel=breakpointProps.hideLabel,label=breakpointProps.label,visible=breakpointProps.visible,isDesignMode=breakpointProps.isDesignMode,required=breakpointProps.required,schemaRequired=breakpointProps.schemaRequired,showValidationIcon=breakpointProps.showValidationIcon,successMessage=breakpointProps.successMessage,labelPosition=breakpointProps.labelPosition,showInlineLabel=breakpointProps.showInlineLabel,fieldUniqueId=_assertThisInitialized(_this).fieldUniqueId,labelId=uniqueInnerId(fieldUniqueId,"labelId").labelId,layoutComponent=_this.getLayoutComponent();let isHidden=!1===visible;visible===VISIBLE_IF_REQUIRED&&(isHidden=!0!==required&&!0!==schemaRequired);const validationMessages=_this.getValidationMessages();(validationMessages&&!isEmpty(validationMessages)||!_this.pristine)&&(isHidden=!1);const isValid=_this.isValid(validationMessages);if(!0===isHidden&&!isDesignMode)return null;const labelContent=_this.renderLabel(breakpointProps),controlContent=readOnly?_this.renderControlReadOnly(breakpointProps,labelContent?{labelId:labelId}:void 0):_this.renderControl(breakpointProps,labelContent?{isValid:isValid,labelId:labelId}:{isValid:isValid}),messageContent=_this.renderMessages(validationMessages,successMessage,isValid),relativeClass=_this.shouldRenderTooltipIcon()&&!0!==hideLabel&&""!==label?styles.relative:null;if(layoutComponent)return layoutComponent({labelContent:labelContent,controlContent:controlContent,messageContent:messageContent,className:cx(relativeClass,className)});const outerStyle=cx({[styles.fieldComponent]:"plain"!==layout,[styles.left]:"left"===labelPosition,[styles.reversed]:"reversed"===layout,[styles.fullWidth]:"full-width"===layout,[styles.fullWidthSimple]:"full-width-simple"===layout,[styles.hidden]:"hidden"===inputType},relativeClass,className),innerStyle=cx(styles.contentContainer,{[styles.controls]:"plain"!==layout,[styles.controlReadOnly]:readOnly},contentContainerClassName),validationIcon=_this.renderValidationIcon(showValidationIcon,readOnly,isValid,styles);return React.createElement("div",{className:outerStyle},labelContent,React.createElement("div",{className:innerStyle},controlContent,validationIcon,messageContent),"left"===labelPosition&&!showInlineLabel&&_this.renderTooltipIcon(breakpointProps))})),_defineProperty(_assertThisInitialized(_this),"getLayoutComponent",(()=>"inline"===_this.props.layout?InlineFieldLayout:void 0)),_this.state={isFocused:!1},_this.pristine=!0,_this.focused=!1,_this.focusPristine=!0,_this.beforeValue=null,_this.valid=!0;const id=_props.id;_this.fieldUniqueId=getConfigValue("generateUniqueId")?generateComponentId(id):id;const ValidationImplementation=_props.registerValidation?new FieldComponentValidationImplementation:new OldFieldComponentValidationImplementation;return _this.validationImplementation=ValidationImplementation.bind(_assertThisInitialized(_this)),_this}return _createClass(FieldComponent,[{key:"componentDidUpdate",value:function(...args){return this.validationImplementation.componentDidUpdate(...args)}},{key:"componentDidMount",value:function(){const _this$props3=this.props,defaultValue=_this$props3.defaultValue,value=_this$props3.value,availableValues=_this$props3.availableValues,dataType=_this$props3.dataType,isDesignMode=_this$props3.isDesignMode;let newValue=null;this.validationImplementation.componentDidMount(),isDesignMode?newValue=defaultValue:void 0!==defaultValue&&null==value?defaultValue===FieldComponent.firstAvailable?availableValues&&(newValue=getConvertedAvailableValue(availableValues[0],dataType)):defaultValue===FieldComponent.lastAvailable?availableValues&&(newValue=getConvertedAvailableValue(availableValues[availableValues.length-1],dataType)):defaultValue===FieldComponent.onlyAvailable?availableValues&&1===availableValues.length&&(newValue=getConvertedAvailableValue(availableValues[0],dataType)):newValue=defaultValue:this.validate(value),(isDesignMode&&value||null!=newValue)&&this.notifyChange(newValue),publish(JUTRO_TOPICS.COMPONENT_LOADED,FieldComponent.fieldEventFormatter({componentName:this.constructor.name,...this.props}))}},{key:"componentWillUnmount",value:function(...args){return this.validationImplementation.componentWillUnmount(...args)}},{key:"isRequired",value:function(){const _this$props4=this.props,required=_this$props4.required,schemaRequired=_this$props4.schemaRequired;return required||schemaRequired}},{key:"showErrors",value:function(){if(this.focused&&!this.focusPristine)return!1;const showErrors=this.props.showErrors;return!0===showErrors||!this.pristine}},{key:"getValidationConfig",value:function(...args){return this.validationImplementation.getValidationConfig(...args)}},{key:"handleFocus",value:function(evt){const onFocus=this.props.onFocus;this.focused=!0,this.focusPristine=!0,this.validationImplementation.handleFocus(),onFocus&&onFocus(evt,this.beforeValue),this.beforeValue=cloneDeep(this.props.value)}},{key:"getInputFocusHandlers",value:function(){return{onFocus:this.handleFocus,onBlur:this.handleBlur}}},{key:"getValidationMessages",value:function(value=this.getValue()){return this.validationImplementation.getValidationMessages(value)}},{key:"getValue",value:function(value){return null!=value?value:this.props.value}},{key:"isEmpty",value:function(value){return isEmptyValue(value||this.getValue())}},{key:"handleBlur",value:function(evt){const onBlur=this.props.onBlur,validationMessages=this.getValidationMessages(),translator=this.translator;if(this.focused=!1,this.validationImplementation.handleBlur(),this.focusPristine||isEmpty(validationMessages)&&this.pristine||(this.updateTimeout=setTimeout((()=>{this.forceUpdate()}),200)),onBlur){const _this$props5=this.props,label=_this$props5.label,value=_this$props5.value,model=_this$props5.model,path=_this$props5.path,dataPath=_this$props5.dataPath;onBlur(evt,{fieldUniqueId:this.fieldUniqueId,label:translator(label),value:value,beforeValue:this.beforeValue,model:model||path,dataPath:dataPath})}publish(JUTRO_TOPICS.FIELD_BLUR,FieldComponent.fieldEventFormatter({...this.props,beforeValue:this.beforeValue}))}},{key:"validate",value:function(...args){return this.validationImplementation.validate(...args)}},{key:"getRules",value:function(){return this.validationImplementation.getRules()}},{key:"getValidationMessageStyle",value:function(messageList){return messageList?Array.isArray(messageList)&&messageList.length?messageList.every((entry=>"warning"===(null==entry?void 0:entry.type)))?"warning":"invalid":"warning"===(null==messageList?void 0:messageList.type)?"warning":"invalid":"invalid"}},{key:"getValidationRules",value:function(...args){return this.validationImplementation.getValidationRules(...args)}},{key:"touch",value:function(){this.pristine=!1,this.focusPristine=!1}},{key:"notifyChange",value:function(value){const translator=this.translator,fieldUniqueId=this.fieldUniqueId,_this$props6=this.props,onValueChange=_this$props6.onValueChange,model=_this$props6.model,path=_this$props6.path,label=_this$props6.label,dataPath=_this$props6.dataPath,nullable=_this$props6.nullable;this.touch(),nullable&&""===value&&(value=void 0),onValueChange&&onValueChange(value,model||path,{fieldUniqueId:fieldUniqueId,label:translator(label),beforeValue:this.beforeValue,dataPath:dataPath}),publish(JUTRO_TOPICS.VALUE_CHANGED,FieldComponent.fieldEventFormatter({...this.props,value:value,beforeValue:this.beforeValue})),this.validationImplementation.notifyChange(value)}},{key:"renderTooltipIcon",value:function(breakpointProps){const fieldUniqueId=this.fieldUniqueId;if(!this.shouldRenderTooltipIcon())return null;const labelPosition=breakpointProps.labelPosition,showInlineLabel=breakpointProps.showInlineLabel,tooltipId=uniqueInnerId(fieldUniqueId,"tooltipId").tooltipId,_this$getTooltipIconP=this.getTooltipIconProps(),_this$getTooltipIconP2=_this$getTooltipIconP.id,id=void 0===_this$getTooltipIconP2?tooltipId:_this$getTooltipIconP2,_this$getTooltipIconP3=_this$getTooltipIconP.placement,tooltipProps={id:id,placement:void 0===_this$getTooltipIconP3?"top":_this$getTooltipIconP3,..._objectWithoutProperties(_this$getTooltipIconP,["id","placement"]),labelPosition:labelPosition,showInlineLabel:showInlineLabel};return React.createElement(TooltipIcon,tooltipProps)}},{key:"getTooltipIconProps",value:function(){const tooltip=this.props.tooltip;return isObject(tooltip)?tooltip:{text:tooltip}}},{key:"shouldRenderTooltipIcon",value:function(){const layout=this.props.layout,_this$getTooltipIconP4=this.getTooltipIconProps(),text=_this$getTooltipIconP4.text,title=_this$getTooltipIconP4.title,renderContent=_this$getTooltipIconP4.renderContent;return!!(text||title||renderContent)&&"plain"!==layout}},{key:"renderLabel",value:function(breakpointProps,className,secondaryClassName){const translator=this.translator,fieldUniqueId=this.fieldUniqueId,label=breakpointProps.label,readOnly=breakpointProps.readOnly,disabled=breakpointProps.disabled,hideLabel=breakpointProps.hideLabel,labelClassName=breakpointProps.labelClassName,showRequired=breakpointProps.showRequired,showOptional=breakpointProps.showOptional,secondaryLabel=breakpointProps.secondaryLabel,secondaryLabelClassName=breakpointProps.secondaryLabelClassName,labelPosition=breakpointProps.labelPosition,showInlineLabel=breakpointProps.showInlineLabel,labelContainerClassName=breakpointProps.labelContainerClassName,labelId=uniqueInnerId(fieldUniqueId,"labelId").labelId,tooltipIcon=("left"!==labelPosition||showInlineLabel)&&this.renderTooltipIcon(breakpointProps),layoutComponent=this.getLayoutComponent(),layoutComponentClassName=null==layoutComponent?void 0:layoutComponent.labelClass,combinedClassName=cx(layoutComponentClassName,labelClassName,className),combinedSecondaryClassName=cx(secondaryLabelClassName,secondaryClassName),labelProps={id:labelId,htmlFor:fieldUniqueId,label:label,required:this.isRequired(),readOnly:readOnly,disabled:disabled,hideLabel:hideLabel,showRequired:showRequired,showOptional:showOptional,translator:translator,className:combinedClassName,secondaryLabel:secondaryLabel,secondaryLabelClassName:combinedSecondaryClassName,labelPosition:labelPosition,showInlineLabel:showInlineLabel,labelContainerClassName:labelContainerClassName};return label&&""!==label?React.createElement(FieldLabel,_extends({},labelProps,{tooltipIcon:tooltipIcon})):null}},{key:"renderControlReadOnly",value:function(breakpointProps){const value=breakpointProps.value,availableValues=breakpointProps.availableValues,className=breakpointProps.className,id=breakpointProps.id;let primaryValue=value,secondaryValue=null;if(availableValues&&null!=value){const translator=this.translator,actualValue=isNilValue(value.code)?value.id:value.code,valueAsString=!isNilValue(actualValue)&&actualValue.toString()||value.toString(),selectedValue=availableValues.find(findAvailableValue(valueAsString));if(selectedValue){primaryValue=translator(selectedValue.name||selectedValue.displayName),secondaryValue=translator(selectedValue.secondaryLabel)}}this.shouldDisplayDefaultROValue(primaryValue)&&(primaryValue=FieldComponent.defaultROEmptyValue,secondaryValue=null);const classes=cx(styles.controlReadOnly,className);return React.createElement("div",{id:id,"data-read-only":!0,className:classes},primaryValue,secondaryValue?React.createElement("span",{className:styles.controlReadOnlySecondary},secondaryValue):"")}},{key:"shouldDisplayDefaultROValue",value:function(value){return!value}},{key:"renderControl",value:function(breakpointProps,options){breakpointProps.inputType,this.fieldUniqueId;return this.renderControlReadOnly(breakpointProps)}},{key:"generateDataPathProperty",value:function(){return{"data-path":this.props.dataPath}}},{key:"generateAccessibilityProperties",value:function(){const translator=this.translator,fieldUniqueId=this.fieldUniqueId,_this$props7=this.props,required=_this$props7.required,schemaRequired=_this$props7.schemaRequired,placeholder=_this$props7.placeholder,label=_this$props7.label,readOnly=_this$props7.readOnly,formattedPlaceholder=translator(placeholder),formattedLabel=translator(label),props={"aria-required":required||schemaRequired,"aria-label":null!=formattedLabel?formattedLabel:formattedPlaceholder,...!this.isValid(this.getValidationMessages())&&{"aria-invalid":!0},placeholder:formattedPlaceholder};if(!readOnly){const messageId=uniqueInnerId(fieldUniqueId,"messageId").messageId;return{...props,"aria-describedby":messageId}}return props}},{key:"getMessages",value:function(...args){return this.validationImplementation.getMessages(...args)}},{key:"renderMessages",value:function(...args){return this.validationImplementation.renderMessages(...args)}},{key:"renderValidationIcon",value:function(showValidationIcon,readOnly,isValid){if(!showValidationIcon||readOnly)return null;const circleClasses=cx("icon-stack-2x",isValid?styles.validStateIcon:styles.invalidStateIcon),markIcon=isValid?"check_circle_outline":"report",icon=React.createElement("div",{className:cx("icon-stack")},React.createElement(Icon,{icon:markIcon,className:circleClasses})),isDirty=!this.pristine&&!this.focused;return!isValid||isDirty?React.createElement("span",{className:styles.validationIcon},icon):null}},{key:"isValid",value:function(...args){return this.validationImplementation.isValid(...args)}},{key:"translator",get:function(){return this.context}},{key:"render",value:function(){return React.createElement(ContextConsumer,{contexts:[BreakpointTrackerContext]},this.renderFieldComponent)}}]),FieldComponent}();_defineProperty(FieldComponent,"metadataType",metadataTypes.FIELD),_defineProperty(FieldComponent,"propTypes",{id:PropTypes.string.isRequired,label:intlMessageShape,secondaryLabel:intlMessageShape,tooltip:PropTypes.oneOfType([PropTypes.string,nestedTooltipShape]),placeholder:intlMessageShape,required:PropTypes.oneOfType([PropTypes.bool,PropTypes.array]),schemaRequired:PropTypes.bool,readOnly:PropTypes.bool,disabled:PropTypes.bool,nullable:PropTypes.bool,visible:PropTypes.bool,value:PropTypes.any,defaultValue:PropTypes.any,autoTrim:PropTypes.bool,onValueChange:PropTypes.func,onValidationChange:PropTypes.func,onBlur:PropTypes.func,onFocus:PropTypes.func,model:PropTypes.object,path:PropTypes.string,showErrors:PropTypes.bool,showRequired:PropTypes.bool,showOptional:PropTypes.bool,validationMessages:PropTypes.arrayOf(intlMessageShape),layout:PropTypes.string,hideLabel:PropTypes.bool,className:PropTypes.string,contentContainerClassName:PropTypes.string,controlClassName:PropTypes.string,labelClassName:PropTypes.string,secondaryLabelClassName:PropTypes.string,labelContainerClassName:PropTypes.string,showValidationIcon:PropTypes.bool,dataPath:PropTypes.string,validator:PropTypes.shape({pattern:PropTypes.string.isRequired,message:intlMessageShape.isRequired}),requiredFieldValidationMessage:PropTypes.string,successMessage:PropTypes.string,messageProps:PropTypes.shape({requiredField:intlMessageShape}),labelPosition:PropTypes.oneOf(["top","left"]),phone:PropTypes.object,phoneWide:PropTypes.object,tablet:PropTypes.object,inputType:PropTypes.string,testId:PropTypes.string,registerValidation:PropTypes.func,enableMultipleValidation:PropTypes.bool}),_defineProperty(FieldComponent,"defaultProps",{autoTrim:!1,required:!1,schemaRequired:!1,readOnly:!1,disabled:!1,showErrors:!1,hideLabel:!1,showValidationIcon:!1,dataPath:"",labelPosition:"top",dataType:DATA_TYPE_STRING}),_defineProperty(FieldComponent,"contextType",TranslatorContext),_defineProperty(FieldComponent,"defaultROEmptyValue","-"),_defineProperty(FieldComponent,"firstAvailable","__FIRST_AVAILABLE__"),_defineProperty(FieldComponent,"lastAvailable","__LAST_AVAILABLE__"),_defineProperty(FieldComponent,"onlyAvailable","__ONLY_AVAILABLE__"),_defineProperty(FieldComponent,"fieldEventFormatter",(props=>omitBy(props,(val=>isFunction(val)||isUndefined(val)))));const tryToCastToBoolean=value=>"true"===value||"false"!==value&&value,getConvertedAvailableValue=(availableValue,dataType)=>dataType===DATA_TYPE_OBJECT?availableValue:availableValue.code,findAvailableValue=targetValue=>option=>isNilValue(option.code)?option.id.toString()===targetValue:option.code.toString()===targetValue;FieldComponent.__docgenInfo={description:"Base class for field components. A field component renders label, control and messages. Other fields should extend\nthis class. Override any methods as needed: `renderLabel()`, `renderControl()`, `renderMessages()`. By default,\nthis class will render an <input> control.\n\n@template P\n@extends PureComponent<PropTypes.InferProps<FieldComponent.propTypes> & P>\n\n@metadataType field",methods:[{name:"fieldEventFormatter",docblock:"Removes props which are functions or undefined\n\n@param {object} props - component props\n@returns {object}",modifiers:["static"],params:[{name:"props",description:"component props",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"object"}},description:"Removes props which are functions or undefined"},{name:"isRequired",docblock:"Determines requiredness of the field.\n\n@returns {boolean} true if field is required",modifiers:[],params:[],returns:{description:"true if field is required",type:{name:"boolean"}},description:"Determines requiredness of the field."},{name:"showErrors",docblock:"Determines whether errors should be displayed. Errors are displayed as highlight of control and as separate\nmessage block.\n\n@returns {boolean} true if errors should be shown; false if errors should be hidden",modifiers:[],params:[],returns:{description:"true if errors should be shown; false if errors should be hidden",type:{name:"boolean"}},description:"Determines whether errors should be displayed. Errors are displayed as highlight of control and as separate\nmessage block."},{name:"getDataTypeAwareSelectedValue",docblock:"Get the code of the currently selected availableValue.\nIf using dataType=DATA_TYPE_OBJECT, return the `code` from the value.\nOtherwise return the value itself\n\n@returns {any} - The selected value",modifiers:[],params:[],returns:{description:"The selected value",type:{name:"any"}},description:"Get the code of the currently selected availableValue.\nIf using dataType=DATA_TYPE_OBJECT, return the `code` from the value.\nOtherwise return the value itself"},{name:"getValidationConfig",docblock:null,modifiers:[],params:[{name:"...args",type:null}],returns:null},{name:"handleAvailableValuesValueChange",docblock:"Change handler to be shared by components using availableValues\n\n@param {any} targetValue - The new value to set",modifiers:[],params:[{name:"targetValue",description:"The new value to set",type:{name:"any"},optional:!1}],returns:null,description:"Change handler to be shared by components using availableValues"},{name:"handleChange",docblock:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden.\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden."},{name:"handleFocus",docblock:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method"},{name:"getInputFocusHandlers",docblock:"Get focus/blur handlers for use in derived input fields. This optimizes the validation behavior when the\ninput field is in focus.\n\n@returns {object} focus and blur handlers to be added to `<input>` fields",modifiers:[],params:[],returns:{description:"focus and blur handlers to be added to `<input>` fields",type:{name:"object"}},description:"Get focus/blur handlers for use in derived input fields. This optimizes the validation behavior when the\ninput field is in focus."},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added\n\n@param {*} value current value of input\n@returns {Array} validation messages",modifiers:[],params:[{name:"value",description:"current value of input",type:{name:"mixed"},optional:!1}],returns:{description:"validation messages",type:{name:"Array"}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added"},{name:"getValue",docblock:"Get current value\n\n@param {*} [value]\n@returns *",modifiers:[],params:[{name:"value"}],returns:null,description:"Get current value"},{name:"isEmpty",docblock:"Tests if component is empty\n\n@param {*} value value to check\n@returns {boolean}",modifiers:[],params:[{name:"value",description:"value to check",type:{name:"mixed"},optional:!1}],returns:{description:null,type:{name:"boolean"}},description:"Tests if component is empty"},{name:"handleBlur",docblock:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method"},{name:"validate",docblock:"validate the selected value for 'input' elements.\nThis method will triggered validation if value is changed for required field.\n\n@param {any} value  - selected value to validate\n@param {boolean} [noNotification=false]  - optional flag for skipping the validation change notification",modifiers:[],params:[{name:"...args"}],returns:null,description:"validate the selected value for 'input' elements.\nThis method will triggered validation if value is changed for required field."},{name:"getRules",docblock:"get the validation rules for the field component",modifiers:[],params:[],returns:null,description:"get the validation rules for the field component"},{name:"getValidationMessageStyle",docblock:"get the style class for validation messages",modifiers:[],params:[{name:"messageList"}],returns:null,description:"get the style class for validation messages"},{name:"getValidationRules",docblock:"get the validation rules config for field component",modifiers:[],params:[{name:"...args"}],returns:null,description:"get the validation rules config for field component"},{name:"touch",docblock:"Mark as not pristine anymore",modifiers:[],params:[],returns:null,description:"Mark as not pristine anymore"},{name:"notifyChange",docblock:"Helper method to invoke callback when value is changed; useful in derived classes\n\n@param {any} value - new value of control to send with notification",modifiers:[],params:[{name:"value",description:"new value of control to send with notification",type:{name:"any"},optional:!1}],returns:null,description:"Helper method to invoke callback when value is changed; useful in derived classes"},{name:"renderTooltipIcon",docblock:null,modifiers:[],params:[{name:"breakpointProps",type:null}],returns:null},{name:"getTooltipIconProps",docblock:null,modifiers:[],params:[],returns:null},{name:"shouldRenderTooltipIcon",docblock:"Determines whether tooltip icon should be rendered\n\n@param {string|object} [tooltip] - tooltip icon component\n@param {string} [layout] - tooltip icon component\n@returns {boolean} true/false value indicating whether tooltip icon should be rendered",modifiers:[],params:[],returns:null,description:"Determines whether tooltip icon should be rendered"},{name:"renderLabel",docblock:"Render label for this component. Apply 'required' styling as appropriate.\n\n@param {object} breakpointProps - object with props according to the breakpoint\n@param {string} [className] - custom class applied to the label\n@param {string} [secondaryClassName] - custom class applied to the secondary label\n@returns {React.ReactElement} JSX for the label",modifiers:[],params:[{name:"breakpointProps",description:"object with props according to the breakpoint",type:{name:"object"},optional:!1},{name:"className"},{name:"secondaryClassName"}],returns:null,description:"Render label for this component. Apply 'required' styling as appropriate."},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"shouldDisplayDefaultROValue",docblock:"Should display default readOnly char?\n\n@param {string} value\n\n@returns {boolean} true if value is empty",modifiers:[],params:[{name:"value",description:null,type:{name:"string"},optional:!1}],returns:{description:"true if value is empty",type:{name:"boolean"}},description:"Should display default readOnly char?"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - additional options\n\n@returns {React.ReactNode} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"additional options",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactNode"}},description:"Render control for this component."},{name:"generateDataPathProperty",docblock:"generates the data-path attribute\n\n@returns {object} the data-path attribute when dataPath is provided via props",modifiers:[],params:[],returns:{description:"the data-path attribute when dataPath is provided via props",type:{name:"object"}},description:"generates the data-path attribute"},{name:"generateAccessibilityProperties",docblock:"generates accessibility properties for the field component\n\n@returns {object} set of applicable wai-aria tags",modifiers:[],params:[],returns:{description:"set of applicable wai-aria tags",type:{name:"object"}},description:"generates accessibility properties for the field component"},{name:"getMessages",docblock:null,modifiers:[],params:[{name:"...args",type:null}],returns:null},{name:"renderMessages",docblock:"Render messages for this component. Messages are expected to be translated before passing in.\n\n@param {Array<any>} validationMessages - error messages to render\n@param {string} successMessage - info message to render\n@param {boolean} isValid - indicates whether the component is valid or not\n@returns {React.ReactElement}   JSX for the messages",modifiers:[],params:[{name:"...args"}],returns:{description:"JSX for the messages",type:{name:"React.ReactElement"}},description:"Render messages for this component. Messages are expected to be translated before passing in."},{name:"renderValidationIcon",docblock:null,modifiers:[],params:[{name:"showValidationIcon",type:null},{name:"readOnly",type:null},{name:"isValid",type:null}],returns:null},{name:"isValid",docblock:null,modifiers:[],params:[{name:"...args",type:null}],returns:null},{name:"translator",docblock:"Return translator from context or default translator if\nthe former is undefined\n\n@returns {Function}",modifiers:["get"],params:[],returns:{description:null,type:{name:"Function"}},description:"Return translator from context or default translator if\nthe former is undefined"},{name:"renderFieldComponent",docblock:null,modifiers:[],params:[{name:"breakpoint",type:null}],returns:null},{name:"getLayoutComponent",docblock:null,modifiers:[],params:[],returns:null}],displayName:"FieldComponent",props:{autoTrim:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true, will automatically trim string values on change"},required:{defaultValue:{value:"false",computed:!1},type:{name:"union",value:[{name:"bool"},{name:"array"}]},required:!1,description:'If true, this field is required. If being used with @jutro/validation this prop can also be used to set the custom message overwrite\nThis can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, "a custom message"]'},schemaRequired:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true, this field is required by schema"},readOnly:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true, this field is readonly"},disabled:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If true, this field is disabled"},showErrors:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Show errors for this field, works only when field is pristine"},hideLabel:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Hides the label on any layout"},showValidationIcon:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Used to display or not the validation icon"},dataPath:{defaultValue:{value:"''",computed:!1},type:{name:"string"},required:!1,description:"The full path of view model"},labelPosition:{defaultValue:{value:"'top'",computed:!1},type:{name:"enum",value:[{value:"'top'",computed:!1},{value:"'left'",computed:!1}]},required:!1,description:"Allows to select label position"},dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},required:!1},id:{type:{name:"string"},required:!0,description:"Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label"},label:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Label text to display; if not provided, uses '[id]' for development"},secondaryLabel:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Secondary label text to display; if not provided, uses '[id]' for development"},tooltip:{type:{name:"union",value:[{name:"string"},{name:"custom",raw:"nestedTooltipShape"}]},required:!1,description:"Tooltip text to display or tooltip object to pass to TooltipIcon"},placeholder:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Placeholder to display on empty component"},nullable:{type:{name:"bool"},required:!1,description:"If true, this field returns undefined when the user deletes the data/selection on the input"},visible:{type:{name:"bool"},required:!1,description:"If true, this field is visible"},value:{type:{name:"any"},required:!1,description:"Value to display in control"},defaultValue:{type:{name:"any"},required:!1,description:"Set the default field value on render if there is a default value; needs onValueChange to work"},onValueChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and (model or path) for this component"},onValidationChange:{type:{name:"func"},required:!1,description:"Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component"},onBlur:{type:{name:"func"},required:!1,description:"Callback when blur event is fired"},onFocus:{type:{name:"func"},required:!1,description:"Callback when focus event is fired"},model:{type:{name:"object"},required:!1,description:"Passed as second argument to onValueChange"},path:{type:{name:"string"},required:!1,description:"Passed as second argument to onValueChange if model is not present"},showRequired:{type:{name:"bool"},required:!1,description:"Show required indicator"},showOptional:{type:{name:"bool"},required:!1,description:"Show optional indicator"},validationMessages:{type:{name:"arrayOf",value:{name:"custom",raw:"intlMessageShape"}},required:!1,description:"Validation messages to show for this field; only rendered if 'showErrors' is true"},layout:{type:{name:"string"},required:!1,description:"Layout to use with this field; default is more control and less label; other option is 'reversed'"},className:{type:{name:"string"},required:!1,description:"Additional style to apply to the component"},contentContainerClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the content container of the component"},controlClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the control of the component"},labelClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the label of the component"},secondaryLabelClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the secondary label of the component"},labelContainerClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the label container of the component"},validator:{type:{name:"shape",value:{pattern:{name:"string",required:!0},message:{name:"custom",raw:"intlMessageShape.isRequired",required:!0}}},required:!1,description:"An object which should contain a regex pattern as string and a validation message as string"},requiredFieldValidationMessage:{type:{name:"string"},required:!1,description:"Used to override the default required field message"},successMessage:{type:{name:"string"},required:!1,description:"Success message to apply to component if it is valid"},messageProps:{type:{name:"shape",value:{requiredField:{name:"custom",raw:"intlMessageShape",description:"Required message",required:!1}}},required:!1,description:"Message props(error message/aria-label)"},phone:{type:{name:"object"},required:!1,description:"Include any FieldComponent property to use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint"},inputType:{type:{name:"string"},required:!1,description:"Type attribute specifies the type of <input> element to display."},testId:{type:{name:"string"},required:!1,description:"Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id."},registerValidation:{type:{name:"func"},required:!1,description:"Optional callback used by @jutro/validation package to register field validation to use validation hook."},enableMultipleValidation:{type:{name:"bool"},required:!1,description:"Used by @jutro/validation package: Displays multiple field validation messages all at once."}}},FieldComponent.__docgenInfo={componentName:"FieldComponent",packageName:"@jutro/components",description:"Base class for field components. A field component renders label, control and messages. Other fields should extend\nthis class. Override any methods as needed: `renderLabel()`, `renderControl()`, `renderMessages()`. By default,\nthis class will render an <input> control.",displayName:"FieldComponent",methods:[{name:"fieldEventFormatter",docblock:"Removes props which are functions or undefined\n\n@param {object} props - component props\n@returns {object}",modifiers:["static"],params:[{name:"props",description:"component props",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"object"}},description:"Removes props which are functions or undefined"},{name:"isRequired",docblock:"Determines requiredness of the field.\n\n@returns {boolean} true if field is required",modifiers:[],params:[],returns:{description:"true if field is required",type:{name:"boolean"}},description:"Determines requiredness of the field."},{name:"showErrors",docblock:"Determines whether errors should be displayed. Errors are displayed as highlight of control and as separate\nmessage block.\n\n@returns {boolean} true if errors should be shown; false if errors should be hidden",modifiers:[],params:[],returns:{description:"true if errors should be shown; false if errors should be hidden",type:{name:"boolean"}},description:"Determines whether errors should be displayed. Errors are displayed as highlight of control and as separate\nmessage block."},{name:"getDataTypeAwareSelectedValue",docblock:"Get the code of the currently selected availableValue.\nIf using dataType=DATA_TYPE_OBJECT, return the `code` from the value.\nOtherwise return the value itself\n\n@returns {any} - The selected value",modifiers:[],params:[],returns:{description:"The selected value",type:{name:"any"}},description:"Get the code of the currently selected availableValue.\nIf using dataType=DATA_TYPE_OBJECT, return the `code` from the value.\nOtherwise return the value itself"},{name:"getValidationConfig",docblock:null,modifiers:[],params:[{name:"...args",optional:void 0,type:null}],returns:null},{name:"handleAvailableValuesValueChange",docblock:"Change handler to be shared by components using availableValues\n\n@param {any} targetValue - The new value to set",modifiers:[],params:[{name:"targetValue",description:"The new value to set",type:{name:"any"},optional:!1}],returns:null,description:"Change handler to be shared by components using availableValues"},{name:"handleChange",docblock:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden.\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden."},{name:"handleFocus",docblock:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method"},{name:"getInputFocusHandlers",docblock:"Get focus/blur handlers for use in derived input fields. This optimizes the validation behavior when the\ninput field is in focus.\n\n@returns {object} focus and blur handlers to be added to `<input>` fields",modifiers:[],params:[],returns:{description:"focus and blur handlers to be added to `<input>` fields",type:{name:"object"}},description:"Get focus/blur handlers for use in derived input fields. This optimizes the validation behavior when the\ninput field is in focus."},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added\n\n@param {*} value current value of input\n@returns {Array} validation messages",modifiers:[],params:[{name:"value",description:"current value of input",type:{name:"mixed"},optional:!1}],returns:{description:"validation messages",type:{name:"Array"}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added"},{name:"getValue",docblock:"Get current value\n\n@param {*} [value]\n@returns *",modifiers:[],params:[{name:"value"}],returns:null,description:"Get current value"},{name:"isEmpty",docblock:"Tests if component is empty\n\n@param {*} value value to check\n@returns {boolean}",modifiers:[],params:[{name:"value",description:"value to check",type:{name:"mixed"},optional:!1}],returns:{description:null,type:{name:"boolean"}},description:"Tests if component is empty"},{name:"handleBlur",docblock:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Handle 'focus' events for 'input' elements with validation.\nThis method is not included by default. Derived class will need to include this in their `renderControl()` method"},{name:"validate",docblock:"validate the selected value for 'input' elements.\nThis method will triggered validation if value is changed for required field.\n\n@param {any} value  - selected value to validate\n@param {boolean} [noNotification=false]  - optional flag for skipping the validation change notification",modifiers:[],params:[{name:"...args"}],returns:null,description:"validate the selected value for 'input' elements.\nThis method will triggered validation if value is changed for required field."},{name:"getRules",docblock:"get the validation rules for the field component",modifiers:[],params:[],returns:null,description:"get the validation rules for the field component"},{name:"getValidationMessageStyle",docblock:"get the style class for validation messages",modifiers:[],params:[{name:"messageList"}],returns:null,description:"get the style class for validation messages"},{name:"getValidationRules",docblock:"get the validation rules config for field component",modifiers:[],params:[{name:"...args"}],returns:null,description:"get the validation rules config for field component"},{name:"touch",docblock:"Mark as not pristine anymore",modifiers:[],params:[],returns:null,description:"Mark as not pristine anymore"},{name:"notifyChange",docblock:"Helper method to invoke callback when value is changed; useful in derived classes\n\n@param {any} value - new value of control to send with notification",modifiers:[],params:[{name:"value",description:"new value of control to send with notification",type:{name:"any"},optional:!1}],returns:null,description:"Helper method to invoke callback when value is changed; useful in derived classes"},{name:"renderTooltipIcon",docblock:null,modifiers:[],params:[{name:"breakpointProps",optional:void 0,type:null}],returns:null},{name:"getTooltipIconProps",docblock:null,modifiers:[],params:[],returns:null},{name:"shouldRenderTooltipIcon",docblock:"Determines whether tooltip icon should be rendered\n\n@param {string|object} [tooltip] - tooltip icon component\n@param {string} [layout] - tooltip icon component\n@returns {boolean} true/false value indicating whether tooltip icon should be rendered",modifiers:[],params:[],returns:null,description:"Determines whether tooltip icon should be rendered"},{name:"renderLabel",docblock:"Render label for this component. Apply 'required' styling as appropriate.\n\n@param {object} breakpointProps - object with props according to the breakpoint\n@param {string} [className] - custom class applied to the label\n@param {string} [secondaryClassName] - custom class applied to the secondary label\n@returns {React.ReactElement} JSX for the label",modifiers:[],params:[{name:"breakpointProps",description:"object with props according to the breakpoint",type:{name:"object"},optional:!1},{name:"className"},{name:"secondaryClassName"}],returns:null,description:"Render label for this component. Apply 'required' styling as appropriate."},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"shouldDisplayDefaultROValue",docblock:"Should display default readOnly char?\n\n@param {string} value\n\n@returns {boolean} true if value is empty",modifiers:[],params:[{name:"value",description:null,type:{name:"string"},optional:!1}],returns:{description:"true if value is empty",type:{name:"boolean"}},description:"Should display default readOnly char?"},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - additional options\n\n@returns {React.ReactNode} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"additional options",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactNode"}},description:"Render control for this component."},{name:"generateDataPathProperty",docblock:"generates the data-path attribute\n\n@returns {object} the data-path attribute when dataPath is provided via props",modifiers:[],params:[],returns:{description:"the data-path attribute when dataPath is provided via props",type:{name:"object"}},description:"generates the data-path attribute"},{name:"generateAccessibilityProperties",docblock:"generates accessibility properties for the field component\n\n@returns {object} set of applicable wai-aria tags",modifiers:[],params:[],returns:{description:"set of applicable wai-aria tags",type:{name:"object"}},description:"generates accessibility properties for the field component"},{name:"getMessages",docblock:null,modifiers:[],params:[{name:"...args",optional:void 0,type:null}],returns:null},{name:"renderMessages",docblock:"Render messages for this component. Messages are expected to be translated before passing in.\n\n@param {Array<any>} validationMessages - error messages to render\n@param {string} successMessage - info message to render\n@param {boolean} isValid - indicates whether the component is valid or not\n@returns {React.ReactElement}   JSX for the messages",modifiers:[],params:[{name:"...args"}],returns:{description:"JSX for the messages",type:{name:"React.ReactElement"}},description:"Render messages for this component. Messages are expected to be translated before passing in."},{name:"renderValidationIcon",docblock:null,modifiers:[],params:[{name:"showValidationIcon",optional:void 0,type:null},{name:"readOnly",optional:void 0,type:null},{name:"isValid",optional:void 0,type:null}],returns:null},{name:"isValid",docblock:null,modifiers:[],params:[{name:"...args",optional:void 0,type:null}],returns:null},{name:"translator",docblock:"Return translator from context or default translator if\nthe former is undefined\n\n@returns {Function}",modifiers:["get"],params:[],returns:{description:null,type:{name:"Function"}},description:"Return translator from context or default translator if\nthe former is undefined"},{name:"renderFieldComponent",docblock:null,modifiers:[],params:[{name:"breakpoint",optional:void 0,type:null}],returns:null},{name:"getLayoutComponent",docblock:null,modifiers:[],params:[],returns:null}],actualName:"FieldComponent",metadataType:"field",props:{id:{type:{name:"string"},required:!0,description:"Used to identify the component. fieldUniqueId is generated on id base and applied to control and referenced by label"},label:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Label text to display; if not provided, uses '[id]' for development"},secondaryLabel:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Secondary label text to display; if not provided, uses '[id]' for development"},tooltip:{type:{name:"union",value:[{name:"string"},{name:"custom",raw:"nestedTooltipShape"}]},required:!1,description:"Tooltip text to display or tooltip object to pass to TooltipIcon"},placeholder:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Placeholder to display on empty component"},required:{type:{name:"union",value:[{name:"bool"},{name:"array"}]},required:!1,description:'If true, this field is required. If being used with @jutro/validation this prop can also be used to set the custom message overwrite\nThis can be done by using a tuple with the first value as true and the second value as the custom message. Ex: required: [true, "a custom message"]',defaultValue:{value:"false",computed:!1}},schemaRequired:{type:{name:"bool"},required:!1,description:"If true, this field is required by schema",defaultValue:{value:"false",computed:!1}},readOnly:{type:{name:"bool"},required:!1,description:"If true, this field is readonly",defaultValue:{value:"false",computed:!1}},disabled:{type:{name:"bool"},required:!1,description:"If true, this field is disabled",defaultValue:{value:"false",computed:!1}},nullable:{type:{name:"bool"},required:!1,description:"If true, this field returns undefined when the user deletes the data/selection on the input"},visible:{type:{name:"bool"},required:!1,description:"If true, this field is visible"},value:{type:{name:"any"},required:!1,description:"Value to display in control"},defaultValue:{type:{name:"any"},required:!1,description:"Set the default field value on render if there is a default value; needs onValueChange to work"},autoTrim:{type:{name:"bool"},required:!1,description:"If true, will automatically trim string values on change",defaultValue:{value:"false",computed:!1}},onValueChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and (model or path) for this component"},onValidationChange:{type:{name:"func"},required:!1,description:"Callback when validation is changed; receives 'isValid', (model or path) and validation message for this component"},onBlur:{type:{name:"func"},required:!1,description:"Callback when blur event is fired"},onFocus:{type:{name:"func"},required:!1,description:"Callback when focus event is fired"},model:{type:{name:"object"},required:!1,description:"Passed as second argument to onValueChange"},path:{type:{name:"string"},required:!1,description:"Passed as second argument to onValueChange if model is not present"},showErrors:{type:{name:"bool"},required:!1,description:"Show errors for this field, works only when field is pristine",defaultValue:{value:"false",computed:!1}},showRequired:{type:{name:"bool"},required:!1,description:"Show required indicator"},showOptional:{type:{name:"bool"},required:!1,description:"Show optional indicator"},validationMessages:{type:{name:"arrayOf",value:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}},required:!1,description:"Validation messages to show for this field; only rendered if 'showErrors' is true"},layout:{type:{name:"string"},required:!1,description:"Layout to use with this field; default is more control and less label; other option is 'reversed'"},hideLabel:{type:{name:"bool"},required:!1,description:"Hides the label on any layout",defaultValue:{value:"false",computed:!1}},className:{type:{name:"string"},required:!1,description:"Additional style to apply to the component"},contentContainerClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the content container of the component"},controlClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the control of the component"},labelClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the label of the component"},secondaryLabelClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the secondary label of the component"},labelContainerClassName:{type:{name:"string"},required:!1,description:"Additional style to apply to the label container of the component"},showValidationIcon:{type:{name:"bool"},required:!1,description:"Used to display or not the validation icon",defaultValue:{value:"false",computed:!1}},dataPath:{type:{name:"string"},required:!1,description:"The full path of view model",defaultValue:{value:"''",computed:!1}},validator:{type:{name:"shape",value:{pattern:{name:"string",required:!0},message:{name:"union",required:!0,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"An object which should contain a regex pattern as string and a validation message as string"},requiredFieldValidationMessage:{type:{name:"string"},required:!1,description:"Used to override the default required field message"},successMessage:{type:{name:"string"},required:!1,description:"Success message to apply to component if it is valid"},messageProps:{type:{name:"shape",value:{requiredField:{name:"union",description:"Required message",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}}},required:!1,description:"Message props(error message/aria-label)"},labelPosition:{type:{name:"enum",value:[{value:"'top'",computed:!1},{value:"'left'",computed:!1}]},required:!1,description:"Allows to select label position",defaultValue:{value:"'top'",computed:!1}},phone:{type:{name:"object"},required:!1,description:"Include any FieldComponent property to use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any FieldComponent property to use 'phoneWide' and 'phone' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any FieldComponent property to use at 'tablet', 'phoneWide' and 'phone' breakpoint"},inputType:{type:{name:"string"},required:!1,description:"Type attribute specifies the type of <input> element to display."},testId:{type:{name:"string"},required:!1,description:"Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id."},registerValidation:{type:{name:"func"},required:!1,description:"Optional callback used by @jutro/validation package to register field validation to use validation hook."},enableMultipleValidation:{type:{name:"bool"},required:!1,description:"Used by @jutro/validation package: Displays multiple field validation messages all at once."},dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},required:!1}}};