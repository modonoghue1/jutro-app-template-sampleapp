import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import React from"react";import isEmpty from"lodash/isEmpty";import isEqual from"lodash/isEqual";import{log}from"@jutro/logger";import{DATA_TYPE_STRING}from"@jutro/prop-types";import{uniqueInnerId,getMessageProp}from"@jutro/platform";import{OldFieldMessage}from"./OldFieldMessage";import{messages}from"./FieldComponent.messages";export let OldFieldComponentValidationImplementation=function(){function OldFieldComponentValidationImplementation(){_classCallCheck(this,OldFieldComponentValidationImplementation)}return _createClass(OldFieldComponentValidationImplementation,[{key:"bind",value:function(entityToBind){return["componentDidMount","componentDidUpdate","componentWillUnmount","getValidationMessages","getMessages","getRules","isValid","notifyChange","renderMessages","validate","handleFocus","handleBlur"].reduce(((acc,method)=>({...acc,[method]:this[method].bind(entityToBind)})),{})}},{key:"componentDidMount",value:function(){}},{key:"componentDidUpdate",value:function(prevProps){(function(prevProps,newProps,dependencyProps){return[...basicValidationDependencyProps,...dependencyProps].some((propName=>!isEqual(prevProps[propName],newProps[propName])))})(prevProps,this.props,this.validationDependencyProps||[])&&this.validate(this.props.value)}},{key:"componentWillUnmount",value:function(){this.updateTimeout&&clearTimeout(this.updateTimeout)}},{key:"getRules",value:function(){}},{key:"getValidationMessages",value:function(value=this.props.value){const _this$props=this.props,validationMessages=_this$props.validationMessages,requiredFieldValidationMessage=_this$props.requiredFieldValidationMessage,validator=_this$props.validator,messageProps=_this$props.messageProps,dataType=_this$props.dataType,readOnly=_this$props.readOnly,requiredField=getMessageProp("requiredField",messageProps,messages);if(this.isRequired()&&this.isEmpty(value)&&isEmpty(validationMessages)&&!readOnly){const translator=this.translator;return[requiredFieldValidationMessage||translator(requiredField)]}const translator=this.translator;if(validator&&!this.isEmpty()&&dataType===DATA_TYPE_STRING){var _value$match;const pattern=validator.pattern,message=validator.message;if(pattern&&message&&(null===(_value$match=value.match)||void 0===_value$match||!_value$match.call(value,pattern)))return[translator(message)]}return null==validationMessages?void 0:validationMessages.map((msg=>translator(msg)))}},{key:"validate",value:function(value,noNotification=!1){const _this$props2=this.props,onValidationChange=_this$props2.onValidationChange,model=_this$props2.model,path=_this$props2.path,readOnly=_this$props2.readOnly;if(!onValidationChange||readOnly)return;const currentValidationMessages=this.getValidationMessages(value)||[],prevValidationMessages=this.prevValidationMessages||[];this.prevValidationMessages=currentValidationMessages,this.valid=isEmpty(currentValidationMessages);return isEqual(currentValidationMessages,prevValidationMessages)||noNotification||onValidationChange(this.valid,model||path,currentValidationMessages),this.valid}},{key:"getMessages",value:function(validationMessages,successMessage,isValid){return isValid?successMessage?{successMessage:successMessage}:{}:(validationMessages=validationMessages.filter((msg=>!!msg||(log.error("This component is set to show errors, but the validation error message is undefined."),!1))),{errorMessage:()=>validationMessages.map((msg=>React.createElement("div",{key:msg},msg)))})}},{key:"notifyChange",value:function(value){this.validate(value)}},{key:"handleFocus",value:function(){}},{key:"handleBlur",value:function(){}},{key:"renderMessages",value:function(validationMessages,successMessage,isValid){const translator=this.translator,fieldUniqueId=this.fieldUniqueId,readOnly=this.props.readOnly,messageId=uniqueInnerId(fieldUniqueId,"messageId").messageId,messagesList=this.getMessages(validationMessages,successMessage,isValid),messageProps={translator:translator};if(!readOnly)return React.createElement(OldFieldMessage,_extends({id:messageId},messagesList,messageProps))}},{key:"isValid",value:function(validationMessages){return!this.showErrors()||isEmpty(validationMessages)}}]),OldFieldComponentValidationImplementation}();const basicValidationDependencyProps=["value","validationMessages"];