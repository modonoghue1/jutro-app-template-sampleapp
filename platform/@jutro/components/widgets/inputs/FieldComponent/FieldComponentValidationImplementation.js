import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import React from"react";import isEmpty from"lodash/isEmpty";import isEqual from"lodash/isEqual";import get from"lodash/get";import isObject from"lodash/isObject";import{uniqueInnerId}from"@jutro/platform";import{FieldMessage}from"./FieldMessage";export let FieldComponentValidationImplementation=function(){function FieldComponentValidationImplementation(){_classCallCheck(this,FieldComponentValidationImplementation)}return _createClass(FieldComponentValidationImplementation,[{key:"bind",value:function(entityToBind){return["componentDidMount","componentDidUpdate","componentWillUnmount","getValidationMessages","getMessages","isValid","notifyChange","renderMessages","validate","getValidationConfig","getRules","handleFocus","handleBlur"].reduce(((acc,method)=>({...acc,[method]:this[method].bind(entityToBind)})),{})}},{key:"componentDidMount",value:function(){const _this$props=this.props,path=_this$props.path,registerValidation=_this$props.registerValidation;if(registerValidation){if(this.getValidationConfig){const _this$getRules=this.getRules();return registerValidation(path,_this$getRules.validationRules,_this$getRules.options,_this$getRules.onIsValid)}return registerValidation(path,{required:this.props.required})}}},{key:"getValidationConfig",value:function(rulesConfig){return{propsList:["required",...get(rulesConfig,"propsList",[])],options:get(rulesConfig,"options",{})}}},{key:"componentDidUpdate",value:function(prevProps){if(function(prevProps,newProps,configList){return configList.some((propName=>!isEqual(prevProps[propName],newProps[propName])))}(prevProps,this.props,this.getValidationConfig().propsList)){const _this$props2=this.props,path=_this$props2.path,registerValidation=_this$props2.registerValidation;if(registerValidation){const _this$getRules2=this.getRules();return registerValidation(path,_this$getRules2.validationRules,_this$getRules2.options)}}}},{key:"componentWillUnmount",value:function(){this.updateTimeout&&clearTimeout(this.updateTimeout);const _this$props3=this.props,registerValidation=_this$props3.registerValidation,path=_this$props3.path;"function"==typeof registerValidation&&registerValidation(path,{})}},{key:"getValidationMessages",value:function(){return this.props.errorMessage}},{key:"validate",value:function(){}},{key:"notifyChange",value:function(){}},{key:"getMessages",value:function(){}},{key:"handleFocus",value:function(){const validationMessages=this.getValidationMessages();isObject(validationMessages)&&this.setState({isFocused:!0})}},{key:"handleBlur",value:function(){this.setState({isFocused:!1})}},{key:"renderMessages",value:function(errorMessage,successMessage,isValid){const translator=this.translator,messageId=uniqueInnerId(this.props.id,"messageId").messageId;return React.createElement(FieldMessage,{id:messageId,errorMessage:!isValid&&errorMessage,translator:translator,isFocused:this.state.isFocused})}},{key:"isValid",value:function(validationMessages){return!this.showErrors()||isEmpty(validationMessages)}},{key:"getRules",value:function(){const _this$getValidationCo=this.getValidationConfig(),propsList=_this$getValidationCo.propsList,options=_this$getValidationCo.options,onIsValid=_this$getValidationCo.onIsValid;return{validationRules:propsList.reduce(((acc,key)=>({...acc,[key]:this.props[key]})),{}),options:{...options,enableMultipleValidation:this.props.enableMultipleValidation},onIsValid:onIsValid}}}]),FieldComponentValidationImplementation}();