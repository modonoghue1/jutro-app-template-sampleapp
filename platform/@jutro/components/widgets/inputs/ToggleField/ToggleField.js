import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import cx from"classnames";import{mergeStyles,uniqueInnerId}from"@jutro/platform";import{defaultAvailableValuePropType,dataTypeShape,DATA_TYPE_STRING,availableValueObjectShape}from"@jutro/prop-types";import{FieldComponent}from"../FieldComponent/FieldComponent";import{AnimationGroup}from"../../AnimationGroup/AnimationGroup";import styles from"./ToggleField.module.css";import buttonStyles from"../../button/Button.module.css";import{messages}from"./ToggleField.messages";import{animationDelayDefault}from"../../config/animationMap";import{ToggleButton}from"./ToggleButton";const defaultAvailableValues=[{code:"true",name:messages.yes},{code:"false",name:messages.no}];export let ToggleField=function(_FieldComponent){_inherits(ToggleField,FieldComponent);var _super=_createSuper(ToggleField);function ToggleField(...args){var _this;return _classCallCheck(this,ToggleField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"handleButtonClick",(evt=>{evt.preventDefault();const targetValue=evt.target.dataset.value;_this.handleAvailableValuesValueChange(targetValue)})),_this}return _createClass(ToggleField,[{key:"render",value:function(){return _get(_getPrototypeOf(ToggleField.prototype),"render",this).call(this)}},{key:"renderButton",value:function(option,styleClasses,activeStyle,activeKeypress,uniqueId){var _option$name;const selectedValue=this.getDataTypeAwareSelectedValue();return React.createElement(ToggleButton,_extends({key:(null==option?void 0:option.id)||(null==option||null===(_option$name=option.name)||void 0===_option$name?void 0:_option$name.id)||(null==option?void 0:option.name)||(null==option?void 0:option.code),uniqueId:uniqueId,active:activeStyle,activeKeypress:activeKeypress,option:option,styleClasses:styleClasses,handleButtonClick:this.handleButtonClick},this.props,{value:selectedValue}))}},{key:"generateAccessibilityProperties",value:function(){const accessibilityProperties=_get(_getPrototypeOf(ToggleField.prototype),"generateAccessibilityProperties",this).call(this),required=accessibilityProperties["aria-required"];return accessibilityProperties.required=required,delete accessibilityProperties["aria-required"],accessibilityProperties}},{key:"renderControl",value:function(breakpointProps){const availableValues=breakpointProps.availableValues,label=breakpointProps.label,controlClassName=breakpointProps.controlClassName,required=breakpointProps.required,disabled=breakpointProps.disabled,children=breakpointProps.children,animation=breakpointProps.animation,detailElement=breakpointProps.detailElement,fieldUniqueId=this.fieldUniqueId,uniqueId=uniqueInnerId(fieldUniqueId,"uniqueId").uniqueId,value=this.getDataTypeAwareSelectedValue(),detailVisible=value&&"true"===value.toString()&&(detailElement||children),translator=this.translator,values=availableValues,buttons=[],optionCount=null==values?void 0:values.length,combinedStyles=mergeStyles(buttonStyles,styles);values.forEach(((option,index)=>{const isFirstElement=0===index,isLastElement=index===optionCount-1,isNotFirstOrLast=!isFirstElement&&!isLastElement,buttonClasses=cx(combinedStyles.button,combinedStyles.primary,combinedStyles.toggleButton,{disabled:disabled,[combinedStyles.left]:isFirstElement,[combinedStyles.right]:isLastElement,[combinedStyles.middle]:isNotFirstOrLast}),button=this.renderButton(option,buttonClasses,styles.active,styles.activeKeypress,uniqueId,value);buttons.push(button)}));const outerClasses=cx(styles.toggle,controlClassName),groupLabel=required?`${translator(label)}, ${translator(messages.required)}`:translator(label),control=React.createElement("div",_extends({className:outerClasses,role:"group"},this.generateAccessibilityProperties(),{"aria-label":groupLabel}),React.createElement("div",{id:uniqueId,className:styles.content},buttons)),otherContent=React.createElement("div",{role:"region","aria-live":"assertive","aria-hidden":!detailVisible},detailVisible&&React.createElement(AnimationGroup,{animation:animation||"insert",appear:!0,timeout:{appear:animationDelayDefault}},detailElement||children));return React.createElement(React.Fragment,null,control,otherContent)}}]),ToggleField}();_defineProperty(ToggleField,"propTypes",{...FieldComponent.propTypes,value:defaultAvailableValuePropType,defaultValue:defaultAvailableValuePropType,dataType:dataTypeShape,availableValues:PropTypes.arrayOf(availableValueObjectShape),detailElement:PropTypes.node,animation:PropTypes.string,children:PropTypes.node}),_defineProperty(ToggleField,"defaultProps",{...FieldComponent.defaultProps,availableValues:defaultAvailableValues,dataType:DATA_TYPE_STRING}),_defineProperty(ToggleField,"contextType",FieldComponent.contextType),ToggleField.__docgenInfo={description:"Renders buttons that allow you to toggle between the available values.\n@typedef {typeof ToggleField.propTypes} ToggleFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<ToggleFieldPropTypes>>\n\n@metadataType field",methods:[{name:"handleButtonClick",docblock:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback"},{name:"renderButton",docblock:"Creates a button element\n\n@param {object} option - object that contains the value for the button\n@param {object} styleClasses - class name object of button styles\n@param {object} activeStyle - class name object of button active styles\n@returns {Element} - a button element",modifiers:[],params:[{name:"option",description:"object that contains the value for the button",type:{name:"object"},optional:!1},{name:"styleClasses",description:"class name object of button styles",type:{name:"object"},optional:!1},{name:"activeStyle",description:"class name object of button active styles",type:{name:"object"},optional:!1},{name:"activeKeypress"},{name:"uniqueId"}],returns:{description:"a button element",type:{name:"Element"}},description:"Creates a button element"},{name:"generateAccessibilityProperties",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],displayName:"ToggleField",props:{availableValues:{defaultValue:{value:"[\n    {\n        code: 'true',\n        name: messages.yes,\n    },\n    {\n        code: 'false',\n        name: messages.no,\n    },\n]",computed:!1},type:{name:"arrayOf",value:{name:"custom",raw:"availableValueObjectShape"}},required:!1,description:"Array of choice objects to display; choice objects contains `code` and `name`; if not provided, default 'Yes'/'No' is used"},dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"Format of the value"},value:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"Boolean, object, or string value"},defaultValue:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"Default value"},detailElement:{type:{name:"node"},required:!1,description:'Node to render when the "other" value is selected'},animation:{type:{name:"string"},required:!1,description:"Animation passed to AnimationGroup"},children:{type:{name:"node"},required:!1,description:"Wrapped children to be rendered when the value prop is set to true"}},composes:["../FieldComponent/FieldComponent"]},ToggleField.__docgenInfo={componentName:"ToggleField",packageName:"@jutro/components",description:"Renders buttons that allow you to toggle between the available values.",displayName:"ToggleField",methods:[{name:"handleButtonClick",docblock:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback\n\n@param {object} evt - React event wrapper",modifiers:[],params:[{name:"evt",description:"React event wrapper",type:{name:"object"},optional:!1}],returns:null,description:"Custom change handler for `button` element. Uses `notifyChange` to invoke onValueChange callback"},{name:"renderButton",docblock:"Creates a button element\n\n@param {object} option - object that contains the value for the button\n@param {object} styleClasses - class name object of button styles\n@param {object} activeStyle - class name object of button active styles\n@returns {Element} - a button element",modifiers:[],params:[{name:"option",description:"object that contains the value for the button",type:{name:"object"},optional:!1},{name:"styleClasses",description:"class name object of button styles",type:{name:"object"},optional:!1},{name:"activeStyle",description:"class name object of button active styles",type:{name:"object"},optional:!1},{name:"activeKeypress"},{name:"uniqueId"}],returns:{description:"a button element",type:{name:"Element"}},description:"Creates a button element"},{name:"generateAccessibilityProperties",docblock:null,modifiers:[],params:[],returns:null},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."}],actualName:"ToggleField",metadataType:"field",props:{value:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"Boolean, object, or string value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"Default value"},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"Format of the value",defaultValue:{value:"'string'",computed:!1}},availableValues:{type:{name:"arrayOf",value:{name:"union",value:[{name:"shape",value:{code:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},name:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}},{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},displayName:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}}]}},required:!1,description:"Array of choice objects to display; choice objects contains `code` and `name`; if not provided, default 'Yes'/'No' is used",defaultValue:{value:"[\n    {\n        code: 'true',\n        name: messages.yes,\n    },\n    {\n        code: 'false',\n        name: messages.no,\n    },\n]",computed:!1}},detailElement:{type:{name:"node"},required:!1,description:'Node to render when the "other" value is selected'},animation:{type:{name:"string"},required:!1,description:"Animation passed to AnimationGroup"},children:{type:{name:"node"},required:!1,description:"Wrapped children to be rendered when the value prop is set to true"}},composes:["../FieldComponent/FieldComponent"]};