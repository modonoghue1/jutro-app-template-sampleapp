import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useEffect,useContext}from"react";import PropTypes from"prop-types";import cx from"classnames";import{DATA_TYPE_OBJECT,dateValueShape,dataTypeShapeWithDateTime,intlMessageShape,nestedTooltipShape}from"@jutro/prop-types";import{publish,JUTRO_TOPICS}from"@jutro/events";import{GridLayout,useBreakpoint}from"@jutro/layout";import{LocaleContext}from"@jutro/locale";import{FieldComponent}from"../FieldComponent/FieldComponent";import{DateField}from"../DateField/DateField";import{TimeField}from"../TimeField/TimeField";import{formatValueFromDataType,formatValueToDataType,parseBoundaryDate,getMinTime,getMaxTime,isValidDate,isValidTime}from"./helpers";import styles from"./DateTimeField.module.css";export const DateTimeField=props=>{const breakpointProps=useBreakpoint(props).breakpointProps,phone=props.phone,phoneWide=props.phoneWide,tablet=props.tablet,id=breakpointProps.id,onValueChange=breakpointProps.onValueChange,onValidationChange=breakpointProps.onValidationChange,showErrors=breakpointProps.showErrors,_breakpointProps$data=breakpointProps.dataType,dataType=void 0===_breakpointProps$data?DATA_TYPE_OBJECT:_breakpointProps$data,value=breakpointProps.value,defaultValue=breakpointProps.defaultValue,minDate=breakpointProps.minDate,maxDate=breakpointProps.maxDate,model=breakpointProps.model,path=breakpointProps.path,showTime=breakpointProps.showTime,dataPath=breakpointProps.dataPath,_breakpointProps$pres=breakpointProps.preserveTimeZone,preserveTimeZone=void 0!==_breakpointProps$pres&&_breakpointProps$pres,disabled=breakpointProps.disabled,readOnly=breakpointProps.readOnly,isClearable=breakpointProps.isClearable,className=breakpointProps.className,contentContainerClassName=breakpointProps.contentContainerClassName,controlClassName=breakpointProps.controlClassName,labelContainerClassName=breakpointProps.labelContainerClassName,labelClassName=breakpointProps.labelClassName,secondaryLabelClassName=breakpointProps.secondaryLabelClassName,labelPosition=breakpointProps.labelPosition,isInitiallyOpen=breakpointProps.isInitiallyOpen,timeIntervals=breakpointProps.timeIntervals,timeFormat=breakpointProps.timeFormat,other=_objectWithoutProperties(breakpointProps,["id","onValueChange","onValidationChange","showErrors","dataType","value","defaultValue","minDate","maxDate","model","path","showTime","dataPath","preserveTimeZone","disabled","readOnly","isClearable","className","contentContainerClassName","controlClassName","labelContainerClassName","labelClassName","secondaryLabelClassName","labelPosition","isInitiallyOpen","timeIntervals","timeFormat"]),defaultTimeZone=useContext(LocaleContext).defaultTimeZone,_splitProps=function(props){return Object.entries(props).reduce((({dateProps:dateProps,timeProps:timeProps},[key,value])=>{let newDateProps=dateProps,newTimeProps=timeProps;return key.match(/Time/)?newTimeProps={[key.replace("Time","")]:value,...timeProps}:newDateProps={[key]:value,...dateProps},{dateProps:newDateProps,timeProps:newTimeProps}}),{timeProps:{},dateProps:{}})}(other),dateProps=_splitProps.dateProps,timeProps=_splitProps.timeProps,compositeValue=formatValueFromDataType(value,{includeTime:showTime,timezone:defaultTimeZone,preserveTimeZone:preserveTimeZone});useEffect((()=>{if(!value&&defaultValue){const newValue=formatValueFromDataType(defaultValue,{includeTime:showTime,timezone:defaultTimeZone,preserveTimeZone:preserveTimeZone});handleChange(newValue)}publish(JUTRO_TOPICS.COMPONENT_LOADED,FieldComponent.fieldEventFormatter({componentName:DateTimeField.displayName,...props}))}),[]);const labelOnTop="top"===labelPosition,handleChange=val=>{let newValue={...compositeValue,...val};isClearable&&!val&&(newValue=void 0);const formattedValue=formatValueToDataType(newValue,{dataType:dataType,timezone:defaultTimeZone,includeTime:showTime,preserveTimeZone:preserveTimeZone});onValueChange&&(onValueChange(formattedValue,model||path,{id:id,dataPath:dataPath}),publish(JUTRO_TOPICS.VALUE_CHANGED,FieldComponent.fieldEventFormatter({...props,value:formattedValue})))},gridColumns=labelOnTop&&showTime?[2,1]:[];return React.createElement(GridLayout,{id:id,className:className,columns:gridColumns,hgap:"small",vgap:labelOnTop?"none":void 0,phone:{columns:[],vgap:void 0},style:{gridTemplateRows:"min-content"},defaultGridItem:{className:cx({[styles.fieldContainer]:labelOnTop}),phone:{className:void 0}}},(()=>{let selectedValue;if(isValidDate(compositeValue)){selectedValue={year:compositeValue.year,month:compositeValue.month,day:compositeValue.day}}const dateFieldProps={onValidationChange:onValidationChange,showErrors:showErrors,disabled:disabled,readOnly:readOnly,isClearable:isClearable,controlClassName:controlClassName,labelClassName:labelClassName,secondaryLabelClassName:secondaryLabelClassName,labelPosition:labelPosition,phone:phone,phoneWide:phoneWide,tablet:tablet,isInitiallyOpen:isInitiallyOpen,...dateProps,id:`${id}-dateField`,dataType:DATA_TYPE_OBJECT,value:selectedValue,minDate:parseBoundaryDate(minDate),maxDate:parseBoundaryDate(maxDate),onValueChange:newValue=>{if(!newValue)return void handleChange(void 0);const year=newValue.year,month=newValue.month,day=newValue.day;handleChange({year:year,month:month,day:day})},showTime:!1,contentContainerClassName:cx({[styles.dateField]:labelOnTop},contentContainerClassName),labelContainerClassName:cx({[styles.dateLabel]:labelOnTop},labelContainerClassName)};return React.createElement(DateField,dateFieldProps)})(),showTime&&(()=>{let selectedValue;if(isValidTime(compositeValue)){selectedValue={hour:compositeValue.hour,minute:compositeValue.minute}}const timeFieldProps={onValidationChange:onValidationChange,showErrors:showErrors,disabled:disabled,readOnly:readOnly,isClearable:isClearable,controlClassName:controlClassName,labelClassName:labelClassName,secondaryLabelClassName:secondaryLabelClassName,labelPosition:labelPosition,phone:phone,phoneWide:phoneWide,tablet:tablet,...timeProps,timeIntervals:timeIntervals,timeFormat:timeFormat,isInitiallyOpen:isInitiallyOpen,id:`${id}-timeField`,value:selectedValue,min:getMinTime(minDate,value),max:getMaxTime(maxDate,value),onValueChange:newValue=>{if(!newValue)return void handleChange(void 0);const hour=newValue.hour,minute=newValue.minute;handleChange({hour:hour,minute:minute})},contentContainerClassName:cx({[styles.timeField]:labelOnTop},contentContainerClassName),labelContainerClassName:cx({[styles.timeLabel]:labelOnTop},labelContainerClassName)};return React.createElement(TimeField,timeFieldProps)})())};DateTimeField.displayName="DateTimeField",DateTimeField.propTypes={...TimeField.propTypes,...DateField.propTypes,dataType:dataTypeShapeWithDateTime.isRequired,value:dateValueShape,defaultValue:dateValueShape,showTime:PropTypes.bool,onBlurTime:PropTypes.func,onFocusTime:PropTypes.func,requiredTime:PropTypes.bool,showErrorsTime:PropTypes.bool,showRequiredTime:PropTypes.bool,showOptionalTime:PropTypes.bool,labelTime:intlMessageShape,secondaryLabelTime:intlMessageShape,hideLabelTime:PropTypes.bool,tooltipTime:PropTypes.oneOfType([PropTypes.string,nestedTooltipShape]),placeholderTime:intlMessageShape,preserveTimeZone:PropTypes.bool},DateTimeField.defaultProps={...TimeField.defaultProps,...DateField.defaultProps,dataType:DATA_TYPE_OBJECT,showTime:!0},DateTimeField.__docgenInfo={description:"@metadataType field",methods:[],displayName:"DateTimeField",props:{dataType:{defaultValue:{value:"DATA_TYPE_OBJECT",computed:!0},type:{name:"custom",raw:"dataTypeShapeWithDateTime.isRequired"},required:!1,description:"Returned data type"},showTime:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Show timepicker"},value:{type:{name:"custom",raw:"dateValueShape"},required:!1,description:"Date and time to display"},defaultValue:{type:{name:"custom",raw:"dateValueShape"},required:!1,description:"Set the default field value on render if there is a default value; needs onValueChange to work"},onBlurTime:{type:{name:"func"},required:!1,description:"Callback when blur event is fired in time picker"},onFocusTime:{type:{name:"func"},required:!1,description:"Callback when focus event is fired in time picker"},requiredTime:{type:{name:"bool"},required:!1,description:"If true, time picker is required"},showErrorsTime:{type:{name:"bool"},required:!1,description:"Show errors for time picker"},showRequiredTime:{type:{name:"bool"},required:!1,description:"Show required indicator for time picker"},showOptionalTime:{type:{name:"bool"},required:!1,description:"Show optional indicator for time picker"},labelTime:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Intl message for time picker label"},secondaryLabelTime:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Intl message for time picker label"},hideLabelTime:{type:{name:"bool"},required:!1,description:"Hides the label on any layout for time picker"},tooltipTime:{type:{name:"union",value:[{name:"string"},{name:"custom",raw:"nestedTooltipShape"}]},required:!1,description:"Tooltip for time picker"},placeholderTime:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Intl message for time picker placeholder"},preserveTimeZone:{type:{name:"bool"},required:!1,description:"If true, component will not convert selected date to UTC"}},composes:["../TimeField/TimeField","../DateField/DateField"]},DateTimeField.__docgenInfo={componentName:"DateTimeField",packageName:"@jutro/components",description:"",displayName:"DateTimeField",methods:[],actualName:"DateTimeField",metadataType:"field",props:{dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1},{value:"'date-time'",computed:!1}]},required:!1,description:"Returned data type",defaultValue:{value:"'object'",computed:!1}},value:{type:{name:"union",value:[{name:"number"},{name:"string"},{name:"instanceOf",value:"Date"},{name:"shape",value:{year:{name:"number",required:!0},month:{name:"number",required:!0},day:{name:"number",required:!0},hour:{name:"number",required:!1},minute:{name:"number",required:!1}}}]},required:!1,description:"Date and time to display"},defaultValue:{type:{name:"union",value:[{name:"number"},{name:"string"},{name:"instanceOf",value:"Date"},{name:"shape",value:{year:{name:"number",required:!0},month:{name:"number",required:!0},day:{name:"number",required:!0},hour:{name:"number",required:!1},minute:{name:"number",required:!1}}}]},required:!1,description:"Set the default field value on render if there is a default value; needs onValueChange to work"},showTime:{type:{name:"bool"},required:!1,description:"Show timepicker",defaultValue:{value:"true",computed:!1}},onBlurTime:{type:{name:"func"},required:!1,description:"Callback when blur event is fired in time picker"},onFocusTime:{type:{name:"func"},required:!1,description:"Callback when focus event is fired in time picker"},requiredTime:{type:{name:"bool"},required:!1,description:"If true, time picker is required"},showErrorsTime:{type:{name:"bool"},required:!1,description:"Show errors for time picker"},showRequiredTime:{type:{name:"bool"},required:!1,description:"Show required indicator for time picker"},showOptionalTime:{type:{name:"bool"},required:!1,description:"Show optional indicator for time picker"},labelTime:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Intl message for time picker label"},secondaryLabelTime:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Intl message for time picker label"},hideLabelTime:{type:{name:"bool"},required:!1,description:"Hides the label on any layout for time picker"},tooltipTime:{type:{name:"union",value:[{name:"string"},{name:"custom",raw:"nestedTooltipShape"}]},required:!1,description:"Tooltip for time picker"},placeholderTime:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Intl message for time picker placeholder"},preserveTimeZone:{type:{name:"bool"},required:!1,description:"If true, component will not convert selected date to UTC"}},composes:["../TimeField/TimeField","../DateField/DateField"]};