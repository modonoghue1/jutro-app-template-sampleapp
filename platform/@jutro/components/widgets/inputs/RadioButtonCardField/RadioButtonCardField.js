import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import cx from"classnames";import PropTypes from"prop-types";import React from"react";import{uniqueInnerId}from"@jutro/platform";import{Grid}from"@jutro/layout";import{defaultAvailableValuePropType,dataTypeShape,DATA_TYPE_STRING,intlMessageShape}from"@jutro/prop-types";import{getOptionCode,getOptionName}from"../availableValues";import{FieldComponent}from"../FieldComponent/FieldComponent";import{RadioButtonCard,LAYOUT_PROP_TYPE,PORTRAIT_LAYOUT}from"./RadioButtonCard";import styles from"./RadioButtonCardField.module.css";import{makeHandleRadioButtonKeyDown,getTabIndex}from"../../../radiobuttonUtils";export let RadioButtonCardField=function(_FieldComponent){_inherits(RadioButtonCardField,FieldComponent);var _super=_createSuper(RadioButtonCardField);function RadioButtonCardField(){return _classCallCheck(this,RadioButtonCardField),_super.apply(this,arguments)}return _createClass(RadioButtonCardField,[{key:"render",value:function(){return _get(_getPrototypeOf(RadioButtonCardField.prototype),"render",this).call(this)}},{key:"renderControl",value:function(breakpointProps){const availableValues=breakpointProps.availableValues,disabled=breakpointProps.disabled,label=breakpointProps.label,controlClassName=breakpointProps.controlClassName,required=breakpointProps.required,renderName=breakpointProps.renderName,renderSecondaryLabel=breakpointProps.renderSecondaryLabel,layout=breakpointProps.layout,translator=this.translator,fieldUniqueId=this.fieldUniqueId,selectedValue=this.getDataTypeAwareSelectedValue(),radios=availableValues.map(((option,i)=>{const secondaryLabel=option.secondaryLabel,moneyAmount=option.moneyAmount,iconName=option.iconName,currency=option.currency,iconSrc=option.iconSrc,iconClassName=option.iconClassName,iconContainerClassName=option.iconContainerClassName,optionCode=getOptionCode(option),optionName=getOptionName(option),checked=selectedValue===optionCode,cardId=uniqueInnerId(fieldUniqueId,optionCode)[optionCode];return React.createElement(RadioButtonCard,_extends({iconName:iconName,layout:layout,key:cardId,id:cardId,iconSrc:iconSrc,iconClassName:iconClassName,tabIndex:getTabIndex(i),iconContainerClassName:iconContainerClassName,code:optionCode,name:renderName(optionName,translator),secondaryLabel:renderSecondaryLabel(secondaryLabel,translator),moneyAmount:moneyAmount,currency:currency,disabled:disabled,checked:checked,required:required,onValueSelect:this.handleAvailableValuesValueChange,styles:styles},this.generateAccessibilityProperties(),this.generateDataPathProperty()))})),gridProps="landscape"===layout?{}:{columns:["1fr"],repeat:"3",phone:{repeat:"2"}},classes=cx(styles.radioButtonCard,controlClassName),handleRadioButtonKeyDown=makeHandleRadioButtonKeyDown(((el,value)=>{el.querySelector(`div[data-value=${value}] div[class*=__radioWrapper]`).focus()}));return React.createElement(Grid,_extends({id:fieldUniqueId,className:classes,"aria-label":translator(label),role:"radiogroup",onKeyDown:event=>handleRadioButtonKeyDown(event,this.props,this.handleAvailableValuesValueChange),gap:"large"},gridProps),radios)}},{key:"renderControlReadOnly",value:function(breakpointProps){return this.renderControl(breakpointProps)}}]),RadioButtonCardField}();_defineProperty(RadioButtonCardField,"propTypes",{...FieldComponent.propTypes,value:defaultAvailableValuePropType,defaultValue:defaultAvailableValuePropType,dataType:dataTypeShape,availableValues:PropTypes.arrayOf(PropTypes.shape({iconName:PropTypes.string,iconSrc:PropTypes.string,iconClassName:PropTypes.string,iconContainerClassName:PropTypes.string,id:PropTypes.string.isRequired,displayName:intlMessageShape,secondaryLabel:intlMessageShape.isRequired,moneyAmount:PropTypes.number})),renderName:PropTypes.func,renderSecondaryLabel:PropTypes.func,layout:LAYOUT_PROP_TYPE}),_defineProperty(RadioButtonCardField,"defaultProps",{...FieldComponent.defaultProps,renderName:(name,translator)=>translator(name),renderSecondaryLabel:(secondaryLabel,translator)=>translator(secondaryLabel),dataType:DATA_TYPE_STRING,layout:PORTRAIT_LAYOUT,availableValues:[]}),_defineProperty(RadioButtonCardField,"contextType",FieldComponent.contextType),RadioButtonCardField.__docgenInfo={description:"Renders a list of radio button cards. You specify the options using component props.\n@typedef {typeof RadioButtonCardField.propTypes} RadioButtonCardFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<RadioButtonCardFieldPropTypes>>\n\n@metadataType field",methods:[{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"renderControlReadOnly",docblock:null,modifiers:[],params:[{name:"breakpointProps",type:null}],returns:null}],displayName:"RadioButtonCardField",props:{renderName:{defaultValue:{value:"(name, translator) => translator(name)",computed:!1},type:{name:"func"},required:!1,description:"Custom render method for name prop. Translated property value by default"},renderSecondaryLabel:{defaultValue:{value:"(secondaryLabel, translator) =>\ntranslator(secondaryLabel)",computed:!1},type:{name:"func"},required:!1,description:"Custom render method for secondary label prop. Translated property value by default"},dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"The format of the value"},layout:{defaultValue:{value:"PORTRAIT_LAYOUT",computed:!0},type:{name:"custom",raw:"LAYOUT_PROP_TYPE"},required:!1,description:"Cards layout"},availableValues:{defaultValue:{value:"[]",computed:!1},type:{name:"arrayOf",value:{name:"shape",value:{iconName:{name:"string",required:!1},iconSrc:{name:"string",required:!1},iconClassName:{name:"string",required:!1},iconContainerClassName:{name:"string",required:!1},id:{name:"string",required:!0},displayName:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape.isRequired",required:!0},moneyAmount:{name:"number",required:!1}}}},required:!1,description:"Array of choice objects to display; choice objects contain 'code', 'name' and 'secondaryLabel'"},value:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"The selected value"},defaultValue:{type:{name:"custom",raw:"defaultAvailableValuePropType"},required:!1,description:"The default value to set if none is provided"}},composes:["../FieldComponent/FieldComponent"]},RadioButtonCardField.__docgenInfo={componentName:"RadioButtonCardField",packageName:"@jutro/components",description:"Renders a list of radio button cards. You specify the options using component props.",displayName:"RadioButtonCardField",methods:[{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"renderControlReadOnly",docblock:null,modifiers:[],params:[{name:"breakpointProps",optional:void 0,type:null}],returns:null}],actualName:"RadioButtonCardField",metadataType:"field",props:{value:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"The selected value"},defaultValue:{type:{name:"union",value:[{name:"string"},{name:"bool"},{name:"number"},{name:"custom",raw:"availableValueObjectShape"}]},required:!1,description:"The default value to set if none is provided"},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"The format of the value",defaultValue:{value:"'string'",computed:!1}},availableValues:{type:{name:"arrayOf",value:{name:"shape",value:{iconName:{name:"string",required:!1},iconSrc:{name:"string",required:!1},iconClassName:{name:"string",required:!1},iconContainerClassName:{name:"string",required:!1},id:{name:"string",required:!0},displayName:{name:"union",required:!1,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},secondaryLabel:{name:"union",required:!0,value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},moneyAmount:{name:"number",required:!1}}}},required:!1,description:"Array of choice objects to display; choice objects contain 'code', 'name' and 'secondaryLabel'",defaultValue:{value:"[]",computed:!1}},renderName:{type:{name:"func"},required:!1,description:"Custom render method for name prop. Translated property value by default",defaultValue:{value:"(name, translator) => translator(name)",computed:!1}},renderSecondaryLabel:{type:{name:"func"},required:!1,description:"Custom render method for secondary label prop. Translated property value by default",defaultValue:{value:"(secondaryLabel, translator) =>\ntranslator(secondaryLabel)",computed:!1}},layout:{type:{name:"enum",value:[{value:"'portrait'",computed:!1},{value:"'landscape'",computed:!1}]},required:!1,description:"Cards layout",defaultValue:{value:"'portrait'",computed:!1}}},composes:["../FieldComponent/FieldComponent"]};