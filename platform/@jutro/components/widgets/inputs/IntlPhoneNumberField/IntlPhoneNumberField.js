import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import{DATA_TYPE_STRING,DATA_TYPE_OBJECT}from"@jutro/prop-types";import cx from"classnames";import{getMessageProp}from"@jutro/platform";import{FieldComponent}from"../FieldComponent/FieldComponent";import{InlineLoader}from"../../loading/inlineLoader/InlineLoader";import"intl-tel-input/build/css/intlTelInput.css";import styles from"./IntlPhoneNumberField.module.css";import{IntlPhoneNumberInputLazyLoaded,IntlPhoneNumberReadOnlyLazyLoaded,getDefaultCountry}from"./IntlPhoneNumberHelpers";import{messages}from"./IntlPhoneNumberField.messages";export let IntlPhoneNumberField=function(_FieldComponent){_inherits(IntlPhoneNumberField,FieldComponent);var _super=_createSuper(IntlPhoneNumberField);function IntlPhoneNumberField(...args){var _this;return _classCallCheck(this,IntlPhoneNumberField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"handleChange",(value=>{_this.notifyChange(value)})),_defineProperty(_assertThisInitialized(_this),"state",{isValid:!0,validationErrorCode:void 0}),_defineProperty(_assertThisInitialized(_this),"validateNumber",((validateNumber,validationErrorCode)=>{_this.setState({isValid:validateNumber}),_this.setState({validationErrorCode:validationErrorCode})})),_this}return _createClass(IntlPhoneNumberField,[{key:"render",value:function(){return _get(_getPrototypeOf(IntlPhoneNumberField.prototype),"render",this).call(this)}},{key:"getValidationMessages",value:function(){const _this$state=this.state,isValid=_this$state.isValid,validationErrorCode=_this$state.validationErrorCode,validationMessages=[..._get(_getPrototypeOf(IntlPhoneNumberField.prototype),"getValidationMessages",this).call(this)||[]];return isValid||validationMessages.push(`${this.translator(getMessageProp("validatePhone",messages))} ${this.translator(getMessageProp(`validatePhoneError${validationErrorCode}`,messages))}`),validationMessages}},{key:"renderControl",value:function(breakpointProps,options){const id=breakpointProps.id,disabled=breakpointProps.disabled,controlClassName=breakpointProps.controlClassName,required=breakpointProps.required,dataType=breakpointProps.dataType,value=breakpointProps.value,placeholder=breakpointProps.placeholder,defaultCountry=breakpointProps.defaultCountry,noDropdown=breakpointProps.noDropdown,testId=breakpointProps.testId,inputStyle=cx(styles.phoneNumber,{disabled:disabled,invalid:!options.isValid},controlClassName),divStyle=cx({[styles.dropdownHidden]:noDropdown}),initialCountry=getDefaultCountry(defaultCountry),fieldUniqueId=this.fieldUniqueId;return React.createElement("div",{className:divStyle,"aria-disabled":disabled},React.createElement(IntlPhoneNumberInputLazyLoaded,_extends({fallback:React.createElement(InlineLoader,{id:"InlineLoader",loading:!0,loadingMessage:"Loading..."}),id:fieldUniqueId,testId:testId||id,className:inputStyle,onChange:this.handleChange,defaultCountry:initialCountry,disabled:disabled,required:required},this.generateDataPathProperty(),this.generateAccessibilityProperties(),{dataType:dataType,validateNumber:this.validateNumber,value:value,placeholder:placeholder,noDropdown:noDropdown})))}},{key:"renderControlReadOnly",value:function(breakpointProps){const id=breakpointProps.id,value=breakpointProps.value,showCountryCodeForReadOnly=breakpointProps.showCountryCodeForReadOnly,dataType=breakpointProps.dataType,defaultCountry=breakpointProps.defaultCountry;return React.createElement(IntlPhoneNumberReadOnlyLazyLoaded,{fallback:React.createElement(InlineLoader,{id:"InlineLoader",loading:!0,loadingMessage:"Loading..."}),id:id,value:value,showCountryCodeForReadOnly:showCountryCodeForReadOnly,dataType:dataType,defaultCountry:defaultCountry})}}]),IntlPhoneNumberField}();_defineProperty(IntlPhoneNumberField,"contextType",FieldComponent.contextType);const phoneDataTypeShape=PropTypes.oneOf([DATA_TYPE_STRING,DATA_TYPE_OBJECT]),PhoneShape=PropTypes.shape({countryCode:PropTypes.shape({code:PropTypes.string.isRequired}),phoneNumber:PropTypes.string.isRequired});IntlPhoneNumberField.defaultProps={...FieldComponent.defaultProps,dataType:DATA_TYPE_OBJECT,showCountryCodeForReadOnly:!0,noDropdown:!1},IntlPhoneNumberField.propTypes={...FieldComponent.propTypes,dataType:phoneDataTypeShape,value:PropTypes.oneOfType([PhoneShape,PropTypes.string]),defaultCountry:PropTypes.string,showCountryCodeForReadOnly:PropTypes.bool,noDropdown:PropTypes.bool},IntlPhoneNumberField.displayName="IntlPhoneNumberField",IntlPhoneNumberField.__docgenInfo={description:"IntlPhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render\n for entering and validating international telephone numbers.\n\n@typedef {typeof IntlPhoneNumberField.propTypes} IntlPhoneNumberFieldPropTypes properties for IntlPhoneNumberField component\n@extends FieldComponent<PropTypes.InferProps<IntlPhoneNumberFieldPropTypes>>\n@returns {React.ReactElement}\n\n@metadataType field",methods:[{name:"handleChange",docblock:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden.\n\n@param {object} value - new value",modifiers:[],params:[{name:"value",description:"new value",type:{name:"object"},optional:!1}],returns:null,description:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden."},{name:"validateNumber",docblock:"Validation helper to retrieve validation boolean from intl-tel-input\n\n@param {boolean} validateNumber - validation state",modifiers:[],params:[{name:"validateNumber",description:"validation state",type:{name:"boolean"},optional:!1},{name:"validationErrorCode"}],returns:null,description:"Validation helper to retrieve validation boolean from intl-tel-input"},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added.\nIf field phone number is not correct specific message will be shown.\n\n@returns {Array<any>} validation messages",modifiers:[],params:[],returns:{description:"validation messages",type:{name:"Array",elements:[{name:"any"}]}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added.\nIf field phone number is not correct specific message will be shown."},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - rendering options (like 'isInvalid', 'isValid', etc)\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"rendering options (like 'isInvalid', 'isValid', etc)",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."}],displayName:"IntlPhoneNumberField",props:{dataType:{defaultValue:{value:"DATA_TYPE_OBJECT",computed:!0},type:{name:"custom",raw:"phoneDataTypeShape"},required:!1,description:"Type of returned value in onValeChange callback"},showCountryCodeForReadOnly:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Set country code visibility if rendered in readOnly mode."},noDropdown:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Hide the country dropdown, the country number is always displayed."},value:{type:{name:"union",value:[{name:"custom",raw:"PhoneShape"},{name:"string"}]},required:!1,description:'Phone number value.\nPassed as a string f.eg. "+48600500400" or phone shape f.eg.\n{countryCode: { code: "PL" }, phoneNumber: "600500400"}\ncountryCode has to be iso2 country code lower or upper case.'},defaultCountry:{type:{name:"string"},required:!1,description:"Default country code to be rendered. Must be in iso2 country code string."}},composes:["../FieldComponent/FieldComponent"]},IntlPhoneNumberField.__docgenInfo={componentName:"IntlPhoneNumberField",packageName:"@jutro/components",description:"IntlPhoneNumberField is a 'field' component that displays a label, control and message. It can be used to render\n for entering and validating international telephone numbers.",displayName:"IntlPhoneNumberField",methods:[{name:"handleChange",docblock:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden.\n\n@param {object} value - new value",modifiers:[],params:[{name:"value",description:"new value",type:{name:"object"},optional:!1}],returns:null,description:"Default change handler for `input` element. It will be used unless this method or `renderControl()`\nis overridden."},{name:"validateNumber",docblock:"Validation helper to retrieve validation boolean from intl-tel-input\n\n@param {boolean} validateNumber - validation state",modifiers:[],params:[{name:"validateNumber",description:"validation state",type:{name:"boolean"},optional:!1},{name:"validationErrorCode"}],returns:null,description:"Validation helper to retrieve validation boolean from intl-tel-input"},{name:"getValidationMessages",docblock:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added.\nIf field phone number is not correct specific message will be shown.\n\n@returns {Array<any>} validation messages",modifiers:[],params:[],returns:{description:"validation messages",type:{name:"Array",elements:[{name:"any"}]}},description:"Get the validation messages to display.\nIf field is 'required' and no validation message is provided, it is added.\nIf field phone number is not correct specific message will be shown."},{name:"renderControl",docblock:"Render control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options - rendering options (like 'isInvalid', 'isValid', etc)\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"options",description:"rendering options (like 'isInvalid', 'isValid', etc)",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render control for this component."},{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."}],actualName:"IntlPhoneNumberField",metadataType:"field",props:{dataType:{type:{name:"custom",raw:"phoneDataTypeShape"},required:!1,description:"Type of returned value in onValeChange callback",defaultValue:{value:"'object'",computed:!1}},value:{type:{name:"union",value:[{name:"custom",raw:"PhoneShape"},{name:"string"}]},required:!1,description:'Phone number value.\nPassed as a string f.eg. "+48600500400" or phone shape f.eg.\n{countryCode: { code: "PL" }, phoneNumber: "600500400"}\ncountryCode has to be iso2 country code lower or upper case.'},defaultCountry:{type:{name:"string"},required:!1,description:"Default country code to be rendered. Must be in iso2 country code string."},showCountryCodeForReadOnly:{type:{name:"bool"},required:!1,description:"Set country code visibility if rendered in readOnly mode.",defaultValue:{value:"true",computed:!1}},noDropdown:{type:{name:"bool"},required:!1,description:"Hide the country dropdown, the country number is always displayed.",defaultValue:{value:"false",computed:!1}}},composes:["../FieldComponent/FieldComponent"]};