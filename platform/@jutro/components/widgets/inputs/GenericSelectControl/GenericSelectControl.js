import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useContext,useEffect,useMemo,useCallback,useRef}from"react";import PropTypes from"prop-types";import Creatable from"react-select/creatable";import AsyncCreatable from"react-select/async-creatable";import cx from"classnames";import identity from"lodash/identity";import constant from"lodash/constant";import{TranslatorContext}from"@jutro/locale";import{intlMessageShape}from"@jutro/prop-types";import{GenericSelectControlClearIndicator as ClearIndicator}from"./components/GenericSelectControlClearIndicator";import{GenericSelectControlControl as Control}from"./components/GenericSelectControlControl";import{GenericSelectControlDropdownIndicator as DropdownIndicator}from"./components/GenericSelectControlDropdownIndicator";import{GenericSelectControlInput as Input}from"./components/GenericSelectControlInput";import{GenericSelectControlLoadingIndicator as LoadingIndicator}from"./components/GenericSelectControlLoadingIndicator";import{GenericSelectControlMenu as Menu}from"./components/GenericSelectControlMenu";import{GenericSelectControlMenuList as MenuList}from"./components/GenericSelectControlMenuList";import{GenericSelectControlMultiValue as MultiValue}from"./components/GenericSelectControlMultiValue";import{GenericSelectControlOption as Option}from"./components/GenericSelectControlOption";import{GenericSelectControlPlaceholder as Placeholder}from"./components/GenericSelectControlPlaceholder";import{GenericSelectControlSingleValue as SingleValue}from"./components/GenericSelectControlSingleValue";import{GenericSelectControlValueContainer as ValueContainer}from"./components/GenericSelectControlValueContainer";import styles from"./GenericSelectControl.module.css";import{messages}from"./GenericSelectControl.messages";const defaultComponents={ClearIndicator:ClearIndicator,Control:Control,DropdownIndicator:DropdownIndicator,Input:Input,LoadingIndicator:LoadingIndicator,Menu:Menu,MenuList:MenuList,MultiValue:MultiValue,Option:Option,Placeholder:Placeholder,SingleValue:SingleValue,ValueContainer:ValueContainer};export{defaultComponents as GenericSelectComponents};export const genericSelectInternalClassNamesShape=PropTypes.shape({control:PropTypes.string,controlFocused:PropTypes.string,menuList:PropTypes.string,option:PropTypes.string,selectIcon:PropTypes.string});const genericSelectControlPropTypes={availableValues:PropTypes.arrayOf(PropTypes.any),className:PropTypes.string,components:PropTypes.shape({ClearIndicator:PropTypes.elementType,Control:PropTypes.elementType,DropdownIndicator:PropTypes.elementType,IndicatorSeparator:PropTypes.elementType,Input:PropTypes.elementType,LoadingIndicator:PropTypes.elementType,Menu:PropTypes.elementType,MenuList:PropTypes.elementType,Option:PropTypes.elementType,Placeholder:PropTypes.elementType,Value:PropTypes.elementType,ValueContainer:PropTypes.elementType}),internalClassNames:genericSelectInternalClassNamesShape,createNewMessage:intlMessageShape,defaultValue:PropTypes.any,disabled:PropTypes.bool,filter:PropTypes.func,getOptionLabel:PropTypes.func,getOptionValue:PropTypes.func,id:PropTypes.string,isClearable:PropTypes.bool,allowNewValue:PropTypes.func,labelId:PropTypes.string,loadValues:PropTypes.func,noOptionsMessage:intlMessageShape,onBlur:PropTypes.func,onClick:PropTypes.func,onCreateOption:PropTypes.func,onFocus:PropTypes.func,onInputChange:PropTypes.func,onMenuClose:PropTypes.func,onMenuOpen:PropTypes.func,onKeyDown:PropTypes.func,onValueChange:PropTypes.func,placeholder:intlMessageShape,readOnly:PropTypes.bool,readOnlySeparator:PropTypes.string,required:PropTypes.bool,searchable:PropTypes.bool,multiSelect:PropTypes.bool,stickyIndicator:PropTypes.bool,valid:PropTypes.bool,value:PropTypes.any,usePortal:PropTypes.bool,isInitiallyOpen:PropTypes.bool,controlShouldRenderValue:PropTypes.bool,backspaceRemovesValue:PropTypes.bool,fieldUniqueId:PropTypes.string,testId:PropTypes.string};export const GenericSelectControl=({availableValues:availableValues,className:className,components:components,createNewMessage:createNewMessage,defaultValue:defaultValue,disabled:disabled,filter:filter,getOptionLabel:getOptionLabel,getOptionValue:getOptionValue,id:id,internalClassNames:internalClassNames,isClearable:isClearable,allowNewValue:allowNewValue,labelId:labelId,loadValues:loadValues,noOptionsMessage:noOptionsMessage,onBlur:onBlur,onClick:onClick,onCreateOption:onCreateOption,onFocus:onFocus,onInputChange:onInputChange,onMenuClose:onMenuClose,onMenuOpen:onMenuOpen,onKeyDown:onKeyDown,onValueChange:onValueChange,placeholder:placeholder,readOnly:readOnly,readOnlySeparator:readOnlySeparator,required:required,searchable:searchable,multiSelect:multiSelect,stickyIndicator:stickyIndicator,valid:valid,value:value,usePortal:usePortal,isInitiallyOpen:isInitiallyOpen,fieldUniqueId:fieldUniqueId,testId:testId,...customProps})=>{const translator=useContext(TranslatorContext),selectRef=useRef(null);useEffect((()=>{var _selectRef$current;const inputRef=null===(_selectRef$current=selectRef.current)||void 0===_selectRef$current?void 0:_selectRef$current.select.select.inputRef;!searchable&&inputRef&&(inputRef.setAttribute("data-testid",testId||id),required?(inputRef.setAttribute("required","true"),inputRef.setAttribute("aria-required","true")):(inputRef.removeAttribute("required"),inputRef.removeAttribute("aria-required")))}),[searchable,required]);const genericSelectStyles=useMemo((()=>({...styles,control:cx(styles.control,internalClassNames.control),controlFocused:cx(styles.controlFocused,internalClassNames.controlFocused),menuList:cx(styles.menuList,internalClassNames.menuList),option:cx(styles.option,internalClassNames.option),selectIcon:cx(styles.selectIcon,internalClassNames.selectIcon,{[styles.stickySelectIcon]:stickyIndicator}),labpreviewBorder:styles.labpreviewBorder})),[stickyIndicator]),selectClasses=cx(genericSelectStyles.genericSelect,{disabled:disabled},className),creatableComponents=useMemo((()=>{const _ref=components||{},Value=_ref.Value,additionalComponents=_objectWithoutProperties(_ref,["Value"]),valueComponent=multiSelect?{MultiValue:Value}:{SingleValue:Value};return{IndicatorSeparator:null,...defaultComponents,...additionalComponents,...Value&&valueComponent}}),[multiSelect,components]),formatCreateLabel=useCallback((newOptionValue=>translator(createNewMessage||messages.createNewMessage,{message:newOptionValue})),[translator,createNewMessage]),translatedPlaceholder=useMemo((()=>translator(placeholder)||null),[placeholder,translator]),translatedNoOptionsMessage=useMemo((()=>constant(translator(noOptionsMessage))),[noOptionsMessage,translator]),filterOption=useMemo((()=>filter&&(({data:data},text)=>data.__isNew__||filter(data,text))),[filter]),loadOptions=useMemo((()=>{if(loadValues)return(...args)=>Promise.resolve(loadValues(...args))}),[loadValues]);if(readOnly){if(!value)return null;const stringValue=(Array.isArray(value)?value:[value]).map(getOptionLabel).join(readOnlySeparator)||null;return stringValue&&React.createElement("span",{id:id},stringValue)}const SelectComponent=loadValues?AsyncCreatable:Creatable,selectComponentId=`${id}-wrapper`;return React.createElement(SelectComponent,_extends({id:selectComponentId,inputId:fieldUniqueId,"aria-labelledby":labelId,className:selectClasses,components:creatableComponents,defaultValue:defaultValue,filterOption:filterOption,formatCreateLabel:formatCreateLabel,getOptionLabel:getOptionLabel,getOptionValue:getOptionValue,isClearable:isClearable,isDisabled:disabled,isMulti:multiSelect,isValidNewOption:allowNewValue,isSearchable:searchable,loadOptions:loadOptions,noOptionsMessage:translatedNoOptionsMessage,onBlur:onBlur,onChange:onValueChange,onClick:onClick,onCreateOption:onCreateOption,onFocus:onFocus,onInputChange:onInputChange,onMenuClose:onMenuClose,onMenuOpen:onMenuOpen,onKeyDown:onKeyDown,options:availableValues,placeholder:translatedPlaceholder,required:required,ref:selectRef,value:value,defaultMenuIsOpen:isInitiallyOpen,genericSelectStyles:genericSelectStyles,invalid:!valid,styles:usePortal&&{menuPortal:style=>({...style,zIndex:"var(--GW-Z-INDEX-4)"})},menuPortalTarget:usePortal&&document.querySelector("body"),menuPlacement:"auto",testId:testId||id},customProps))};GenericSelectControl.propTypes=genericSelectControlPropTypes,GenericSelectControl.defaultProps={getOptionLabel:value=>value.toString(),getOptionValue:identity,internalClassNames:{},noOptionsMessage:messages.noOptionsMessage,createNewMessage:messages.createNewMessage,readOnlySeparator:", ",valid:!0,usePortal:!0,allowNewValue:()=>!1},GenericSelectControl.__docgenInfo={description:"Generic component for dropdowns.\nYou can make your custom dropdown component inherit from the generic field component.\nThat way, your component will have default FieldComponent props, such as â€™required' and methods (e.g. validation)`.\n@type {React.FC<PropTypes.InferProps<typeof genericSelectControlPropTypes>>}",methods:[],displayName:"GenericSelectControl",props:{getOptionLabel:{defaultValue:{value:"value => value.toString()",computed:!1},type:{name:"func"},required:!1,description:"Function to get label for each option"},getOptionValue:{defaultValue:{value:"identity",computed:!0},type:{name:"func"},required:!1,description:"Function to get value for each option"},internalClassNames:{defaultValue:{value:"{}",computed:!1},type:{name:"custom",raw:"genericSelectInternalClassNamesShape"},required:!1,description:"Map of CSS class names for individual parts of component's styles"},noOptionsMessage:{defaultValue:{value:"messages.noOptionsMessage",computed:!0},type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The message to display where there are no options that match\nthe text the user enters."},createNewMessage:{defaultValue:{value:"messages.createNewMessage",computed:!0},type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The message to display when a new options is being created by the user."},readOnlySeparator:{defaultValue:{value:"', '",computed:!1},type:{name:"string"},required:!1,description:"Separator for the readonly value list"},valid:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"If false component will be highlighted as invalid"},usePortal:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent"},allowNewValue:{defaultValue:{value:"() => false",computed:!1},type:{name:"func"},required:!1,description:"Function to determine if creating new values is allowed"},availableValues:{type:{name:"arrayOf",value:{name:"any"}},required:!1,description:"Array of choice objects to display"},className:{type:{name:"string"},required:!1,description:"Additional style to apply to the component"},components:{type:{name:"shape",value:{ClearIndicator:{name:"elementType",required:!1},Control:{name:"elementType",required:!1},DropdownIndicator:{name:"elementType",required:!1},IndicatorSeparator:{name:"elementType",required:!1},Input:{name:"elementType",required:!1},LoadingIndicator:{name:"elementType",required:!1},Menu:{name:"elementType",required:!1},MenuList:{name:"elementType",required:!1},Option:{name:"elementType",required:!1},Placeholder:{name:"elementType",required:!1},Value:{name:"elementType",required:!1},ValueContainer:{name:"elementType",required:!1}}},required:!1,description:"Components to customize separate parts of select"},defaultValue:{type:{name:"any"},required:!1,description:"Set the default field value on render if there is a default value; needs onValueChange to work"},disabled:{type:{name:"bool"},required:!1,description:"If true, this field is disabled"},filter:{type:{name:"func"},required:!1,description:"Function to perform custom item filtering"},id:{type:{name:"string"},required:!1,description:"Used to identify the component. applied to control and referenced by label"},isClearable:{type:{name:"bool"},required:!1,description:"If true ClearIndicator will be shown"},labelId:{type:{name:"string"},required:!1,description:"Id of label element for this field"},loadValues:{type:{name:"func"},required:!1,description:"Function for asynchronous data loading"},onBlur:{type:{name:"func"},required:!1,description:"Callback when blur event is fired"},onClick:{type:{name:"func"},required:!1,description:"Callback when click event is fired"},onCreateOption:{type:{name:"func"},required:!1,description:"Callback when new option created\n(when new option created GenericSelectControl won't invoke onValueChange() if onCreateOption() provided)"},onFocus:{type:{name:"func"},required:!1,description:"Callback when focus event is fired"},onInputChange:{type:{name:"func"},required:!1,description:"Callback to be called when text input value changed"},onMenuClose:{type:{name:"func"},required:!1,description:"Callback to be called when menu closed"},onMenuOpen:{type:{name:"func"},required:!1,description:"Callback to be called when menu opened"},onKeyDown:{type:{name:"func"},required:!1,description:"Callback to be called when key is pressed"},onValueChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and (model or path) for this component"},placeholder:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Placeholder to display on empty component"},readOnly:{type:{name:"bool"},required:!1,description:"If true, this field is readonly"},required:{type:{name:"bool"},required:!1,description:"Specifies that the input field must be filled"},searchable:{type:{name:"bool"},required:!1,description:"Allows you to type in dropdown field to find options."},multiSelect:{type:{name:"bool"},required:!1,description:"Should component allow a multiple selection"},stickyIndicator:{type:{name:"bool"},required:!1,description:"Determines if dropdown indicator will be sticky"},value:{type:{name:"any"},required:!1,description:"Value to display in control"},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},controlShouldRenderValue:{type:{name:"bool"},required:!1,description:"Should control render value"},backspaceRemovesValue:{type:{name:"bool"},required:!1,description:"Should backspace remove value"},fieldUniqueId:{type:{name:"string"},required:!1,description:"Field unique id generated by field component. If GenericSelect is used as a standalone component use generateComponentId() helper function to ensure the id is uniqe."},testId:{type:{name:"string"},required:!1,description:"Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id."}}},GenericSelectControl.__docgenInfo={componentName:"GenericSelectControl",packageName:"@jutro/components",description:"Generic component for dropdowns.\nYou can make your custom dropdown component inherit from the generic field component.\nThat way, your component will have default FieldComponent props, such as â€™required' and methods (e.g. validation)`.",displayName:"GenericSelectControl",methods:[],actualName:"GenericSelectControl",props:{availableValues:{type:{name:"arrayOf",value:{name:"any"}},required:!1,description:"Array of choice objects to display"},className:{type:{name:"string"},required:!1,description:"Additional style to apply to the component"},components:{type:{name:"shape",value:{ClearIndicator:{name:"elementType",required:!1},Control:{name:"elementType",required:!1},DropdownIndicator:{name:"elementType",required:!1},IndicatorSeparator:{name:"elementType",required:!1},Input:{name:"elementType",required:!1},LoadingIndicator:{name:"elementType",required:!1},Menu:{name:"elementType",required:!1},MenuList:{name:"elementType",required:!1},Option:{name:"elementType",required:!1},Placeholder:{name:"elementType",required:!1},Value:{name:"elementType",required:!1},ValueContainer:{name:"elementType",required:!1}}},required:!1,description:"Components to customize separate parts of select"},internalClassNames:{type:{name:"custom",raw:"genericSelectInternalClassNamesShape"},required:!1,description:"Map of CSS class names for individual parts of component's styles",defaultValue:{value:"{}",computed:!1}},createNewMessage:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The message to display when a new options is being created by the user.",defaultValue:{value:"messages.createNewMessage",computed:!0}},defaultValue:{type:{name:"any"},required:!1,description:"Set the default field value on render if there is a default value; needs onValueChange to work"},disabled:{type:{name:"bool"},required:!1,description:"If true, this field is disabled"},filter:{type:{name:"func"},required:!1,description:"Function to perform custom item filtering"},getOptionLabel:{type:{name:"func"},required:!1,description:"Function to get label for each option",defaultValue:{value:"value => value.toString()",computed:!1}},getOptionValue:{type:{name:"func"},required:!1,description:"Function to get value for each option",defaultValue:{value:"identity",computed:!0}},id:{type:{name:"string"},required:!1,description:"Used to identify the component. applied to control and referenced by label"},isClearable:{type:{name:"bool"},required:!1,description:"If true ClearIndicator will be shown"},allowNewValue:{type:{name:"func"},required:!1,description:"Function to determine if creating new values is allowed",defaultValue:{value:"() => false",computed:!1}},labelId:{type:{name:"string"},required:!1,description:"Id of label element for this field"},loadValues:{type:{name:"func"},required:!1,description:"Function for asynchronous data loading"},noOptionsMessage:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The message to display where there are no options that match\nthe text the user enters.",defaultValue:{value:"messages.noOptionsMessage",computed:!0}},onBlur:{type:{name:"func"},required:!1,description:"Callback when blur event is fired"},onClick:{type:{name:"func"},required:!1,description:"Callback when click event is fired"},onCreateOption:{type:{name:"func"},required:!1,description:"Callback when new option created\n(when new option created GenericSelectControl won't invoke onValueChange() if onCreateOption() provided)"},onFocus:{type:{name:"func"},required:!1,description:"Callback when focus event is fired"},onInputChange:{type:{name:"func"},required:!1,description:"Callback to be called when text input value changed"},onMenuClose:{type:{name:"func"},required:!1,description:"Callback to be called when menu closed"},onMenuOpen:{type:{name:"func"},required:!1,description:"Callback to be called when menu opened"},onKeyDown:{type:{name:"func"},required:!1,description:"Callback to be called when key is pressed"},onValueChange:{type:{name:"func"},required:!1,description:"Callback when value is changed; receives new value and (model or path) for this component"},placeholder:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Placeholder to display on empty component"},readOnly:{type:{name:"bool"},required:!1,description:"If true, this field is readonly"},readOnlySeparator:{type:{name:"string"},required:!1,description:"Separator for the readonly value list",defaultValue:{value:"', '",computed:!1}},required:{type:{name:"bool"},required:!1,description:"Specifies that the input field must be filled"},searchable:{type:{name:"bool"},required:!1,description:"Allows you to type in dropdown field to find options."},multiSelect:{type:{name:"bool"},required:!1,description:"Should component allow a multiple selection"},stickyIndicator:{type:{name:"bool"},required:!1,description:"Determines if dropdown indicator will be sticky"},valid:{type:{name:"bool"},required:!1,description:"If false component will be highlighted as invalid",defaultValue:{value:"true",computed:!1}},value:{type:{name:"any"},required:!1,description:"Value to display in control"},usePortal:{type:{name:"bool"},required:!1,description:"Default true; and if set to false, it will bypass menuPortalTarget prop in SelectComponent",defaultValue:{value:"true",computed:!1}},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},controlShouldRenderValue:{type:{name:"bool"},required:!1,description:"Should control render value"},backspaceRemovesValue:{type:{name:"bool"},required:!1,description:"Should backspace remove value"},fieldUniqueId:{type:{name:"string"},required:!1,description:"Field unique id generated by field component. If GenericSelect is used as a standalone component use generateComponentId() helper function to ensure the id is uniqe."},testId:{type:{name:"string"},required:!1,description:"Data attribute that specifies the data-testid used in testing. If not provided data attribute set to id."}}};