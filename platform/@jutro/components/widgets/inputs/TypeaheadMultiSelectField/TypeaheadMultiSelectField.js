import _extends from"@babel/runtime-corejs3/helpers/extends";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _get from"@babel/runtime-corejs3/helpers/get";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{useMemo}from"react";import isEmpty from"lodash/isEmpty";import memoize from"memoize-one";import PropTypes from"prop-types";import{availableValueObjectShape,dataTypeShape,DATA_TYPE_STRING,DATA_TYPE_OBJECT,intlMessageShape}from"@jutro/prop-types";import{GenericSelectControl}from"../GenericSelectControl/GenericSelectControl";import{FieldComponent}from"../FieldComponent/FieldComponent";import{TagCollection}from"../../Tag/TagCollection";const TypeaheadSingleValueShape=PropTypes.oneOfType([PropTypes.string.isRequired,availableValueObjectShape]);export let TypeaheadMultiSelectField=function(_FieldComponent){_inherits(TypeaheadMultiSelectField,FieldComponent);var _super=_createSuper(TypeaheadMultiSelectField);function TypeaheadMultiSelectField(...args){var _this;return _classCallCheck(this,TypeaheadMultiSelectField),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"allowNewValue",(value=>{const _this$props=_this.props,availableValues=_this$props.availableValues;return _this$props.allowNew&&value&&availableValues.every((entry=>entry.name!==value&&entry.code!==value))})),_defineProperty(_assertThisInitialized(_this),"handleOnChangeMulti",(value=>{const dataType=_this.props.dataType;_this.beforeValue=_this.props.value;const newVal=dataType===DATA_TYPE_OBJECT||null===value?value:null==value?void 0:value.map(_this.getOptionValue);_this.notifyChange(newVal)})),_defineProperty(_assertThisInitialized(_this),"handleOnChangeSingle",((value,action)=>{const dataType=_this.props.dataType;if(_this.beforeValue=_this.props.value,"clear"===action.action)return void _this.notifyChange(value);const newVal=dataType===DATA_TYPE_OBJECT?value:_this.getOptionValue(value);_this.notifyChange(newVal)})),_defineProperty(_assertThisInitialized(_this),"getOptionLabel",(option=>option.name||option.label)),_defineProperty(_assertThisInitialized(_this),"getOptionValue",(option=>option.code||option.value)),_defineProperty(_assertThisInitialized(_this),"translateAvailableValues",memoize((availableValues=>availableValues&&availableValues.map((value=>({name:_this.translator(value.name),code:value.code})))))),_defineProperty(_assertThisInitialized(_this),"transformValueProp",memoize(((value,availableValues,dataType)=>{const singleSelect=_this.props.singleSelect;if(!value||!availableValues)return[];if(dataType===DATA_TYPE_OBJECT)return value;const valuesMap=availableValues.reduce(((map,item)=>Object.assign(map,{[item.code]:item})),{});return singleSelect?valuesMap[value]||{code:value,name:value}:value.map((code=>valuesMap[code]||{code:code,name:code}))}))),_this}return _createClass(TypeaheadMultiSelectField,[{key:"render",value:function(){return _get(_getPrototypeOf(TypeaheadMultiSelectField.prototype),"render",this).call(this)}},{key:"renderControlReadOnly",value:function(breakpointProps){const id=breakpointProps.id,className=breakpointProps.className;return React.createElement("div",{id:`${id}-readonly`,"data-read-only":!0,className:className},this.renderSelect({readOnly:!0}))}},{key:"renderSelect",value:function(props){const _this$props2=this.props,availableValuesProp=_this$props2.availableValues,className=_this$props2.className,dataType=_this$props2.dataType,readOnlySeparator=_this$props2.readOnlySeparator,valueProp=_this$props2.value,singleSelect=_this$props2.singleSelect,usePortal=_this$props2.usePortal,isInitiallyOpen=_this$props2.isInitiallyOpen,id=_this$props2.id,testId=_this$props2.testId,onLoadValues=_this$props2.onLoadValues,fieldUniqueId=this.fieldUniqueId,availableValues=this.translateAvailableValues(availableValuesProp),value=this.transformValueProp(valueProp,availableValues,dataType),components=useMemo((()=>singleSelect||isEmpty(value)?{}:{ValueContainer:valueContainerProps=>React.createElement(TagCollection,_extends({id:`${id}-option`},valueContainerProps))}),[singleSelect]);return React.createElement(GenericSelectControl,_extends({id:id,fieldUniqueId:fieldUniqueId,testId:testId,availableValues:availableValues,className:className,getOptionLabel:this.getOptionLabel,getOptionValue:this.getOptionValue,readOnlySeparator:readOnlySeparator,components:components,value:value,usePortal:usePortal},props,{isInitiallyOpen:isInitiallyOpen,loadValues:onLoadValues}))}},{key:"renderControl",value:function(breakpointProps,{isValid:isValid,labelId:labelId}={}){const disabled=breakpointProps.disabled,placeholder=breakpointProps.placeholder,createNewMessage=breakpointProps.createNewMessage,singleSelect=breakpointProps.singleSelect,stickyIndicator=breakpointProps.stickyIndicator,noOptionsMessage=breakpointProps.noOptionsMessage,usePortal=breakpointProps.usePortal,className=breakpointProps.className,required=breakpointProps.required,selectProps={createNewMessage:createNewMessage,disabled:disabled,isClearable:!1,allowNewValue:this.allowNewValue,labelId:labelId,noOptionsMessage:noOptionsMessage,onBlur:this.handleBlur,onFocus:this.handleFocus,onValueChange:singleSelect?this.handleOnChangeSingle:this.handleOnChangeMulti,placeholder:placeholder,multiSelect:!singleSelect,stickyIndicator:stickyIndicator,usePortal:usePortal,valid:isValid,className:className,required:required};return this.renderSelect(selectProps)}},{key:"isEmpty",value:function(){const _this$props3=this.props,valueProp=_this$props3.value,availableValues=_this$props3.availableValues,value=this.transformValueProp(valueProp,availableValues);return!value||0===value.length}}]),TypeaheadMultiSelectField}();_defineProperty(TypeaheadMultiSelectField,"defaultProps",{...FieldComponent.defaultProps,dataType:DATA_TYPE_STRING,usePortal:!1}),_defineProperty(TypeaheadMultiSelectField,"propTypes",{...FieldComponent.propTypes,availableValues:PropTypes.arrayOf(availableValueObjectShape),value:PropTypes.oneOfType([TypeaheadSingleValueShape,PropTypes.arrayOf(TypeaheadSingleValueShape)]),dataType:dataTypeShape,allowNew:PropTypes.bool,noOptionsMessage:intlMessageShape,createNewMessage:intlMessageShape,readOnlySeparator:PropTypes.string,singleSelect:PropTypes.bool,stickyIndicator:PropTypes.bool,usePortal:PropTypes.bool,isInitiallyOpen:PropTypes.bool,onLoadValues:PropTypes.func}),_defineProperty(TypeaheadMultiSelectField,"contextType",FieldComponent.contextType),TypeaheadMultiSelectField.__docgenInfo={description:"Renders a multi-select input where the user can type to match\nfrom any of the predefined values. As the user types, the text\nis matched against the available values to display choices.\n\n@typedef {typeof TypeaheadMultiSelectField.propTypes} TypeaheadMultiSelectFieldPropTypes\n@extends FieldComponent<PropTypes.InferProps<TypeaheadMultiSelectFieldPropTypes>>\n\n@metadataType field",methods:[{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"allowNewValue",docblock:"allowNewValue\n@param {object} value - new value being entered\n@returns {boolean} true if new values are allowed and it doesn't match an existing one",modifiers:[],params:[{name:"value",description:"new value being entered",type:{name:"object"},optional:!1}],returns:{description:"true if new values are allowed and it doesn't match an existing one",type:{name:"boolean"}},description:"allowNewValue"},{name:"renderSelect",docblock:null,modifiers:[],params:[{name:"props",type:null}],returns:null},{name:"renderControl",docblock:"Renders the control\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options\n@returns {React.ReactElement} - rendered component",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"{ isValid, labelId }"}],returns:{description:"rendered component",type:{name:"React.ReactElement"}},description:"Renders the control"},{name:"handleOnChangeMulti",docblock:"onChange callback passed to Select\n\n@param {object[]} value - the value of the control\n@param {string} value.name\n@param {string} value.code",modifiers:[],params:[{name:"value",description:"the value of the control",type:{name:"Array",elements:[{name:"object"}]},optional:!1}],returns:null,description:"onChange callback passed to Select"},{name:"handleOnChangeSingle",docblock:"onChange callback passed to Select\n\n@param {object[]} value - the value of the control\n@param {string} value.name\n@param {string} value.code\n@param {object} action - the action type (clear, blur, ect.)",modifiers:[],params:[{name:"value",description:"the value of the control",type:{name:"Array",elements:[{name:"object"}]},optional:!1},{name:"action",description:"the action type (clear, blur, ect.)",type:{name:"object"},optional:!1}],returns:null,description:"onChange callback passed to Select"},{name:"isEmpty",docblock:null,modifiers:[],params:[],returns:null},{name:"getOptionLabel",docblock:"Gets the option display text.\nNeeds to handle the internal option.label format of the Creatable component\nwhen new values are created.\n\n@param {object} option\n\n@returns {string} - the text to display",modifiers:[],params:[{name:"option",description:null,type:{name:"object"},optional:!1}],returns:{description:"the text to display",type:{name:"string"}},description:"Gets the option display text.\nNeeds to handle the internal option.label format of the Creatable component\nwhen new values are created."},{name:"getOptionValue",docblock:"Gets the option value\nNeeds to handle the internal option.value format of the Creatable component\nwhen new values are created.\n\n@param {object} option\n\n@returns {string} - the value that indicates user choice",modifiers:[],params:[{name:"option",description:null,type:{name:"object"},optional:!1}],returns:{description:"the value that indicates user choice",type:{name:"string"}},description:"Gets the option value\nNeeds to handle the internal option.value format of the Creatable component\nwhen new values are created."}],displayName:"TypeaheadMultiSelectField",props:{dataType:{defaultValue:{value:"DATA_TYPE_STRING",computed:!0},type:{name:"custom",raw:"dataTypeShape"},required:!1,description:"The format of the items in the value array"},usePortal:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Default false; if set to true, it will target the body as the menu portal"},availableValues:{type:{name:"arrayOf",value:{name:"custom",raw:"availableValueObjectShape"}},required:!1,description:"List of values that the user can select from.\n\n`name` - the text to display, for example 'Married', 'Single'\n`code` - the value that is sent on submit."},value:{type:{name:"union",value:[{name:"custom",raw:"TypeaheadSingleValueShape"},{name:"arrayOf",value:{name:"custom",raw:"TypeaheadSingleValueShape"}}]},required:!1,description:"The list of codes that are selected. Each code is matched\nagainst the codes in `availableValues` to retrieve a `name` to display"},allowNew:{type:{name:"bool"},required:!1,description:"Determines if creating new values is allowed"},noOptionsMessage:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The message to display where there are no options that match\nthe text the user enters."},createNewMessage:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The message to display when a new option is being created by the user.\ncreateNewMessage should be passed with the {message} placeholder for example: 'New option: {message}'."},readOnlySeparator:{type:{name:"string"},required:!1,description:"Separator for the readonly value list"},singleSelect:{type:{name:"bool"},required:!1,description:"Should component only allow a single selection to be made"},stickyIndicator:{type:{name:"bool"},required:!1,description:"Determines if dropdown indicator will be sticky"},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},onLoadValues:{type:{name:"func"},required:!1,description:"Function for asynchronous data loading"}},composes:["../FieldComponent/FieldComponent"]},TypeaheadMultiSelectField.__docgenInfo={componentName:"TypeaheadMultiSelectField",packageName:"@jutro/components",description:"Renders a multi-select input where the user can type to match\nfrom any of the predefined values. As the user types, the text\nis matched against the available values to display choices.",displayName:"TypeaheadMultiSelectField",methods:[{name:"renderControlReadOnly",docblock:"Render readonly control for this component.\n\n@param {object} breakpointProps - breakpoint-specific props\n\n@returns {React.ReactElement} JSX for the control",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1}],returns:{description:"JSX for the control",type:{name:"React.ReactElement"}},description:"Render readonly control for this component."},{name:"allowNewValue",docblock:"allowNewValue\n@param {object} value - new value being entered\n@returns {boolean} true if new values are allowed and it doesn't match an existing one",modifiers:[],params:[{name:"value",description:"new value being entered",type:{name:"object"},optional:!1}],returns:{description:"true if new values are allowed and it doesn't match an existing one",type:{name:"boolean"}},description:"allowNewValue"},{name:"renderSelect",docblock:null,modifiers:[],params:[{name:"props",optional:void 0,type:null}],returns:null},{name:"renderControl",docblock:"Renders the control\n\n@param {object} breakpointProps - breakpoint-specific props\n@param {object} options\n@returns {React.ReactElement} - rendered component",modifiers:[],params:[{name:"breakpointProps",description:"breakpoint-specific props",type:{name:"object"},optional:!1},{name:"{ isValid, labelId }"}],returns:{description:"rendered component",type:{name:"React.ReactElement"}},description:"Renders the control"},{name:"handleOnChangeMulti",docblock:"onChange callback passed to Select\n\n@param {object[]} value - the value of the control\n@param {string} value.name\n@param {string} value.code",modifiers:[],params:[{name:"value",description:"the value of the control",type:{name:"Array",elements:[{name:"object"}]},optional:!1}],returns:null,description:"onChange callback passed to Select"},{name:"handleOnChangeSingle",docblock:"onChange callback passed to Select\n\n@param {object[]} value - the value of the control\n@param {string} value.name\n@param {string} value.code\n@param {object} action - the action type (clear, blur, ect.)",modifiers:[],params:[{name:"value",description:"the value of the control",type:{name:"Array",elements:[{name:"object"}]},optional:!1},{name:"action",description:"the action type (clear, blur, ect.)",type:{name:"object"},optional:!1}],returns:null,description:"onChange callback passed to Select"},{name:"isEmpty",docblock:null,modifiers:[],params:[],returns:null},{name:"getOptionLabel",docblock:"Gets the option display text.\nNeeds to handle the internal option.label format of the Creatable component\nwhen new values are created.\n\n@param {object} option\n\n@returns {string} - the text to display",modifiers:[],params:[{name:"option",description:null,type:{name:"object"},optional:!1}],returns:{description:"the text to display",type:{name:"string"}},description:"Gets the option display text.\nNeeds to handle the internal option.label format of the Creatable component\nwhen new values are created."},{name:"getOptionValue",docblock:"Gets the option value\nNeeds to handle the internal option.value format of the Creatable component\nwhen new values are created.\n\n@param {object} option\n\n@returns {string} - the value that indicates user choice",modifiers:[],params:[{name:"option",description:null,type:{name:"object"},optional:!1}],returns:{description:"the value that indicates user choice",type:{name:"string"}},description:"Gets the option value\nNeeds to handle the internal option.value format of the Creatable component\nwhen new values are created."}],actualName:"TypeaheadMultiSelectField",metadataType:"field",props:{availableValues:{type:{name:"arrayOf",value:{name:"union",value:[{name:"shape",value:{code:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},name:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}},{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!1},displayName:{name:"custom",raw:"intlMessageShape",required:!1},subtitle:{name:"custom",raw:"intlMessageShape",required:!1},secondaryLabel:{name:"custom",raw:"intlMessageShape",required:!1}}}]}},required:!1,description:"List of values that the user can select from.\n\n`name` - the text to display, for example 'Married', 'Single'\n`code` - the value that is sent on submit."},value:{type:{name:"union",value:[{name:"custom",raw:"TypeaheadSingleValueShape"},{name:"arrayOf",value:{name:"custom",raw:"TypeaheadSingleValueShape"}}]},required:!1,description:"The list of codes that are selected. Each code is matched\nagainst the codes in `availableValues` to retrieve a `name` to display"},dataType:{type:{name:"enum",value:[{value:"'object'",computed:!1},{value:"'string'",computed:!1}]},required:!1,description:"The format of the items in the value array",defaultValue:{value:"'string'",computed:!1}},allowNew:{type:{name:"bool"},required:!1,description:"Determines if creating new values is allowed"},noOptionsMessage:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The message to display where there are no options that match\nthe text the user enters."},createNewMessage:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The message to display when a new option is being created by the user.\ncreateNewMessage should be passed with the {message} placeholder for example: 'New option: {message}'."},readOnlySeparator:{type:{name:"string"},required:!1,description:"Separator for the readonly value list"},singleSelect:{type:{name:"bool"},required:!1,description:"Should component only allow a single selection to be made"},stickyIndicator:{type:{name:"bool"},required:!1,description:"Determines if dropdown indicator will be sticky"},usePortal:{type:{name:"bool"},required:!1,description:"Default false; if set to true, it will target the body as the menu portal",defaultValue:{value:"false",computed:!1}},isInitiallyOpen:{type:{name:"bool"},required:!1,description:"Should dropdown be initially opened"},onLoadValues:{type:{name:"func"},required:!1,description:"Function for asynchronous data loading"}},composes:["../FieldComponent/FieldComponent"]};