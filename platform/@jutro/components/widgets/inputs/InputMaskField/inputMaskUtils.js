function replaceAt(string,index,replace){return string.substring(0,index)+replace+string.substring(index+1)}export function applyInsertMode(newState,oldState,userInput,maskOptions,handleValueChangeCallback){if(newState.value.split("").every(((char,index)=>char===maskOptions.maskChar||maskOptions.permanents.includes(index)))||null===oldState.selection||null===newState.selection||!maskOptions.maskChar)return newState.value!==oldState.value&&handleValueChangeCallback({target:{value:newState.value}}),newState;let newValue=newState.value;if(null!==userInput){newValue=newState.value;let startIndex=oldState.selection.start,endIndex=newState.selection.end;for(;endIndex<newValue.length;)maskOptions.permanents.includes(endIndex)?endIndex+=1:(maskOptions.permanents.includes(startIndex)||(newValue=replaceAt(newValue,endIndex,oldState.value.charAt(startIndex)),endIndex+=1),startIndex+=1)}else if(newState.value!==oldState.value&&oldState.selection.end<newValue.length){newValue=oldState.value;let startIndex=newState.selection.start,endIndex=oldState.selection.end;for(endIndex===startIndex&&(endIndex+=1);endIndex<newValue.length;)maskOptions.permanents.includes(endIndex)?endIndex+=1:(maskOptions.permanents.includes(startIndex)||(newValue=replaceAt(newValue,startIndex,newValue.charAt(endIndex)),endIndex+=1),startIndex+=1);for(;startIndex<newValue.length;)maskOptions.permanents.includes(startIndex)||(newValue=replaceAt(newValue,startIndex,maskOptions.maskChar)),startIndex+=1}return{value:newValue,selection:newState.selection}}