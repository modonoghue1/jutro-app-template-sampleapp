import React,{useContext,useEffect}from"react";import{withRouter,useLocation}from"react-router-dom";import PropTypes from"prop-types";import cx from"classnames";import FocusLock from"react-focus-lock";import{TranslatorContext}from"@jutro/locale";import{IconButton}from"@jutro/components";import styles from"./BurgerMenu.module.css";import{messages}from"./BurgerMenu.messages";import{BurgerMenuItem}from"./BurgerMenuItem";const BurgerSidebarInternal=({isOpen:isOpen,setIsOpen:setIsOpen,burgerContent:burgerContent})=>{const translator=useContext(TranslatorContext),visibilityStyles={[styles.isClosed]:!isOpen},sidebarClassNames=cx(styles.burgerSidebar,visibilityStyles),backdropClassNames=cx(styles.backdrop,visibilityStyles),closeOnClick=()=>{setIsOpen(!1)},location=useLocation();useEffect(closeOnClick,[location.pathname]);const burgerSidebarHeader=React.createElement(BurgerMenuItem,{id:"burger-menu-side-bar-header",className:styles.sidebarHeader,hideSeparator:!0,isContainerOnly:!0},React.createElement("span",{className:styles.menu},translator(messages.menuHeaderTitle)),React.createElement(IconButton,{icon:"gw-close",iconColor:"dark",onClick:closeOnClick,"aria-label":translator(messages.closeNavigationLabel)}));return React.createElement(React.Fragment,null,React.createElement("div",{className:sidebarClassNames,"aria-hidden":!isOpen},React.createElement(FocusLock,{noFocusGuards:!0,whiteList:node=>{var _document$getElementB;return null===(_document$getElementB=document.getElementById("appSwitcherModal"))||void 0===_document$getElementB?void 0:_document$getElementB.contains(node)}},burgerSidebarHeader,burgerContent)),React.createElement("div",{className:backdropClassNames,onClick:closeOnClick,role:"presentation"}))};BurgerSidebarInternal.propTypes={isOpen:PropTypes.bool,setIsOpen:PropTypes.func,burgerContent:PropTypes.arrayOf(PropTypes.node)},BurgerSidebarInternal.defaultProps={isOpen:!1},BurgerSidebarInternal.displayName="BurgerSidebar";export const BurgerSidebar=withRouter(BurgerSidebarInternal);BurgerSidebarInternal.__docgenInfo={description:"BurgerSidebar renders content of burger menu in a sidebar\n\n@param {boolean} isOpen - state of sidebar\n@param {Function} setIsOpen - sets sidebar state\n@param {object} burgerContent\n@returns {React.ReactElement} - rendered component\n\n@metadataType container",methods:[],displayName:"BurgerSidebar",props:{isOpen:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Sidebar state"},setIsOpen:{type:{name:"func"},required:!1,description:"Sidebar set state function"},burgerContent:{type:{name:"arrayOf",value:{name:"node"}},required:!1,description:"Sidebar content"}}},BurgerSidebarInternal.__docgenInfo={componentName:"BurgerSidebar",packageName:"@jutro/router",description:"BurgerSidebar renders content of burger menu in a sidebar",displayName:"BurgerSidebar",methods:[],actualName:"BurgerSidebarInternal",metadataType:"container",props:{isOpen:{type:{name:"bool"},required:!1,description:"Sidebar state",defaultValue:{value:"false",computed:!1}},setIsOpen:{type:{name:"func"},required:!1,description:"Sidebar set state function"},burgerContent:{type:{name:"arrayOf",value:{name:"node"}},required:!1,description:"Sidebar content"}}};