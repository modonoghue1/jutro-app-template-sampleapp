import{ModalNextProvider}from"@jutro/components";import _ from"lodash";import{log}from"@jutro/logger";import{PromptService}from"./PromptService";import{handleAction}from"./actionHelper";export const routeConfirmationModal=(promptName,promptCallback,modalContext=ModalNextProvider)=>{const promptProps=PromptService.popPrompt(promptName);if(!promptProps)return void promptCallback(!0);const title=promptProps.title,message=promptProps.message,showConfirm=modalContext.showConfirm;if(title&&message){showConfirm({title:title,message:message,status:"warning",icon:"gw-warning"}).then((action=>{"cancel"===action?promptCallback(!1):handleTriggerEvent(promptProps,promptCallback,modalContext)}),(()=>{promptCallback(!1)}))}else handleTriggerEvent(promptProps,promptCallback,modalContext)};async function handleTriggerEvent(promptProps,promptCallback,modalContext){const trigger=promptProps.trigger,instance=promptProps.instance;if(trigger&&_.isFunction(trigger)){const triggerAnswer=trigger();if(_.isObject(triggerAnswer))try{await handleAction(triggerAnswer,instance,null,modalContext),promptCallback(instance.props.history.location===instance.props.location)}catch(e){log.error(e),promptCallback(!1)}else _.isBoolean(triggerAnswer)?promptCallback(triggerAnswer):promptCallback(!0)}else promptCallback(!0)}