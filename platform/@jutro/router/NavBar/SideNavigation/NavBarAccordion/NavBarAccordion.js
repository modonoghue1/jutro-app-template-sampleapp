import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useContext,useState}from"react";import PropTypes from"prop-types";import{withRouter,matchPath}from"react-router-dom";import _ from"lodash";import cx from"classnames";import{Accordion,AccordionCard,Chevron,Icon}from"@jutro/components";import{TranslatorContext,useSafeTranslatedUrls}from"@jutro/locale";import{intlMessageShape,IntlMessageShape,routesShape}from"@jutro/prop-types";import{getIdFromPath}from"../../NavBarLink";import{NavigationContext}from"../../NavigationContext";import{NavigationContent}from"../../NavigationContent";import{renderBadge}from"../renderBadge";import styles from"../SideNavigation.module.css";import navBarStyles from"../../NavBarItem.module.css";export const getNotifications=routes=>routes.reduce(((notifications,route)=>notifications+_.get(route,"navLink.notifications",0)),0);export const NavBarAccordionInternal=({to:toProp,header:header,icon:icon,disabled:disabled,className:className,routes:routes,location:loc,notifications:notifications})=>{const _useContext=useContext(NavigationContext),activeRoute=_useContext.activeRoute,setActiveRoute=_useContext.setActiveRoute,isNavigationCollapsed=_useContext.isCollapsed,expandNavigation=_useContext.expand,translator=useContext(TranslatorContext),urlTranslatorAndSanitizer=useSafeTranslatedUrls(),_useState=useState([]),_useState2=_slicedToArray(_useState,2),accordionStates=_useState2[0],setAccordionStates=_useState2[1],to=urlTranslatorAndSanitizer(toProp),hasActiveRoute=routes.some((({path:path})=>matchPath(loc.pathname,path))),cardID=getIdFromPath(to)||"unknownId",classes=cx(styles.subItem,{[styles.subItemWithIcon]:icon}),styledRoutes=routes.map((({navLink:navLink,...rest})=>({...rest,navLink:{...navLink,className:cx(navLink&&navLink.className,classes)}})));return(activeRoute!==to&&!hasActiveRoute||isNavigationCollapsed)&&accordionStates.length>0&&setAccordionStates([]),React.createElement("div",{onClick:e=>e.stopPropagation(),role:"presentation"},React.createElement(Accordion,{disabled:disabled,showFrame:!1,closeOthers:!1,className:styles.sideNavAccordion,accordionStates:accordionStates,onUpdateAccordionStates:setAccordionStates},React.createElement(AccordionCard,{id:cardID,cardBodyClassName:styles.cardBody,cardTitleClassName:styles.cardTitle,cardHeadingClassName:styles.cardHeading,collapseClassName:styles.accordionCollapse,renderHeader:isOpen=>{const iconComponent=icon&&React.createElement(Icon,{icon:icon,className:navBarStyles.navBarItemIcon}),subNavsNotifications=getNotifications(routes),classes=cx(navBarStyles.navBarItem,navBarStyles.leftNavBarItem,{[styles.activeAccordion]:hasActiveRoute&&!isOpen,[styles.expandedAccordion]:isOpen},className),chevronClasses=cx(styles.chevron,{[styles.rightAlignChevron]:!notifications,[styles.openedAccordion]:isOpen});return React.createElement("button",{tabIndex:"-1",className:classes,onClick:()=>{isNavigationCollapsed&&expandNavigation(),setActiveRoute(to)}},React.createElement("div",{className:navBarStyles.titleWrapper},iconComponent,React.createElement("div",{className:navBarStyles.titleContentWrapper},React.createElement("span",{className:navBarStyles.title},translator(header)),renderBadge(notifications,`badge__${cardID}`,notifications||subNavsNotifications),React.createElement(Chevron,{className:chevronClasses,chevronIcon:"gw-expand-more",isOpen:isOpen}))))}},React.createElement(NavigationContent,{routes:styledRoutes,alignment:"left"}))))};NavBarAccordionInternal.propTypes={className:PropTypes.string,header:intlMessageShape.isRequired,to:intlMessageShape.isRequired,icon:PropTypes.string,disabled:PropTypes.bool,activeClassName:PropTypes.string,exact:PropTypes.bool,routes:routesShape},NavBarAccordionInternal.displayName="NavBarAccordion";export const NavBarAccordion=withRouter(NavBarAccordionInternal);NavBarAccordionInternal.__docgenInfo={description:"The `NavBarAccordion` component is designed as a container for sub nav links of side navigation\n\n@param {object} props properties for SideNavigation component\n\n@returns {React.ReactElement}",methods:[],displayName:"NavBarAccordion",props:{className:{type:{name:"string"},required:!1,description:"Additional class names for component."},header:{type:{name:"custom",raw:"intlMessageShape.isRequired"},required:!1,description:"Link header."},to:{type:{name:"custom",raw:"intlMessageShape.isRequired"},required:!1,description:"Internal path to the application."},icon:{type:{name:"string"},required:!1,description:"Icon to render to the left of the header"},disabled:{type:{name:"bool"},required:!1,description:"Flag to make item disabled"},activeClassName:{type:{name:"string"},required:!1,description:"Additional class names for  active component."},exact:{type:{name:"bool"},required:!1,description:"When true, will only match if the path matches the location.pathname exactly"},routes:{type:{name:"custom",raw:"routesShape"},required:!1,description:"Sub navigation items metadata"}}},NavBarAccordionInternal.__docgenInfo={componentName:"NavBarAccordion",packageName:"@jutro/router",description:"The `NavBarAccordion` component is designed as a container for sub nav links of side navigation",displayName:"NavBarAccordion",methods:[],actualName:"NavBarAccordionInternal",props:{className:{type:{name:"string"},required:!1,description:"Additional class names for component."},header:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!0,description:"Link header."},to:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!0,description:"Internal path to the application."},icon:{type:{name:"string"},required:!1,description:"Icon to render to the left of the header"},disabled:{type:{name:"bool"},required:!1,description:"Flag to make item disabled"},activeClassName:{type:{name:"string"},required:!1,description:"Additional class names for  active component."},exact:{type:{name:"bool"},required:!1,description:"When true, will only match if the path matches the location.pathname exactly"},routes:{type:{name:"arrayOf",value:{name:"custom",raw:"routeShape"}},required:!1,description:"Sub navigation items metadata"}}};