import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React from"react";import _ from"lodash";import{isPromise}from"@jutro/platform";import{log}from"@jutro/logger";import{ModalNextProvider}from"@jutro/components";import{showAlert}from"./alertHelper";import{navigateTo}from"./navigationHelper";import{getErrorCategory}from"./errorCategorizer";export function invokeAction(name,props,context,onSuccess,onFailure){const actionFunction=props.function;let result,resultException,actionArgs=props.args;if(actionFunction&&!_.isString(actionFunction)){actionArgs&&(actionArgs=actionArgs.map((prop=>context[prop])));try{result=actionArgs?actionFunction(...actionArgs):actionFunction()}catch(ex){result=!1,resultException=ex}return{name:name,result:result,resultException:resultException,progress:props.progress,success:props.success,failure:props.failure,onSuccess:onSuccess,onFailure:onFailure}}log.error(`Could not resolve action function: "${actionFunction||name}"`)}export function actionResultWithPaths(result,successPath,failurePath,progressMsg){const actionObject={name:"unnamed",result:result};return void 0!==progressMsg&&(actionObject.progress={message:progressMsg}),void 0!==successPath&&(actionObject.success={path:successPath}),void 0!==failurePath&&(actionObject.failure={path:failurePath}),actionObject}export async function handleAction(actionObject,instance,translator,modalContext=ModalNextProvider){if(instance&&(!instance.setState||!instance.props||!instance.props.history))return void log.error('"Instance" provided to AsyncLink.handleAction does not have "setState" or "history" props');const name=actionObject.name,result=actionObject.result,resultException=actionObject.resultException,progress=actionObject.progress,success=actionObject.success,failure=actionObject.failure,onSuccess=actionObject.onSuccess,onFailure=actionObject.onFailure,message=(progress||{}).message,_ref2=success||{},to=_ref2.path,toMessage=_ref2.message,_ref3=failure||{},failTo=_ref3.path,failToMessage=_ref3.message,onAlert=showAlert,onNavigate=navigateTo;if(!isPromise(result))return!1!==result?(onSuccess&&onSuccess(name,result),void(to&&onNavigate?onNavigate(instance,to,result):toMessage&&onAlert&&onAlert(translator(toMessage),null,null,modalContext))):void 0!==resultException&&!1!==resultException?(onFailure&&onFailure(name,resultException),void(failTo&&onNavigate?onNavigate(instance,failTo,resultException):failToMessage&&onAlert&&onAlert(translator(failToMessage),null,null,modalContext))):void 0;try{instance&&instance.setState({loading:!0,message:translator(message)});const data=await result;instance&&instance.setState({loading:!1,message:null}),!1!==data&&(onSuccess&&onSuccess(name,data),to&&onNavigate?onNavigate(instance,to,data):toMessage&&onAlert&&onAlert(translator(toMessage),null,null,modalContext))}catch(error){let computedFailTo=failTo;if(error instanceof Error&&log.error(`AsyncLink: ${error}`),instance&&instance.setState({loading:!1,message:null}),!1===error)return;if(onFailure&&onFailure(name,error),!1===error)return;let errorData=error;const errorCategory=getErrorCategory(error.errorCode||error),knockoutPath=errorCategory.knockoutPath,errorProps=_objectWithoutProperties(errorCategory,["knockoutPath"]);knockoutPath&&(computedFailTo=knockoutPath),_.isEmpty(errorProps)||(errorData={...errorProps,error:error}),computedFailTo&&onNavigate?onNavigate(instance,computedFailTo,errorData):failToMessage&&onAlert&&onAlert(translator(failToMessage),null,null,modalContext)}}export function checkActionIntegrity(events,props,context){events&&props&&context&&events.forEach((evt=>{const actionProps=props[evt];if(actionProps){if(_.isString(actionProps.function))return void log.error(`Could not resolve action function: "${actionProps.function}". Check return from "getActionFunctions()"`);if(actionProps.function&&actionProps.args){const missing=actionProps.args.reduce(((list,prop)=>(Object.prototype.hasOwnProperty.call(context,prop)||list.push(prop),list)),[]);0!==missing.length&&log.error(`Could not resolve action function arguments from action context: "${actionProps.name}(${missing})". Check return from "getActionContext()"`)}}}))}