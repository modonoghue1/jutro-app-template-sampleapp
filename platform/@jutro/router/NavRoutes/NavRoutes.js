import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useContext}from"react";import{Switch,Route,Redirect,useLocation}from"react-router-dom";import PropTypes from"prop-types";import{warning}from"@jutro/logger";import{TranslatorContext}from"@jutro/locale";import{sanitizeUrl}from"@jutro/platform";import{PageTitle}from"../pageHead/PageTitle";import{resolveComponentFromMap}from"../resolveComponentFromMap";export const NavRoutes=({routes:routes,resolveComponentMap:resolveComponentMap,resolveComponent:resolveComponentCallback})=>{const translator=useContext(TranslatorContext),search=useLocation().search,routesArray=Array.isArray(routes)?routes:routes.routes;return React.createElement(Switch,null,null==routesArray?void 0:routesArray.map((function renderNavRoute(routeProps){return routeProps.routes?routeProps.routes.map(renderNavRoute):routeProps.redirect?function({redirect:redirect,title:title,showOnNavBar:showOnNavBar,...other}){return React.createElement(Route,_extends({key:redirect||title},other,{render:()=>React.createElement(Redirect,{to:sanitizeUrl(`${redirect}${search}`)})}))}(routeProps):routeProps.component?function(routeProps){const component=routeProps.component,_routeProps$component=routeProps.componentProps,componentProps=void 0===_routeProps$component?{}:_routeProps$component,title=(routeProps.navLink,routeProps.title),other=(routeProps.showOnNavBar,_objectWithoutProperties(routeProps,["component","componentProps","navLink","title","showOnNavBar"])),ResolvedComponent=resolveComponentCallback(component,resolveComponentMap);return React.createElement(Route,_extends({key:other.path||title},other),React.createElement(React.Fragment,null,React.createElement(PageTitle,{title:translator(title)}),React.createElement(ResolvedComponent,componentProps)))}(routeProps):void(routeProps.href||warning("Either redirect, component or href (for external links) must be provided for every route definition"))})))};NavRoutes.propTypes={routes:PropTypes.arrayOf(PropTypes.object).isRequired,resolveComponentMap:PropTypes.object.isRequired,resolveComponent:PropTypes.func},NavRoutes.defaultProps={resolveComponent:resolveComponentFromMap},NavRoutes.__docgenInfo={description:"",methods:[],displayName:"NavRoutes",props:{resolveComponent:{defaultValue:{value:"resolveComponentFromMap",computed:!0},type:{name:"func"},required:!1,description:"Optional callback function to resolve component; const Component = resolveComponent(componentName, componentMap)"},routes:{type:{name:"arrayOf",value:{name:"object"}},required:!0,description:"Routing metadata object"},resolveComponentMap:{type:{name:"object"},required:!0,description:"Map of component name to component classes (required if using route metadata in json files)"}}},NavRoutes.__docgenInfo={componentName:"NavRoutes",packageName:"@jutro/router",description:"",displayName:"NavRoutes",methods:[],actualName:"NavRoutes",props:{routes:{type:{name:"arrayOf",value:{name:"object"}},required:!0,description:"Routing metadata object"},resolveComponentMap:{type:{name:"object"},required:!0,description:"Map of component name to component classes (required if using route metadata in json files)"},resolveComponent:{type:{name:"func"},required:!1,description:"Optional callback function to resolve component; const Component = resolveComponent(componentName, componentMap)",defaultValue:{value:"resolveComponentFromMap",computed:!0}}}};