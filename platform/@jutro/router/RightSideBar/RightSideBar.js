import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useContext,useState,useMemo,useEffect}from"react";import cx from"classnames";import PropTypes from"prop-types";import{Collapse,IconButton}from"@jutro/components";import{Flex,FlexItem}from"@jutro/layout";import{TranslatorContext}from"@jutro/locale";import{sideContentShape}from"@jutro/prop-types";import styles from"./RightSideBar.module.css";import{SideBody}from"./SideBody/SideBody";import{IconsBar}from"./IconsBar/IconsBar";import{messages}from"./RightSideBar.messages";import{resolveComponentFromMap}from"../resolveComponentFromMap";import{RightSideBarContext}from"./RightSideBarContext";export const RightSideBar=({className:className,collapsible:collapsible,isInitiallyCollapsed:isInitiallyCollapsed,sides:sides,componentMap:componentMap,expandOverContent:expandOverContent})=>{const _useContext=useContext(RightSideBarContext),collapseExternalState=_useContext.collapse,sidesExternalState=_useContext.sides,_useState=useState(isInitiallyCollapsed),_useState2=_slicedToArray(_useState,2),isCollapsedInternal=_useState2[0],setIsCollapsedInternal=_useState2[1],_useState3=useState(0),_useState4=_slicedToArray(_useState3,2),activeSideInternal=_useState4[0],setActiveSideInternal=_useState4[1];useEffect((()=>{setIsCollapsedInternal(isInitiallyCollapsed)}),[isInitiallyCollapsed]);const isCollapsed=(null==collapseExternalState?void 0:collapseExternalState.isCollapsed)||isCollapsedInternal,setIsCollapsed=(null==collapseExternalState?void 0:collapseExternalState.setIsCollapsed)||setIsCollapsedInternal,activeSide=(null==sidesExternalState?void 0:sidesExternalState.activeSide)||activeSideInternal,setActiveSide=(null==sidesExternalState?void 0:sidesExternalState.setActiveSide)||setActiveSideInternal,translator=useContext(TranslatorContext),classes=cx(styles.rightSideBar,className),showIconsBar=sides.length>1,showBar=collapsible||showIconsBar,renderedContents=useMemo((()=>sides.map(((side,index)=>{const _ref=side||{},component=_ref.component,_ref$componentProps=_ref.componentProps,componentProps=void 0===_ref$componentProps?{}:_ref$componentProps,id=_ref.id,sideId=null!=id?id:index,ResolvedComponent=resolveComponentFromMap(component,componentMap),sideClassName=cx({[styles.hiddenSide]:sideId!==activeSide});return React.createElement(SideBody,{id:`right-side-panel-${sideId}`,className:sideClassName,"aria-labelledby":`right-side-icon-tab-${sideId}`,key:`side-${sideId}`},React.createElement(ResolvedComponent,componentProps))}))),[sides,componentMap,activeSide]),footer=collapsible&&React.createElement(FlexItem,{className:styles.footer},React.createElement(IconButton,{icon:isCollapsed?"gw-chevron-left":"gw-chevron-right",onClick:()=>{setIsCollapsed(!isCollapsed)},ariaLabel:translator(isCollapsed?messages.collapsedButtonLabel:messages.expandedButtonLabel)})),collapseOuterContentWrapperClasses=cx({[styles.collapseOuterContentWrapper]:!isCollapsed});return React.createElement(Flex,{gap:"none",className:classes,wrap:!1},React.createElement(FlexItem,null,React.createElement(Collapse,{isOpen:!isCollapsed,timeout:250,isHorizontal:!0,isReversed:!0,expandOverContent:!!expandOverContent,outerContentWrapperClassName:collapseOuterContentWrapperClasses,contentWrapperClassName:styles.contentWrapper},renderedContents)),showBar&&React.createElement(Flex,{direction:"column",className:styles.bar,gap:"none",justifyContent:"bottom"},sides.length>1&&React.createElement(IconsBar,{sides:sides,activeSide:activeSide,onSelection:sideIndex=>{sideIndex===activeSide?setIsCollapsed(!isCollapsed):(setActiveSide(sideIndex),isCollapsed&&setIsCollapsed(!1))},className:styles.icons}),footer))};const rightSideBarPropTypes={className:PropTypes.string,collapsible:PropTypes.bool,isInitiallyCollapsed:PropTypes.bool,sides:PropTypes.arrayOf(sideContentShape.isRequired).isRequired,componentMap:PropTypes.objectOf(PropTypes.elementType.isRequired),expandOverContent:PropTypes.bool};RightSideBar.propTypes=rightSideBarPropTypes,RightSideBar.defaultProps={collapsible:!0,isInitiallyCollapsed:!1},RightSideBar.__docgenInfo={description:"The `RightSideBar` component is designed as a container for 'IconsBar' and \"SideBody\"\n\n@metadataType container",methods:[],displayName:"RightSideBar",props:{collapsible:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Defines whether component can be collapsed"},isInitiallyCollapsed:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"Default state for RightSideBar"},className:{type:{name:"string"},required:!1,description:"Additional class names for component."},sides:{type:{name:"arrayOf",value:{name:"custom",raw:"sideContentShape.isRequired"}},required:!0,description:"Array of contents and icons to display"},componentMap:{type:{name:"objectOf",value:{name:"elementType"}},required:!1,description:"Map of component name to component classes"},expandOverContent:{type:{name:"bool"},required:!1,description:"If true, menu will expand over content. If false, content will be squeezed"}}},RightSideBar.__docgenInfo={componentName:"RightSideBar",packageName:"@jutro/router",description:"The `RightSideBar` component is designed as a container for 'IconsBar' and \"SideBody\"",displayName:"RightSideBar",methods:[],actualName:"RightSideBar",metadataType:"container",props:{className:{type:{name:"string"},required:!1,description:"Additional class names for component."},collapsible:{type:{name:"bool"},required:!1,description:"Defines whether component can be collapsed",defaultValue:{value:"true",computed:!1}},isInitiallyCollapsed:{type:{name:"bool"},required:!1,description:"Default state for RightSideBar",defaultValue:{value:"false",computed:!1}},sides:{type:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",description:"Id of side content trigger button",required:!1},label:{name:"custom",raw:"intlMessageShape.isRequired",description:"Label describing the content used for accessibility",required:!0},icon:{name:"string",description:"Icon that will represent the content on the icon bar",required:!1},component:{name:"elementType",description:"Component to render as content",required:!0},componentProps:{name:"shape",value:{},description:"Component props",required:!1}}}},required:!0,description:"Array of contents and icons to display"},componentMap:{type:{name:"objectOf",value:{name:"elementType"}},required:!1,description:"Map of component name to component classes"},expandOverContent:{type:{name:"bool"},required:!1,description:"If true, menu will expand over content. If false, content will be squeezed"}}};