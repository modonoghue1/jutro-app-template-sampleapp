import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{Component}from"react";import PropTypes from"prop-types";import cx from"classnames";import{Button}from"@jutro/components";import{intlMessageShape,intlToShape}from"@jutro/prop-types";import styles from"./AsyncButtonLink.module.css";import{withAsyncAction}from"../AsyncAction/AsyncAction";let AsyncButtonLinkInternal=function(_Component){_inherits(AsyncButtonLinkInternal,Component);var _super=_createSuper(AsyncButtonLinkInternal);function AsyncButtonLinkInternal(){return _classCallCheck(this,AsyncButtonLinkInternal),_super.apply(this,arguments)}return _createClass(AsyncButtonLinkInternal,[{key:"render",value:function(){const _this$props=this.props,className=_this$props.className,onClick=_this$props.onClick,children=_this$props.children,innerRef=_this$props.innerRef,loading=_this$props.loading,props=(_this$props.onTrigger,_this$props.failTo,_objectWithoutProperties(_this$props,["className","onClick","children","innerRef","loading","onTrigger","failTo"])),classes=cx(styles.asyncButtonLink,className);return loading&&delete props.icon,React.createElement(Button,_extends({},props,{onClick:onClick,ref:innerRef,className:classes}),children)}}]),AsyncButtonLinkInternal}();_defineProperty(AsyncButtonLinkInternal,"propTypes",{...Button.propTypes,failTo:intlToShape,failToMessage:PropTypes.string,message:intlMessageShape,replace:PropTypes.bool,to:intlToShape,toMessage:PropTypes.string,onTrigger:PropTypes.func.isRequired,onClick:PropTypes.func,children:PropTypes.oneOfType([PropTypes.node,intlMessageShape]),className:PropTypes.string,innerRef:PropTypes.oneOfType([PropTypes.string,PropTypes.func])}),_defineProperty(AsyncButtonLinkInternal,"defaultProps",{...Button.defaultProps}),_defineProperty(AsyncButtonLinkInternal,"displayName","AsyncButtonLink");export const AsyncButtonLink=withAsyncAction(AsyncButtonLinkInternal);AsyncButtonLinkInternal.__docgenInfo={description:"AsyncButtonLink is a Jutro component,\ndesigned following the principles of Link (React Router 4).\nAsyncButtonLink invokes the trigger and wait for promise to be resolved or rejected.\nMeanwhile the promise is in execution, the component updates its content within the message provided by property {message}\nCase promise has been resolved, AsyncButtonLink attempts to navigate to destination provided by property {to}\nCase promise has been rejected, AsyncButtonLink attempts to navigate to destination provided by property {failTo}\n\n@example\n<AsyncButtonLink\n  to='/dashboard/success'\n  replace\n>\n  Click Me!\n</AsyncButtonLink>\n\n@metadataType action",methods:[],displayName:"AsyncButtonLink",props:{failTo:{type:{name:"custom",raw:"intlToShape"},required:!1,description:"The destination path when promise is rejected; can be an object like <Link to>"},failToMessage:{type:{name:"string"},required:!1,description:"The message shown when promise is rejected; shown if 'failTo' is not provided"},message:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The message shown when executing trigger/promise"},replace:{type:{name:"bool"},required:!1,description:"The replace prop will replace the current entry in the history stack"},to:{type:{name:"custom",raw:"intlToShape"},required:!1,description:"The destination path when promise is resolved; can be an object like <Link to>"},toMessage:{type:{name:"string"},required:!1,description:"The message shown when promise is resolved; shown if 'to' is not provided"},onTrigger:{type:{name:"func"},required:!0,description:"The method used to trigger the promise"},onClick:{type:{name:"func"},required:!1,description:"The method to be called before (instead in case of event.preventDefault been called) built-in onClick handler"},children:{type:{name:"union",value:[{name:"node"},{name:"custom",raw:"intlMessageShape"}]},required:!1,description:"The children elements to render inside of the AsyncLink"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},innerRef:{type:{name:"union",value:[{name:"string"},{name:"func"}]},required:!1,description:"Get ref to the inner rendered <a> or <button>"}},composes:["@jutro/components"]},AsyncButtonLinkInternal.__docgenInfo={componentName:"AsyncButtonLink",packageName:"@jutro/router",description:"AsyncButtonLink is a Jutro component,\ndesigned following the principles of Link (React Router 4).\nAsyncButtonLink invokes the trigger and wait for promise to be resolved or rejected.\nMeanwhile the promise is in execution, the component updates its content within the message provided by property {message}\nCase promise has been resolved, AsyncButtonLink attempts to navigate to destination provided by property {to}\nCase promise has been rejected, AsyncButtonLink attempts to navigate to destination provided by property {failTo}",displayName:"AsyncButtonLink",methods:[],actualName:"AsyncButtonLinkInternal",metadataType:"action",props:{failTo:{type:{name:"custom",raw:"intlToShape"},required:!1,description:"The destination path when promise is rejected; can be an object like <Link to>"},failToMessage:{type:{name:"string"},required:!1,description:"The message shown when promise is rejected; shown if 'failTo' is not provided"},message:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The message shown when executing trigger/promise"},replace:{type:{name:"bool"},required:!1,description:"The replace prop will replace the current entry in the history stack"},to:{type:{name:"custom",raw:"intlToShape"},required:!1,description:"The destination path when promise is resolved; can be an object like <Link to>"},toMessage:{type:{name:"string"},required:!1,description:"The message shown when promise is resolved; shown if 'to' is not provided"},onTrigger:{type:{name:"func"},required:!0,description:"The method used to trigger the promise"},onClick:{type:{name:"func"},required:!1,description:"The method to be called before (instead in case of event.preventDefault been called) built-in onClick handler"},children:{type:{name:"union",value:[{name:"node"},{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}]},required:!1,description:"The children elements to render inside of the AsyncLink"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},innerRef:{type:{name:"union",value:[{name:"string"},{name:"func"}]},required:!1,description:"Get ref to the inner rendered <a> or <button>"}},composes:["@jutro/components"]};