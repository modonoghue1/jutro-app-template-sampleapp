import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React from"react";import PropTypes from"prop-types";import{withRouterAndRef}from"@jutro/platform";import{log}from"@jutro/logger";import cx from"classnames";import{Button}from"@jutro/components";import{intlMessageShape,intlToShape}from"@jutro/prop-types";import{TranslatorContext,getUrlTranslatorAndSanitizer}from"@jutro/locale";import styles from"./ButtonLink.module.css";export let ButtonLinkInternal=function(_React$Component){_inherits(ButtonLinkInternal,_React$Component);var _super=_createSuper(ButtonLinkInternal);function ButtonLinkInternal(...args){var _this;return _classCallCheck(this,ButtonLinkInternal),_this=_super.call(this,...args),_defineProperty(_assertThisInitialized(_this),"translator",_this.context),_defineProperty(_assertThisInitialized(_this),"urlTranslatorAndSanitizer",getUrlTranslatorAndSanitizer(_this.translator)),_defineProperty(_assertThisInitialized(_this),"handleClick",(event=>{const _this$props=_this.props,onClick=_this$props.onClick,target=_this$props.target,href=_this$props.href;if(onClick&&onClick(event),!href&&!(event.defaultPrevented||void 0!==event.button&&0!==event.button||target)){event.preventDefault();const history=_this.props.history;if(!history)return;const _this$props2=_this.props,replace=_this$props2.replace,to=_this$props2.to,safeTo=_this.urlTranslatorAndSanitizer(to,_this.props.allowNoLeadingSlash);replace?history.replace(safeTo):history.push(safeTo)}})),_this}return _createClass(ButtonLinkInternal,[{key:"render",value:function(){const _this$props3=this.props,to=(_this$props3.onClick,_this$props3.replace,_this$props3.to),href=_this$props3.href,innerRef=_this$props3.innerRef,className=_this$props3.className,other=(_this$props3.staticContext,_this$props3.allowNoLeadingSlash,_objectWithoutProperties(_this$props3,["onClick","replace","to","href","innerRef","className","staticContext","allowNoLeadingSlash"]));to||href||log.error('"href" or "to". One of these properties is required for the component ButtonLink. Use "to" for internal routing and "href" for external routing');const classes=cx(styles.buttonLink,className);return React.createElement(Button,_extends({href:href,onClick:this.handleClick},other,{ref:innerRef,className:classes}))}}]),ButtonLinkInternal}(React.Component);_defineProperty(ButtonLinkInternal,"propTypes",{replace:PropTypes.bool,to:intlToShape,href:intlMessageShape,innerRef:PropTypes.oneOfType([PropTypes.string,PropTypes.func,PropTypes.shape({current:PropTypes.instanceOf(Element)})]),children:PropTypes.oneOfType([PropTypes.node,intlMessageShape]),onClick:PropTypes.func,className:PropTypes.string,allowNoLeadingSlash:PropTypes.bool}),_defineProperty(ButtonLinkInternal,"displayName","ButtonLink"),_defineProperty(ButtonLinkInternal,"defaultProps",{...Button.defaultProps,replace:!1,allowNoLeadingSlash:!1}),_defineProperty(ButtonLinkInternal,"contextType",TranslatorContext);export const ButtonLink=withRouterAndRef(ButtonLinkInternal,{refPropName:"innerRef",displayName:"ButtonLink"});ButtonLinkInternal.__docgenInfo={description:"ButtonLink is an Jutro component,\n\n@extends React.Component<{}>\n\n@metadataType action",methods:[{name:"handleClick",docblock:"'onClick' callback to invoke callback and continue navigation\n\n@param {Event} event - event object",modifiers:[],params:[{name:"event",description:"event object",type:{name:"Event"},optional:!1}],returns:null,description:"'onClick' callback to invoke callback and continue navigation"}],displayName:"ButtonLink",props:{replace:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"The replace prop will replace the current entry in the history stack"},allowNoLeadingSlash:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:""},to:{type:{name:"custom",raw:"intlToShape"},required:!1,description:"The destination path when promise is resolved; can be an object like <Link to>.\nUse this for paths internal to the application."},href:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The destination path when promise is resolved;\nUse this for paths external to the application."},innerRef:{type:{name:"union",value:[{name:"string"},{name:"func"},{name:"shape",value:{current:{name:"instanceOf",value:"Element",required:!1}}}]},required:!1,description:"Get ref to the inner rendered <a> or <button>"},children:{type:{name:"union",value:[{name:"node"},{name:"custom",raw:"intlMessageShape"}]},required:!1,description:"The child element wrapped in the component"},onClick:{type:{name:"func"},required:!1,description:"Callback when button is clicked"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"}}},ButtonLinkInternal.__docgenInfo={componentName:"ButtonLink",packageName:"@jutro/router",description:"ButtonLink is an Jutro component,",displayName:"ButtonLink",methods:[{name:"handleClick",docblock:"'onClick' callback to invoke callback and continue navigation\n\n@param {Event} event - event object",modifiers:[],params:[{name:"event",description:"event object",type:{name:"Event"},optional:!1}],returns:null,description:"'onClick' callback to invoke callback and continue navigation"}],actualName:"ButtonLinkInternal",metadataType:"action",props:{replace:{type:{name:"bool"},required:!1,description:"The replace prop will replace the current entry in the history stack",defaultValue:{value:"false",computed:!1}},to:{type:{name:"custom",raw:"intlToShape"},required:!1,description:"The destination path when promise is resolved; can be an object like <Link to>.\nUse this for paths internal to the application."},href:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The destination path when promise is resolved;\nUse this for paths external to the application."},innerRef:{type:{name:"union",value:[{name:"string"},{name:"func"},{name:"shape",value:{current:{name:"instanceOf",value:"Element",required:!1}}}]},required:!1,description:"Get ref to the inner rendered <a> or <button>"},children:{type:{name:"union",value:[{name:"node"},{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}]},required:!1,description:"The child element wrapped in the component"},onClick:{type:{name:"func"},required:!1,description:"Callback when button is clicked"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},allowNoLeadingSlash:{type:{name:"bool"},required:!1,description:"",defaultValue:{value:"false",computed:!1}}}};