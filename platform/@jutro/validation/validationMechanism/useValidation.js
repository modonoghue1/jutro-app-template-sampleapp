import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import{useContext,useState,useRef,useCallback,useEffect,createContext}from"react";import{TranslatorContext}from"@jutro/locale";import isEmpty from"lodash/isEmpty";import isEqual from"lodash/isEqual";import{triggerValidation}from"./triggerValidation";import{fieldRulesFactory}from"../fieldRulesFactory/fieldRulesFactory";import{getMessagesCount,excludeMultiMessageWarningsFromMessages,groupCurrentValidationMessages}from"./messagesFilterUtils";const getPath=(path,formPath)=>formPath?`${formPath}.${path}`:path,emptyContext=createContext({});export const useValidation=({formData:formData,formPath:formPath,formRules:formRules,formInvalidMessage:formInvalidMessage,formMode:formMode="opaque",onValidationChange:onValidationChange,isValidationIgnored:isValidationIgnored},FormContext=emptyContext)=>{const translator=useContext(TranslatorContext),validationPassThru="transparent"===formMode,nestedContext=useContext(FormContext),fieldRules=useRef({}),onIsValidCallbacks=useRef({}),multipleMessagesMap=useRef({}),_useState=useState({}),_useState2=_slicedToArray(_useState,2),formMessages=_useState2[0],setFormMessages=_useState2[1],prevFormData=((value={})=>{const ref=useRef({});return useEffect((()=>{ref.current=value})),ref.current})(formData),_useState3=useState(),_useState4=_slicedToArray(_useState3,2),nestedFormMessages=_useState4[0],setNestedFormMessages=_useState4[1],registerValidation=useCallback(((path,rulesConfig,options,onIsValid)=>{if(isValidationIgnored)return;if(validationPassThru&&null!=nestedContext&&nestedContext.registerValidation){const fullPath=getPath(path,formPath);return void nestedContext.registerValidation(fullPath,rulesConfig,options,onIsValid)}const fullPath=path;if(null!==fieldRules.current){if(isEmpty(rulesConfig))delete fieldRules.current[fullPath];else{const rules=Object.entries(rulesConfig).filter((([,value])=>!!value)).map((([key,value])=>{const _ref=Array.isArray(value)?value:[value],_ref2=_slicedToArray(_ref,2),ruleConfig=_ref2[0],messageOverwrite=_ref2[1];return fieldRulesFactory[key]([ruleConfig,messageOverwrite],options)}));fieldRules.current[fullPath]=rules}onIsValid&&(onIsValidCallbacks.current[fullPath]=onIsValid),null!=options&&options.enableMultipleValidation&&(multipleMessagesMap.current[fullPath]=!!options&&options.enableMultipleValidation)}}),[fieldRules.current,validationPassThru,null==nestedContext?void 0:nestedContext.registerValidation]),notifyParentForm=useCallback(((path,message)=>{setNestedFormMessages((prevMessages=>{const newMessages={...isEmpty(prevMessages)?{}:prevMessages};return message?newMessages[path]=message:delete newMessages[path],newMessages}))}),[setNestedFormMessages]);return useEffect((()=>{if(isValidationIgnored||validationPassThru&&nestedContext)return;const rulesForField=null===fieldRules.current?{}:fieldRules.current,validationMessages=triggerValidation({fieldRules:rulesForField,formRules:formRules,formData:formData,nestedFormMessages:nestedFormMessages,translator:translator,multipleMessagesMap:multipleMessagesMap.current});Object.entries(onIsValidCallbacks.current).forEach((([path,onIsValidCallback])=>{!validationMessages[path]&&formData[path]&&prevFormData[path]!==formData[path]&&onIsValidCallback(formData[path])}));const formMessageObject=excludeMultiMessageWarningsFromMessages(validationMessages);setFormMessages((prevMessages=>isEqual(prevMessages,formMessageObject)?prevMessages:formMessageObject))}),[formData,fieldRules.current,formRules,setFormMessages,nestedFormMessages,validationPassThru,!!nestedContext]),useEffect((()=>{if(isValidationIgnored||validationPassThru&&nestedContext)return;if(!formMessages)return;const groupedMessages=groupCurrentValidationMessages(formMessages),errorMessages=null==groupedMessages?void 0:groupedMessages.error,warningMessages=null==groupedMessages?void 0:groupedMessages.warning,formErrorsCount=getMessagesCount(errorMessages),formWarningsCount=getMessagesCount(warningMessages),areFieldsValid=!(formErrorsCount>0);onValidationChange&&onValidationChange(areFieldsValid,formMessages,formWarningsCount>0);if(!validationPassThru&&nestedContext&&formPath){const message=null!=formInvalidMessage?formInvalidMessage:`${formErrorsCount} fields are invalid`;nestedContext.notifyParentForm&&"string"==typeof formPath&&nestedContext.notifyParentForm(formPath,areFieldsValid?void 0:message)}}),[formMessages,validationPassThru,!!nestedContext,null==nestedContext?void 0:nestedContext.notifyParentForm,formInvalidMessage]),useEffect((()=>{if(isValidationIgnored)return;nestedContext&&formPath&&nestedContext.notifyParentForm&&"string"==typeof formPath&&"function"==typeof nestedContext.notifyParentForm&&nestedContext.notifyParentForm(formPath,void 0)}),[!!nestedContext,formPath]),isValidationIgnored?{}:{registerValidation:registerValidation,notifyParentForm:notifyParentForm,resolveFormValidation:(path,value,id)=>{if(validationPassThru&&null!=nestedContext&&nestedContext.resolveFormValidation){const fullPath=getPath(path,formPath);return nestedContext.resolveFormValidation(fullPath,value,id)}return formMessages&&formMessages[path]}}};