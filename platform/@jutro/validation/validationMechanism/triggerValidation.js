import get from"lodash/get";import isFunction from"lodash/isFunction";import isObject from"lodash/isObject";import isEmpty from"lodash/isEmpty";import uniq from"lodash/uniq";import isUndefined from"lodash/isUndefined";import omitBy from"lodash/omitBy";const getMessageShape=message=>"string"==typeof message?{message:message,type:"error"}:"object"==typeof message&&"message"in message?{...message,message:message.message,type:message.type||"error"}:void 0,getResult=(rule,data,path,translator)=>{if(isFunction(rule)){const result=rule(data,path,translator);return getMessageShape(result)}return getMessageShape(rule)},getAllErrors=(data,path,pathRules,translator)=>{const messages=(Array.isArray(pathRules)?pathRules:[pathRules]).map((rule=>getResult(rule,data,path,translator))).filter((x=>!!x));return isEmpty(messages)?void 0:messages},getFirstError=(data,path,pathRules,translator)=>{const effectiveRules=Array.isArray(pathRules)?pathRules:[pathRules];for(const rule of effectiveRules){const result=getResult(rule,data,path,translator);if(result)return result}},getPaths=rules=>rules?Object.keys(rules):[],makeArray=x=>Array.isArray(x)?x:[x],getGeneralFormValidationCallbacks=(formData,formRules,translator)=>null!=formRules&&formRules["*"]?(({rules:rules,path:path,translator:translator,data:data})=>{const effectiveRules=Array.isArray(rules)?rules:[rules];for(const rule of effectiveRules)if(isFunction(rule)){const result=rule(data,path,translator);if(isObject(result)&&!isEmpty(result))return Object.entries(result).reduce(((acc,[resultPath,resultMessage])=>"object"==typeof resultMessage&&"message"in resultMessage?{...acc,[resultPath]:[{...resultMessage,message:translator(resultMessage.message)}]}:{...acc,[resultPath]:[{message:resultMessage,type:"error"}]}),{})}return{}})({rules:formRules["*"],path:"*",data:formData,translator:translator}):{},getPathCallbackMap=({fieldRules:fieldRules,formRules:formRules,formData:formData,nestedFormMessages:nestedFormMessages,translator:translator})=>{const nestedFormValidationMap=(nestedFormMessages=>isEmpty(nestedFormMessages)||void 0===nestedFormMessages?{}:Object.entries(nestedFormMessages).reduce(((acc,[path,pathMessage])=>({...acc,[path]:[pathMessage]})),{}))(nestedFormMessages),generalFormValidationMap=getGeneralFormValidationCallbacks(formData,formRules,translator),fieldValidationMap=(fieldRules=>getPaths(fieldRules).reduce(((acc,path)=>({...acc,[path]:makeArray(fieldRules[path])})),{}))(fieldRules),formValidationMap=(formRules=>getPaths(formRules).filter((path=>"*"!==path)).reduce(((acc,path)=>({...acc,[path]:makeArray(formRules[path])})),{}))(formRules);return uniq([...Object.keys(generalFormValidationMap),...Object.keys(formValidationMap),...Object.keys(nestedFormValidationMap),...Object.keys(fieldValidationMap)]).reduce(((acc,path)=>({...acc,[path]:[...get(generalFormValidationMap,path,[]),...get(fieldValidationMap,path,[]),...get(formValidationMap,path,[]),...get(nestedFormValidationMap,path,[])]})),{})};export const triggerValidation=({fieldRules:fieldRules,formRules:formRules,formData:formData,nestedFormMessages:nestedFormMessages,translator:translator,multipleMessagesMap:multipleMessagesMap={}})=>{const pathMap=getPathCallbackMap({fieldRules:fieldRules,formRules:formRules,formData:formData,nestedFormMessages:nestedFormMessages,translator:translator}),messages=Object.entries(pathMap).reduce(((acc,[path,pathRules])=>({...acc,[path]:multipleMessagesMap[path]?getAllErrors(get(formData,path),path,pathRules,translator):getFirstError(get(formData,path),path,pathRules,translator)})),{});return omitBy(messages,isUndefined)};