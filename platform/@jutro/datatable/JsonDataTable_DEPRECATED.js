import _extends from"@babel/runtime-corejs3/helpers/extends";import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useCallback,useMemo}from"react";import PropTypes from"prop-types";import{JsonFormValidator,MetadataContent}from"@jutro/uiconfig";import{log}from"@jutro/logger";import{useDeprecationWarning}from"@jutro/platform";import{TableColumn}from"./table/TableColumn";import{DataTable}from"./DataTable";import{ActionColumn}from"./columns/ActionColumn";import{ActionItem}from"./columns/ActionItem";export const columnConfigShape=PropTypes.shape({id:PropTypes.string,type:PropTypes.oneOf(["field","element"]),component:PropTypes.oneOf(["actioncolumn","displaycolumn","fieldcolumn","moneycolumn","radiocolumn","tablecolumn"]),componentProps:TableColumn.propTypes});const jsonDataTablePropTypes={...DataTable.propTypes,callbackMap:PropTypes.object,componentMap:PropTypes.object,data:PropTypes.object,dataSchema:PropTypes.object.isRequired,onDataSchemaExtension:PropTypes.func,onDeleteRow:PropTypes.func,onSaveRow:PropTypes.func,overrideProps:PropTypes.object,showErrors:PropTypes.bool,uiColumns:PropTypes.arrayOf(columnConfigShape),readOnly:PropTypes.bool};export function generateColumnsFromSchema(dataProps,columnType){return Object.entries(dataProps).map((([key,value])=>{const label=value.componentProps.label;return{id:key,type:"field",component:columnType,componentProps:{header:label||key,path:key,textAlign:"left",readOnly:"id"===key}}}))}export function useJsonSchema(dataSchema,onDataSchemaExtension,tableData){const jsonHelper=useMemo((()=>new JsonFormValidator({onDataSchemaExtension:onDataSchemaExtension})),[onDataSchemaExtension]);return[useMemo((()=>jsonHelper.dataProps(dataSchema,tableData,null)),[dataSchema,tableData,jsonHelper])]}export const JsonDataTable=props=>{useDeprecationWarning("JsonDataTable","TableView/ListView/AdaptiveDataView",void 0,"7.0.0");const dataSchema=props.dataSchema,onDataSchemaExtension=props.onDataSchemaExtension,data=props.data,callbackMap=props.callbackMap,componentMap=props.componentMap,uiColumns=props.uiColumns,onDeleteRow=props.onDeleteRow,onSaveRow=props.onSaveRow,readOnly=props.readOnly,dataTableProps=_objectWithoutProperties(props,["dataSchema","onDataSchemaExtension","data","callbackMap","componentMap","uiColumns","onDeleteRow","onSaveRow","readOnly"]),_useJsonSchema=useJsonSchema(dataSchema,onDataSchemaExtension,data&&data[0]||{}),dataProps=_slicedToArray(_useJsonSchema,1)[0],resolveDataProps=useCallback(((id,path)=>{let testProps=dataProps[path];return testProps&&(testProps={...testProps,componentProps:{...testProps.componentProps,fieldDatatype:testProps.datatype}},testProps.componentProps.readOnly&&(testProps.componentProps.renderEditCell=null)),testProps}),[dataProps]),columnMetadata=uiColumns||generateColumnsFromSchema(dataProps,"displaycolumn");uiColumns||log.info("columnMetadata: ",JSON.stringify(columnMetadata,null,2));const columns=React.createElement(MetadataContent,{uiProps:columnMetadata,resolveDataProps:resolveDataProps,resolveCallbackMap:callbackMap,resolveComponentMap:componentMap}),isEditable=!readOnly&&(onSaveRow||onDeleteRow);return React.createElement(DataTable,_extends({},dataTableProps,{data:data,onSaveRow:onSaveRow}),columns,isEditable&&React.createElement(ActionColumn,{id:"actions"},onSaveRow&&React.createElement(ActionItem,{id:"edit",icon:"gw-edit",isEditTrigger:!0}),onDeleteRow&&React.createElement(ActionItem,{id:"delete",icon:"gw-delete",onClick:onDeleteRow})))};JsonDataTable.propTypes=jsonDataTablePropTypes,JsonDataTable.__docgenInfo={description:"DataTable variant allowing to integrate with schema, metadata and data\n\n@type {React.FC<PropTypes.InferProps<typeof jsonDataTablePropTypes>>}\n\n@metadataType container\n@deprecated",methods:[],displayName:"JsonDataTable",props:{callbackMap:{type:{name:"object"},required:!1,description:"Resolve callback string to callback function"},componentMap:{type:{name:"object"},required:!1,description:"Resolve component string to component"},data:{type:{name:"object"},required:!1,description:"Data for this table"},dataSchema:{type:{name:"object"},required:!0,description:"Schema for this form; used for data props and validation"},onDataSchemaExtension:{type:{name:"func"},required:!1,description:"Function to process schema data types with custom attributes"},onDeleteRow:{type:{name:"func"},required:!1,description:"Callback for row deletion"},onSaveRow:{type:{name:"func"},required:!1,description:"Callback for saving the row edit"},overrideProps:{type:{name:"object"},required:!1,description:"optional\nOverride props by all, type or id."},showErrors:{type:{name:"bool"},required:!1,description:"optional\nShow errors for all invalid fields; true after user attempts to submit/perform an action"},uiColumns:{type:{name:"arrayOf",value:{name:"custom",raw:"columnConfigShape"}},required:!1,description:"Array of ui configs for columns"},readOnly:{type:{name:"bool"},required:!1,description:"Indicate if the table should be editable or readOnly"}},composes:["./DataTable"]},JsonDataTable.__docgenInfo={componentName:"JsonDataTable",packageName:"@jutro/datatable",description:"DataTable variant allowing to integrate with schema, metadata and data",displayName:"JsonDataTable",methods:[],actualName:"JsonDataTable",metadataType:"container",props:{callbackMap:{type:{name:"object"},required:!1,description:"Resolve callback string to callback function"},componentMap:{type:{name:"object"},required:!1,description:"Resolve component string to component"},data:{type:{name:"object"},required:!1,description:"Data for this table"},dataSchema:{type:{name:"object"},required:!0,description:"Schema for this form; used for data props and validation"},onDataSchemaExtension:{type:{name:"func"},required:!1,description:"Function to process schema data types with custom attributes"},onDeleteRow:{type:{name:"func"},required:!1,description:"Callback for row deletion"},onSaveRow:{type:{name:"func"},required:!1,description:"Callback for saving the row edit"},overrideProps:{type:{name:"object"},required:!1,description:"optional\nOverride props by all, type or id."},showErrors:{type:{name:"bool"},required:!1,description:"optional\nShow errors for all invalid fields; true after user attempts to submit/perform an action"},uiColumns:{type:{name:"arrayOf",value:{name:"custom",raw:"columnConfigShape"}},required:!1,description:"Array of ui configs for columns"},readOnly:{type:{name:"bool"},required:!1,description:"Indicate if the table should be editable or readOnly"}},composes:["./DataTable"]};