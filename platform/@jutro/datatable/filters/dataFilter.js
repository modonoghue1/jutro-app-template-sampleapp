import{isDate}from"util";import{DEFAULT_SEARCH_KEY}from"../filterBar/utils";const stringExactMatch=(value,filter)=>value.toLowerCase().includes(filter.toLowerCase());export const dataFilter=(data,filters,options={})=>{const _options$searchKey=options.searchKey,searchKey=void 0===_options$searchKey?DEFAULT_SEARCH_KEY:_options$searchKey,_options$formatters=options.formatters,formatters=void 0===_options$formatters?{}:_options$formatters,filterKeys=Object.keys(filters);return data.filter((dataItem=>filterKeys.every((filterKey=>{const filter=filters[filterKey];if(filterKey===searchKey)return Object.entries(dataItem).some((([key,value])=>stringExactMatch(function(key,value,formatters){return formatters[key]?formatters[key](value):value.toString()}(key,value,formatters),filter)));if(Array.isArray(filter))return filter.includes(dataItem[filterKey]);if(null!=filter&&filter.min||null!=filter&&filter.max){const min=filter.min,max=filter.max;return min?max?dataItem[filterKey]>=min&&dataItem[filterKey]<=max:dataItem[filterKey]>=min:dataItem[filterKey]<=max}if(isDate(filter)||"number"==typeof filter)return dataItem[filterKey]===filter;if("function"==typeof filter)return filter(dataItem[filterKey]);if(null!=filter&&filter.startsWith(">")||null!=filter&&filter.startsWith("<")){let prefix=filter[0],rest=filter.substr(1);"="===rest[0]&&(prefix+="=",rest=rest.substr(1));const value=Number(rest);switch(prefix){case"<=":return dataItem[filterKey]<=value;case">=":return dataItem[filterKey]>=value;case">":return dataItem[filterKey]>value;case"<":return dataItem[filterKey]<value;default:return!0}}return"string"!=typeof filter||stringExactMatch(dataItem[filterKey].toString(),filter)}))))};