import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import{useMemo}from"react";import identity from"lodash/identity";import{useControlledReducer,bindActionCreators}from"../helper";import{reducer}from"./reducer";import*as actions from"./actions";export function useSelection(initialState,selectedRows,selectionType,onSelectionChange){const updateState=selectedRows&&(oldState=>({...oldState,rows:selectedRows})),_useControlledReducer=useControlledReducer({reducer:reducer,initialState:initialState,controlledState:withNormalizedRows(updateState,selectionType),onStateChange:function({rows:rows}){onSelectionChange&&rows!==state.rows&&onSelectionChange(rows)},updateInControlledMode:!updateState}),_useControlledReducer2=_slicedToArray(_useControlledReducer,2),state=_useControlledReducer2[0],dispatch=_useControlledReducer2[1],boundActions=useMemo((()=>bindActionCreators(dispatch,actions)),[]);return[state,boundActions]}function withNormalizedRows(updateState=identity,selectionType){return state=>{const _updateState=updateState(state),rows=_updateState.rows;return{..._objectWithoutProperties(_updateState,["rows"]),rows:normalizeSelectedRows(rows,selectionType)}}}function normalizeSelectedRows(selectedRows,selectionType){return"none"===selectionType?[]:"multi"===selectionType?selectedRows:selectedRows.slice(0,1)}