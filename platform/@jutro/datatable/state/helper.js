import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useRef,useCallback,useState}from"react";import isFunction from"lodash/isFunction";export function bindActionCreators(dispatch,actions={}){return Object.entries(actions).reduce(((acc,[name,action])=>({...acc,[name]:(...args)=>dispatch(action(...args))})),{})}export function useControlledReducer({reducer:reducer,initialState:initialState,controlledState:controlledState,onStateChange:onStateChange,updateInControlledMode:updateInControlledMode=!1}){const store=useRef({state:initialState}).current,_useState=useState(0),setState=_slicedToArray(_useState,2)[1],update=useCallback((()=>setState((state=>state+1))),[]);void 0!==controlledState&&(store.state=isFunction(controlledState)?controlledState(store.state):controlledState),store.reducer=reducer,store.dispatch=action=>{const oldState=store.state,newState=store.reducer(oldState,action);newState!==oldState&&(onStateChange&&onStateChange(newState),controlledState&&!updateInControlledMode||(store.state=newState,update()))};const dispatch=useCallback((action=>store.dispatch(action)),[store]);return[store.state,dispatch]}