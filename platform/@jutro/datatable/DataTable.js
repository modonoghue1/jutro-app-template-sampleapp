import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import _extends from"@babel/runtime-corejs3/helpers/extends";import React,{useContext,useState,useCallback,useMemo,useRef,useEffect}from"react";import PropTypes from"prop-types";import ReactTable,{ReactTableDefaults}from"react-table";import _ from"lodash";import{LocaleService,TranslatorContext,sortWithLocale}from"@jutro/locale";import{intlMessageShape}from"@jutro/prop-types";import{useBreakpoint}from"@jutro/layout";import cx from"classnames";import{TransitionGroup}from"react-transition-group";import{Chevron,AnimationGroup,getKeyPressHandler,RadioButton,CheckboxField}from"@jutro/components";import{uniqueInnerId}from"@jutro/platform";import{error,warning}from"@jutro/logger";import{Pagination}from"./Pagination/Pagination";import{SHOW_ALL_PAGES}from"./Pagination/utils";import{TableBar}from"./TableBar";import{defaultColumnFilter}from"./helper";import{useExpansion}from"./state/expansion/useExpansion";import{useSelection}from"./state/selection/useSelection";import{useConfig}from"./state/config/useConfig";import{useAsync}from"./state/async/useAsync";import{useAccessibilityProps}from"./accessibility/useAccessibilityProps";import{TableContext}from"./TableContext";import{RadioColumn}from"./columns/RadioColumn";import{ActionColumn}from"./columns/ActionColumn";import{messages}from"./DataTable.messages";import styles from"./DataTable.module.css";import"react-table/react-table.css";const nonConfigurableColumns=[RadioColumn,ActionColumn],textAlignMapping={left:styles.textLeft,right:styles.textRight},expanderDefaults={...ReactTableDefaults.expanderDefaults,width:28},AnimatedTrGroupComponent=({children:children,...props})=>React.createElement(ReactTableDefaults.TrGroupComponent,props,React.createElement(TransitionGroup,{component:null},children)),transitionGroupProps=["onExited","in","appear","enter","exit"],AnimationResistantTrComponent=({hasActions:hasActions,...props})=>{const a11yProps={};return hasActions&&(a11yProps.tabIndex=0,a11yProps.role="button",a11yProps["aria-label"]="row"),React.createElement(ReactTableDefaults.TrComponent,_extends({},a11yProps,_.omit(props,transitionGroupProps)))},splitHeaderText=text=>React.createElement("span",{className:styles.headerMultiline},text),renderNull=()=>null,ignoredClickTargets=["INPUT","BUTTON","A","LABEL","SELECT","I"],handleNestedClick=(event,callback)=>{const currentTarget=event.target;currentTarget&&ignoredClickTargets.includes(currentTarget.tagName)||callback(event)},DEFAULT_CONFIG={filterValue:"",page:0,pageSize:10},findById=id=>({id:configId})=>id===configId,orderColumnsUsingConfig=config=>(columnA,columnB)=>{const aInitialIndex=config.findIndex(findById(columnA.props.id)),bInitialIndex=config.findIndex(findById(columnB.props.id));return-1===aInitialIndex||-1===bInitialIndex?0:aInitialIndex-bInitialIndex},getAsyncParams=params=>_.pick(params,["page","pageSize","sorted","filterValue"]),getTbodyProps=()=>({className:styles.tableBody}),dataTableConfigColumnsShape=PropTypes.arrayOf(PropTypes.shape({id:PropTypes.string.isRequired,enabled:PropTypes.bool.isRequired})),dataTableConfigColumnsSortedShape=PropTypes.arrayOf(PropTypes.shape({id:PropTypes.string.isRequired,desc:PropTypes.bool.isRequired})),dataTableConfigShape=PropTypes.shape({editedRow:PropTypes.number,columns:dataTableConfigColumnsShape,filterValue:PropTypes.string,page:PropTypes.number,pageSize:PropTypes.number,sorted:dataTableConfigColumnsSortedShape}),rowIdShape=PropTypes.oneOfType([PropTypes.number,PropTypes.string]),dataTablePropTypes={id:PropTypes.string.isRequired,showSearch:PropTypes.bool,showPagination:PropTypes.bool,config:dataTableConfigShape,defaultConfig:dataTableConfigShape,onConfigChange:PropTypes.func,pageSizeOptions:PropTypes.arrayOf(PropTypes.number),data:PropTypes.arrayOf(PropTypes.object),onFilter:PropTypes.func,onColumnFilter:PropTypes.func,filterPlaceholder:intlMessageShape,children:PropTypes.node.isRequired,expandable:PropTypes.bool,multipleRowsExpandable:PropTypes.bool,renderExpanderContent:PropTypes.func,headerMultiline:PropTypes.bool,onRowClick:PropTypes.func,expandOnRowClick:PropTypes.bool,selectOnRowClick:PropTypes.bool,selectionType:PropTypes.oneOf(["none","single","multi"]),selectedRows:PropTypes.arrayOf(rowIdShape),selectionActions:PropTypes.arrayOf(PropTypes.shape({icon:PropTypes.string.isRequired,label:PropTypes.string.isRequired,callback:PropTypes.func.isRequired})),onSelectionChange:PropTypes.func,columnsConfigurable:PropTypes.bool,loadingText:intlMessageShape,noDataText:intlMessageShape,localSorting:PropTypes.bool,phone:PropTypes.object,phoneWide:PropTypes.object,tablet:PropTypes.object,onSaveRow:PropTypes.func,onEditCancel:PropTypes.func,onEditStart:PropTypes.func,path:PropTypes.string,onFetchData:PropTypes.func,onGetRowId:PropTypes.func,rowIdPath:PropTypes.string,tableLabel:intlMessageShape,numberOfRows:PropTypes.number};export const DataTable=dataTableProps=>{const _useBreakpoint=useBreakpoint(dataTableProps,!0),breakpointProps=_useBreakpoint.breakpointProps,applyBreakpoint=_useBreakpoint.applyBreakpoint,breakpoint=_useBreakpoint.breakpoint,id=breakpointProps.id,showSearch=breakpointProps.showSearch,showPagination=breakpointProps.showPagination,pageSizeOptions=breakpointProps.pageSizeOptions,syncData=breakpointProps.data,onFilter=breakpointProps.onFilter,onColumnFilter=breakpointProps.onColumnFilter,defaultConfigProp=breakpointProps.defaultConfig,config=breakpointProps.config,filterPlaceholder=breakpointProps.filterPlaceholder,children=breakpointProps.children,onConfigChange=breakpointProps.onConfigChange,onSaveRow=breakpointProps.onSaveRow,onEditCancel=breakpointProps.onEditCancel,onEditStart=breakpointProps.onEditStart,expandable=breakpointProps.expandable,multipleRowsExpandable=breakpointProps.multipleRowsExpandable,renderExpanderContent=breakpointProps.renderExpanderContent,basePath=breakpointProps.path,headerMultiline=breakpointProps.headerMultiline,onRowClick=breakpointProps.onRowClick,expandOnRowClick=breakpointProps.expandOnRowClick,selectOnRowClick=breakpointProps.selectOnRowClick,selectionType=breakpointProps.selectionType,onGetRowIdProp=breakpointProps.onGetRowId,rowIdPath=breakpointProps.rowIdPath,selectedRows=breakpointProps.selectedRows,selectionActions=breakpointProps.selectionActions,onSelectionChange=breakpointProps.onSelectionChange,onFetchData=breakpointProps.onFetchData,columnsConfigurable=breakpointProps.columnsConfigurable,loadingText=breakpointProps.loadingText,noDataText=breakpointProps.noDataText,localSorting=breakpointProps.localSorting,tableLabel=breakpointProps.tableLabel,numberOfRowsProp=breakpointProps.numberOfRows,defaultConfig=(defaultConfig=>{const previousRef=useRef(),previous=previousRef.current,next=useMemo((()=>({...DEFAULT_CONFIG,...defaultConfig})),[defaultConfig]),isEqual=_.isEqual(previous,next);return useEffect((()=>{isEqual||(previousRef.current=next)})),isEqual?previous:next})(defaultConfigProp),onGetRowId=useMemo((()=>rowIdPath?row=>_.get(row,rowIdPath):onGetRowIdProp),[onGetRowIdProp,rowIdPath]),childrenArray=React.Children.toArray(children),reactTable=useRef(),shouldShowSearch=!1!==showSearch,shouldShowPagination=!1!==showPagination,shouldBeExpandable=expandable&&!!renderExpanderContent,shouldBeSelectable="none"!==selectionType,translator=useContext(TranslatorContext),language=LocaleService.getStoredLanguage(),_useExpansion=useExpansion(),_useExpansion2=_slicedToArray(_useExpansion,2),expandedRows=_useExpansion2[0],_useExpansion2$=_useExpansion2[1],collapse=_useExpansion2$.collapse,toggleExpansion=_useExpansion2$.toggle,collapseAll=_useExpansion2$.collapseAll,_useSelection=useSelection({all:!1,rows:selectedRows||[]},selectedRows,selectionType,onSelectionChange),_useSelection2=_slicedToArray(_useSelection,2),selectedState=_useSelection2[0],_useSelection2$=_useSelection2[1],selectRow=_useSelection2$.select,toggleSelection=_useSelection2$.toggle,setAll=_useSelection2$.setAll,clearAll=_useSelection2$.clearAll,_useAsync=useAsync(),_useAsync2=_slicedToArray(_useAsync,2),_useAsync2$=_useAsync2[0],asyncData=_useAsync2$.asyncData,loading=_useAsync2$.loading,totalNumberOfRows=_useAsync2$.numberOfRows,asyncActions=_useAsync2[1],data=onFetchData?asyncData:syncData,getEditProps=rowId=>void 0!==rowId?{rowId:rowId,row:data.find(((row,index)=>onGetRowId(row,index)===rowId))}:{},_useState=useState(getEditProps((null==config?void 0:config.editedRow)||defaultConfig.editedRow)),_useState2=_slicedToArray(_useState,2),editProps=_useState2[0],setEditProps=_useState2[1],updateEditedRow=rowId=>setEditProps(getEditProps(rowId)),initialColumnsConfig=useMemo((()=>{var _config$columns;const initialConfig=null!==(_config$columns=null==config?void 0:config.columns)&&void 0!==_config$columns?_config$columns:defaultConfig.columns,withInitialConfig=null==initialConfig?void 0:initialConfig.length;return childrenArray.length?(withInitialConfig&&childrenArray.sort(orderColumnsUsingConfig(initialConfig)),childrenArray.map((childColumn=>{const columnChildId=childColumn.props.id,type=childColumn.type;if(nonConfigurableColumns.includes(type))return;const columnConfig={id:columnChildId,enabled:!0};if(withInitialConfig){const initialColumnConfig=initialConfig.find((({id:configId})=>columnChildId===configId));columnConfig.enabled=((config={})=>{var _config$enabled;return null===(_config$enabled=config.enabled)||void 0===_config$enabled||_config$enabled})(initialColumnConfig)}return columnConfig})).filter(Boolean)):[]}),[childrenArray,config,defaultConfig]),_useConfig=useConfig({...defaultConfig,columns:initialColumnsConfig},config&&(()=>(config.editedRow!==(null==editProps?void 0:editProps.rowId)&&updateEditedRow(config.editedRow),{...config,columns:initialColumnsConfig})),onConfigChange),_useConfig2=_slicedToArray(_useConfig,2),_useConfig2$=_useConfig2[0],filterValue=_useConfig2$.filterValue,pageSizeSelectedOption=_useConfig2$.pageSize,page=_useConfig2$.page,sorted=_useConfig2$.sorted,columns=_useConfig2$.columns,editedRow=_useConfig2$.editedRow,_useConfig2$2=_useConfig2[1],setFilterValue=_useConfig2$2.setFilterValue,setPageSize=_useConfig2$2.setPageSize,setPage=_useConfig2$2.setPage,setSorted=_useConfig2$2.setSorted,setColumns=_useConfig2$2.setColumns,setEditedRow=_useConfig2$2.setEditedRow,_useAccessibilityProp=useAccessibilityProps({selectionType:selectionType,isExpandable:expandable&&renderExpanderContent,tableId:id,sorted:sorted,tableLabel:translator(tableLabel)}),getA11yTrGroupProps=_useAccessibilityProp.getA11yTrGroupProps,getA11yTrProps=_useAccessibilityProp.getA11yTrProps,getA11yTableProps=_useAccessibilityProp.getA11yTableProps,getA11yTheadThPropsHeader=_useAccessibilityProp.getA11yTheadThPropsHeader,getA11yTheadThPropsSortableHeader=_useAccessibilityProp.getA11yTheadThPropsSortableHeader,getA11yTdProps=_useAccessibilityProp.getA11yTdProps,isEdited=useCallback((rowId=>editedRow===rowId),[editedRow]),editActions={start:(row,index)=>{const rowId=onGetRowId(row,index);onEditStart&&onEditStart(row,rowId),setEditedRow(rowId),updateEditedRow(rowId),collapse(rowId)},update:(_row,path,newValue)=>{setEditProps((oldEditProps=>({...oldEditProps,row:{...oldEditProps.row,[path]:newValue}})))},cancel:()=>{onEditCancel&&onEditCancel(editProps.row,editProps.rowId),setEditedRow(),updateEditedRow()},save:()=>{onSaveRow&&onSaveRow(editProps.row,editProps.rowId),setEditedRow(),updateEditedRow()}},_useState3=useState(null),_useState4=_slicedToArray(_useState3,2),pressedRowId=_useState4[0],setPressedRowId=_useState4[1],handleExpand=useCallback(((rowId,viewIndex)=>!isEdited(rowId)&&toggleExpansion(rowId,viewIndex,multipleRowsExpandable)),[isEdited,multipleRowsExpandable,toggleExpansion]),filterFunction=useMemo((()=>onFilter||(value=>{const valueFilters=childrenArray.map((({props:props})=>(props.onFilter||onColumnFilter||defaultColumnFilter)(value,props)));return(item,index,tableData)=>valueFilters.some((valueFilter=>valueFilter(item,index,tableData)))})),[onFilter,childrenArray,onColumnFilter]),contextColumnsConfig=useMemo((()=>columns.map((columnConfig=>{const childColumn=childrenArray.find((({props:{id:columnChildId}})=>columnConfig.id===columnChildId));return{...columnConfig,header:childColumn.props.header}}))),[childrenArray,columns]),tableContext=useMemo((()=>({styles:styles,columns:{configurable:columnsConfigurable,config:contextColumnsConfig,...columnsConfigurable&&{setConfig:setColumns}}})),[columnsConfigurable,contextColumnsConfig,setColumns]),filteredData=useMemo((()=>data&&children?shouldShowSearch&&filterValue?data.filter(filterFunction(filterValue)):data:[]),[shouldShowSearch,data,children,filterFunction,filterValue]),numberOfRows=onFetchData?totalNumberOfRows:numberOfRowsProp||filteredData.length,pageSize=useMemo((()=>shouldShowPagination&&pageSizeSelectedOption!==SHOW_ALL_PAGES?pageSizeSelectedOption:numberOfRows),[shouldShowPagination,pageSizeSelectedOption,numberOfRows]),Expander=useCallback((({isExpanded:isExpanded,row:row,index:index,viewIndex:viewIndex})=>React.createElement(Chevron,{isOpen:isExpanded,className:styles.expanderIcon,tabIndex:"0",role:"button",messageProps:{label:isExpanded?messages.expandedRowLabel:messages.collapsedRowLabel},onMouseDown:event=>{event.preventDefault()},onKeyPress:getKeyPressHandler((()=>toggleExpansion(onGetRowId(row,index),viewIndex,multipleRowsExpandable)))})),[toggleExpansion,multipleRowsExpandable,onGetRowId]),getExpandRowActions=useCallback((({index:index,viewIndex:viewIndex,row:row})=>shouldBeExpandable&&expandOnRowClick&&(()=>handleExpand(onGetRowId(row,index),viewIndex))),[expandOnRowClick,handleExpand,shouldBeExpandable,onGetRowId]),SelectionHeader=useMemo((()=>{if("multi"===selectionType)return()=>React.createElement(CheckboxField,{id:`${id}-select-all`,"aria-label":translator(messages.selectAllRows),onValueChange:value=>{if(value){const allRows=reactTable.current.getResolvedState().sortedData,startIndex=page*pageSize,visibleRows=allRows.slice(startIndex,startIndex+pageSize).map((({_original:_original,_index:_index})=>onGetRowId(_original,_index)));setAll(visibleRows)}else clearAll()},value:selectedState.all})}),[id,pageSize,page,selectionType,selectedState.all,clearAll,setAll,onGetRowId]),SelectionCell=useMemo((()=>{if("none"!==selectionType)return"single"===selectionType?({index:index,viewIndex:viewIndex,original:row})=>{const rowId=onGetRowId(row,index);return React.createElement(RadioButton,{id:`${id}-select-${viewIndex}`,"aria-label":translator(messages.selectOneRow,{rowNumber:rowId}),option:{code:rowId},onValueChange:()=>selectRow(rowId),value:`${selectedState.rows[0]}`,className:styles.radio,tabIndex:0})}:({index:index,viewIndex:viewIndex,original:row})=>{const rowId=onGetRowId(row,index);return React.createElement(CheckboxField,{id:`${id}-select-${viewIndex}`,"aria-label":translator(messages.selectOneRow,{rowNumber:rowId}),onValueChange:()=>toggleSelection(rowId),value:selectedState.rows.includes(rowId)})}}),[id,selectionType,selectedState.rows,selectRow,toggleSelection,onGetRowId]),shouldDisableActions=selectedState.rows.length>1,columnsArray=useMemo((()=>{let visibleColumns=childrenArray;null!=columns&&columns.length&&(visibleColumns=visibleColumns.filter((({props:{id:colId}})=>{var _columnConfig$enabled;const columnConfig=columns.find((({id:configId})=>colId===configId));return null===(_columnConfig$enabled=null==columnConfig?void 0:columnConfig.enabled)||void 0===_columnConfig$enabled||_columnConfig$enabled})).sort(orderColumnsUsingConfig(columns)));const childrenColumns=visibleColumns.map((({props:props,type:type},columnIndex)=>{const _applyBreakpoint=applyBreakpoint(props),cell=_applyBreakpoint.cell,renderCell=_applyBreakpoint.renderCell,renderEditCell=_applyBreakpoint.renderEditCell,getRowActions=_applyBreakpoint.getRowActions,columnClassName=_applyBreakpoint.columnClassName,rest=_objectWithoutProperties(_applyBreakpoint,["cell","renderCell","renderEditCell","getRowActions","columnClassName"]),childId=rest.id,header=rest.header,renderHeader=rest.renderHeader,textAlign=rest.textAlign,visible=rest.visible,headerClassName=rest.headerClassName,cellClassName=rest.cellClassName,columnProportion=rest.columnProportion,width=rest.width,sortable=rest.sortable,readOnly=rest.readOnly,editCellClass=rest.editCellClass,path=rest.path,onSort=rest.onSort,onAccessor=rest.onAccessor,cellCallback=cell||renderCell,editCellCallback=renderEditCell,propsToCallback={...rest,basePath:basePath,translator:translator,disableActions:shouldDisableActions,breakpoint:breakpoint},Cell=cellCallback&&(({original:original,index:index})=>{const rowId=onGetRowId(original,index);return!readOnly&&editCellCallback&&isEdited(rowId)?editCellCallback({props:propsToCallback,editProps:{...editProps,index:index},editActions:editActions}):cellCallback(original,rowId,propsToCallback,editActions.start)}),headerText=translator(header),headerFunction=renderHeader||(headerMultiline?splitHeaderText:_.identity);return{id:childId||columnIndex,type:"ActionColumn"===(null==type?void 0:type.name)?"actions":"display",Header:()=>headerFunction(headerText),Cell:Cell,className:cx(textAlignMapping[textAlign],columnClassName,cellClassName),headerClassName:cx(textAlignMapping[textAlign],{[styles.headerOneLine]:!headerMultiline},headerClassName),show:void 0===visible||visible,minWidth:columnProportion,width:width,sortable:sortable,readOnly:readOnly,editCellClass:editCellClass,textAlign:textAlign,accessor:onAccessor||path,header:headerText,getRowActions:getRowActions,props:rest,sortMethod:onSort}})),selectionClassName=cx(styles.selectionCell,{[styles.serviceCell]:shouldBeExpandable}),expanderClassName=cx(styles.expanderCell,{[styles.serviceCell]:shouldBeSelectable});return[shouldBeSelectable&&{id:"selection",type:`${selectionType}_selection`,Header:SelectionHeader,Cell:SelectionCell,sortable:!1,resizable:!1,minWidth:44,width:44,textAlign:"center",headerClassName:selectionClassName,className:selectionClassName},shouldBeExpandable&&{id:"expander",type:"expander",expander:!0,readOnly:!0,getRowActions:getExpandRowActions,Expander:Expander,className:expanderClassName,isEdited:isEdited,width:28,minWidth:28}].filter(Boolean).concat(childrenColumns)}),[childrenArray,columns,shouldBeExpandable,shouldBeSelectable,SelectionHeader,SelectionCell,getExpandRowActions,Expander,isEdited,applyBreakpoint,basePath,shouldDisableActions,breakpoint,translator,headerMultiline,editActions,editProps,onGetRowId]),getTrProps=useCallback(((item,row)=>{const rowColumns=item.columns,original=row.original,index=row.index,viewIndex=row.viewIndex,rowClickAction=onRowClick&&(event=>onRowClick(original,index,event)),availableActions=_.flatten([rowClickAction,...rowColumns.map((({getRowActions:getRowActions,props:props})=>getRowActions&&getRowActions({row:original,index:index,viewIndex:viewIndex,props:props,onEditStart:editActions.start,selectOnRowClick:selectOnRowClick,expandOnRowClick:expandOnRowClick})))]).filter(Boolean),rowId=onGetRowId(original,index),hasActions=availableActions.length,isRowPressed=pressedRowId===rowId,isRowSelected=selectedState.rows.includes(rowId),isRowEdited=isEdited(rowId),actionsHandler=event=>{event.target===event.currentTarget&&event.preventDefault(),availableActions.forEach((action=>handleNestedClick(event,action)))},getRowPressHandler=callback=>event=>{" "!==event.key&&"Enter"!==event.key||handleNestedClick(event,callback)},props={hasActions:hasActions,className:cx(styles.tableRow,{[styles.clickableRow]:hasActions,[styles.activeRow]:isRowPressed,[styles.selectedRow]:isRowSelected,[styles.editedRow]:isRowEdited}),...getA11yTrProps()};return hasActions&&(props.onClick=actionsHandler,props.onKeyPress=getRowPressHandler(actionsHandler),props.onKeyDown=getRowPressHandler((()=>pressedRowId!==rowId&&setPressedRowId(rowId))),props.onKeyUp=getRowPressHandler((()=>setPressedRowId(null)))),props}),[editActions.start,expandOnRowClick,onRowClick,pressedRowId,selectOnRowClick,selectedState.rows,onGetRowId,getA11yTrProps,isEdited]),getTdProps=useCallback(((state,row,{readOnly:readOnly,textAlign:textAlign,editCellClass:editCellClass,type:type,id:columnId})=>{const index=row.index,viewIndex=row.viewIndex,original=row.original,rowId=onGetRowId(original,index),edited=isEdited(rowId),isExpander="expander"===type,shouldBeFocusable="display"!==type;return{className:cx(styles.tableCell,{[editCellClass]:editCellClass&&!readOnly&&edited,[styles.rightAlignCell]:"right"===textAlign,disabled:isExpander&&edited}),onClick:isExpander&&(()=>handleExpand(rowId,viewIndex)),...getA11yTdProps(state,row,columnId,shouldBeFocusable)}}),[isEdited,handleExpand,onGetRowId,getA11yTdProps]),getHeaderCellProps=useCallback(((_props,_columnInfo,column)=>{const sortable=void 0===column.sortable||column.sortable,sharedProps={className:cx(styles.tableHeaderCell,{[styles.unsortedHeaderCell]:!sortable}),title:column.header};return sortable?{...sharedProps,...getA11yTheadThPropsSortableHeader(_props,column.id,column.type)}:{...sharedProps,pointerEvents:"none",...getA11yTheadThPropsHeader(_props,column.id,column.type)}}),[getA11yTheadThPropsSortableHeader,getA11yTheadThPropsHeader]),defaultSortMethod=useCallback(((a,b)=>sortWithLocale(language)(normalize(a),normalize(b))),[language]),tbodyProps=0===numberOfRows&&{TbodyComponent:()=>React.createElement("div",{className:styles.noDataMessage},translator(noDataText))},handleAsyncDataChange=useCallback((async asyncConfigs=>{var _reactTable$current;const setAsyncData=asyncActions.setAsyncData,setLoading=asyncActions.setLoading,reactTableState=null==reactTable||null===(_reactTable$current=reactTable.current)||void 0===_reactTable$current?void 0:_reactTable$current.state,asyncParams={...getAsyncParams(reactTableState),...getAsyncParams(asyncConfigs)};try{setLoading(!0);const fetchedData=await onFetchData(asyncParams);setAsyncData(fetchedData.rows,fetchedData.numberOfRows)}catch(err){error(`Failed to fetch data, ${err}`)}finally{setLoading(!1)}}),[asyncActions,onFetchData]),debounceFilter=useCallback(_.debounce((newFilterValue=>{handleAsyncDataChange({filterValue:newFilterValue,page:0})}),500),[handleAsyncDataChange]),modeProps=onFetchData?{data:data,loading:loading,filterValue:filterValue,loadingText:translator(loadingText)}:{sorted:sorted,defaultSortMethod:defaultSortMethod,page:page},isSortedOnServer=onFetchData&&!localSorting,isControlledMode=!onFetchData&&void 0!==numberOfRowsProp,handleSortedChange=useCallback((newSortedValue=>{setSorted(newSortedValue,isSortedOnServer||isControlledMode),collapseAll(),isSortedOnServer&&handleAsyncDataChange({sorted:newSortedValue,page:0})}),[setSorted,isSortedOnServer,collapseAll,handleAsyncDataChange]),handlePageChange=useCallback((newPage=>{setPage(newPage),collapseAll(),onFetchData&&handleAsyncDataChange({page:newPage})}),[setPage,collapseAll,onFetchData,handleAsyncDataChange]),getPaginationComponent=useCallback((()=>{const paginationId=uniqueInnerId(id,"paginationId").paginationId;return React.createElement(Pagination,{id:`${paginationId}_pagination`,numberOfRows:numberOfRows,pageSize:pageSize,pageSizeOptions:pageSizeOptions,pageSizeSelectedOption:pageSizeSelectedOption,onSelectPageSizeChange:value=>{const newPageSize=value===SHOW_ALL_PAGES?value:Number(value);setPageSize(newPageSize,!0),collapseAll(),onFetchData&&handleAsyncDataChange({page:0,pageSize:newPageSize})},page:page,onPageChange:handlePageChange,canNext:page<Math.ceil(numberOfRows/pageSize)-1,canPrevious:0!==page})}),[collapseAll,handleAsyncDataChange,handlePageChange,id,numberOfRows,onFetchData,page,pageSize,pageSizeOptions,pageSizeSelectedOption,setPageSize]),paginationProps=shouldShowPagination&&numberOfRows>0?{defaultPageSize:defaultConfig.pageSize,PaginationComponent:getPaginationComponent}:{showPagination:!1,pageSize:numberOfRows},expanderContentWrapper=useCallback((({original:rowData})=>{const expanderContentWrapperStyles=cx(styles.expandableRowWrapper,styles.expandableRow);return React.createElement(AnimationGroup,{animation:"expand",appear:!0,in:!0},React.createElement("div",{className:expanderContentWrapperStyles,"data-testid":"expander"},renderExpanderContent(rowData)))}),[renderExpanderContent]),subComponent=shouldBeExpandable?expanderContentWrapper:null,renderTableBar=useCallback((()=>{const actions=null==selectionActions?void 0:selectionActions.map((({callback:callback,...rest})=>({...rest,callback:()=>{callback(selectedState.rows),clearAll()}})));return React.createElement(TableContext.Provider,{value:tableContext},React.createElement(TableBar,{filterValue:filterValue,onFilterChange:newFilterValue=>{setFilterValue(newFilterValue,!0),onFetchData&&debounceFilter(newFilterValue),collapseAll()},filterPlaceholder:translator(filterPlaceholder),selectionActions:actions,showSelectionActions:!!selectedState.rows.length,disabled:loading}))}),[debounceFilter,filterPlaceholder,filterValue,clearAll,loading,onFetchData,selectedState.rows,selectionActions,setFilterValue,tableContext,translator,collapseAll]),reactTableKey=`${id}_${onFetchData?"async":"sync"}`,getStyleProps=useCallback((()=>_.mapValues({getTheadProps:styles.tableHeader,getTrGroupProps:styles.tableRowGroup},(className=>()=>({className:className,...getA11yTrGroupProps()})))),[getA11yTrGroupProps]);return useEffect((()=>{if(!onFetchData&&void 0===numberOfRowsProp){const isFirstPage=0===page,isPageEmpty=page===Math.floor(filteredData.length/pageSize)&&filteredData.length%pageSize==0;!isFirstPage&&isPageEmpty&&setPage(page-1)}}),[pageSize,page,onFetchData,setPage,filteredData,numberOfRowsProp]),useEffect((()=>{onFetchData&&((syncData||numberOfRowsProp)&&warning("The props `data` and `numberOfRows` will not be used when `onFetchData` prop is provided"),handleAsyncDataChange(defaultConfig))}),[handleAsyncDataChange,onFetchData,syncData,numberOfRowsProp,defaultConfig]),React.createElement("div",{id:id,className:styles.dataTable},shouldShowSearch&&renderTableBar(),React.createElement(ReactTable,_extends({key:reactTableKey,ref:reactTable,data:filteredData,columns:columnsArray,getTheadThProps:getHeaderCellProps,minRows:0,styles:styles,className:cx(styles.reactTable,"-striped","-highlight"),SubComponent:subComponent,expanded:expandedRows},paginationProps,getStyleProps(),tbodyProps,{getTdProps:getTdProps,getTrProps:getTrProps,getTheadTrProps:getA11yTrProps,getTbodyProps:getTbodyProps,getTableProps:()=>getA11yTableProps,NoDataComponent:renderNull,expanderDefaults:expanderDefaults,TrGroupComponent:AnimatedTrGroupComponent,TrComponent:AnimationResistantTrComponent,defaultSorted:defaultConfig.sorted,pageSize:pageSize,onPageChange:handlePageChange,onSortedChange:handleSortedChange},modeProps,{manual:isSortedOnServer||isControlledMode})))};function normalize(value){return null==value?"":value}DataTable.propTypes=dataTablePropTypes,DataTable.defaultProps={showSearch:!0,showPagination:!0,defaultConfig:DEFAULT_CONFIG,pageSizeOptions:[10,25,50],expandable:!0,multipleRowsExpandable:!0,headerMultiline:!1,selectionType:"none",columnsConfigurable:!0,noDataText:messages.noDataText,loadingText:messages.loadingText,localSorting:!1,onGetRowId:(row,index)=>index,tableLabel:messages.tableLabel,filterPlaceholder:messages.searchPlaceholder},DataTable.__docgenInfo={description:"Component for displaying tabular data\n\n@type {React.FC<PropTypes.InferProps<typeof dataTablePropTypes>>}\n\n@metadataType container",methods:[],displayName:"DataTable",props:{showSearch:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Defines whether search bar should be shown"},showPagination:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Defines whether pagination should be shown or not"},defaultConfig:{defaultValue:{value:"{\n    filterValue: '',\n    page: 0,\n    pageSize: 10,\n}",computed:!1},type:{name:"custom",raw:"dataTableConfigShape"},required:!1,description:"The configuration applied only on component initialization.\nIt includes sorting method, filtering value, page, page size, edited row and columns sorting"},pageSizeOptions:{defaultValue:{value:"[10, 25, 50]",computed:!1},type:{name:"arrayOf",value:{name:"number"}},required:!1,description:"List of page size options"},expandable:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Possibility to make rows expandable"},multipleRowsExpandable:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Multiple rows can be expanded at the same time"},headerMultiline:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If set to true header can be on 2 lines"},selectionType:{defaultValue:{value:"'none'",computed:!1},type:{name:"enum",value:[{value:"'none'",computed:!1},{value:"'single'",computed:!1},{value:"'multi'",computed:!1}]},required:!1,description:"Configures row selection capability (none, single row, multi row)"},columnsConfigurable:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"If set to false, end user will not have a possibility to customize visibility of columns"},noDataText:{defaultValue:{value:"messages.noDataText",computed:!0},type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Text message, when no data present to be shown"},loadingText:{defaultValue:{value:"messages.loadingText",computed:!0},type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Text to show while data is loading, by default - 'Loading..'"},localSorting:{defaultValue:{value:"false",computed:!1},type:{name:"bool"},required:!1,description:"If set to true, sorting is happening locally after data is fetched\nOnly for async mode"},onGetRowId:{defaultValue:{value:"(row, index) => index",computed:!1},type:{name:"func"},required:!1,description:"Callback (row) that returns unique id for the row.\nThe id should not change after editing the row.\nBy default index from data is used, but it does not work correctly when filtering."},tableLabel:{defaultValue:{value:"messages.tableLabel",computed:!0},type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Data table aria label"},filterPlaceholder:{defaultValue:{value:"messages.searchPlaceholder",computed:!0},type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"Placeholder text for search input"},id:{type:{name:"string"},required:!0,description:"Used to identify the component"},config:{type:{name:"custom",raw:"dataTableConfigShape"},required:!1,description:"Used to set data table config. Use it together with onConfigChange to control data table from outside.\nIt includes sorting method, filtering value, page, page size, edited row and columns sorting"},onConfigChange:{type:{name:"func"},required:!1,description:"Function to call after config value changes. New config value is passed as argument. It includes sorting method, filtering value, page, page size and columns visibility"},data:{type:{name:"arrayOf",value:{name:"object"}},required:!1,description:"Cells data"},onFilter:{type:{name:"func"},required:!1,description:"Predicate function for searching data"},onColumnFilter:{type:{name:"func"},required:!1,description:"Predicate function for searching data per column"},children:{type:{name:"node"},required:!0,description:"Column of any type (e.g. DisplayColumn)"},renderExpanderContent:{type:{name:"func"},required:!1,description:"Content of the expandable rows"},onRowClick:{type:{name:"func"},required:!1,description:"Callback for row click"},expandOnRowClick:{type:{name:"bool"},required:!1,description:"Row will expand on click"},selectOnRowClick:{type:{name:"bool"},required:!1,description:"Row will be selected on click"},selectedRows:{type:{name:"arrayOf",value:{name:"custom",raw:"rowIdShape"}},required:!1,description:"Currently selected rows (passing value for this prop makes component fully controlled)"},selectionActions:{type:{name:"arrayOf",value:{name:"shape",value:{icon:{name:"string",required:!0},label:{name:"string",required:!0},callback:{name:"func",required:!0}}}},required:!1,description:"List of actions available for selection"},onSelectionChange:{type:{name:"func"},required:!1,description:"Callback to be invoked when selection changed"},phone:{type:{name:"object"},required:!1,description:"Include any DataTable property to use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any DataTable property to use 'phoneWide' and 'phone' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any DataTable property to use at 'tablet', 'phoneWide' and 'phone' breakpoint"},onSaveRow:{type:{name:"func"},required:!1,description:"Callback (row, rowId) to be invoked when row is saved"},onEditCancel:{type:{name:"func"},required:!1,description:"Callback (row, rowId) to be invoked when row edit is canceled"},onEditStart:{type:{name:"func"},required:!1,description:"Callback (row, rowId) to be invoked when row edit is started"},path:{type:{name:"string"},required:!1,description:"The full path of view model, it also acts as an accessor for datatable's data"},onFetchData:{type:{name:"func"},required:!1,description:"Callback to be invoked when new data has to be fetched in async mode,\nwith one argument of the current state of config object '{ filterValue, sorted, pageSize, page }'.\nShould return a promise of an object '{ rows, numberOfRows }', in which 'rows' is the filtered data to be presented for the current page,\n'numberOfRows' is the total length of whole data.\nIt takes precedence over `data` and `numberOfRows` sync props"},rowIdPath:{type:{name:"string"},required:!1,description:"Name of row object property containing the row id. Can accept nested paths. Takes precedence over onGetRowId prop."},numberOfRows:{type:{name:"number"},required:!1,description:"Number of available rows"}}},AnimatedTrGroupComponent.__docgenInfo={componentName:"AnimatedTrGroupComponent",packageName:"@jutro/datatable",description:"",displayName:"AnimatedTrGroupComponent",methods:[],actualName:"AnimatedTrGroupComponent"},AnimationResistantTrComponent.__docgenInfo={componentName:"AnimationResistantTrComponent",packageName:"@jutro/datatable",description:"",displayName:"AnimationResistantTrComponent",methods:[],actualName:"AnimationResistantTrComponent"},splitHeaderText.__docgenInfo={componentName:"splitHeaderText",packageName:"@jutro/datatable",description:"",displayName:"splitHeaderText",methods:[],actualName:"splitHeaderText"},DataTable.__docgenInfo={componentName:"DataTable",packageName:"@jutro/datatable",description:"Component for displaying tabular data",displayName:"DataTable",methods:[],actualName:"DataTable",metadataType:"container",props:{id:{type:{name:"string"},required:!0,description:"Used to identify the component"},showSearch:{type:{name:"bool"},required:!1,description:"Defines whether search bar should be shown",defaultValue:{value:"true",computed:!1}},showPagination:{type:{name:"bool"},required:!1,description:"Defines whether pagination should be shown or not",defaultValue:{value:"true",computed:!1}},config:{type:{name:"custom",raw:"dataTableConfigShape"},required:!1,description:"Used to set data table config. Use it together with onConfigChange to control data table from outside.\nIt includes sorting method, filtering value, page, page size, edited row and columns sorting"},defaultConfig:{type:{name:"custom",raw:"dataTableConfigShape"},required:!1,description:"The configuration applied only on component initialization.\nIt includes sorting method, filtering value, page, page size, edited row and columns sorting",defaultValue:{value:"{\n    filterValue: '',\n    page: 0,\n    pageSize: 10,\n}",computed:!1}},onConfigChange:{type:{name:"func"},required:!1,description:"Function to call after config value changes. New config value is passed as argument. It includes sorting method, filtering value, page, page size and columns visibility"},pageSizeOptions:{type:{name:"arrayOf",value:{name:"number"}},required:!1,description:"List of page size options",defaultValue:{value:"[10, 25, 50]",computed:!1}},data:{type:{name:"arrayOf",value:{name:"object"}},required:!1,description:"Cells data"},onFilter:{type:{name:"func"},required:!1,description:"Predicate function for searching data"},onColumnFilter:{type:{name:"func"},required:!1,description:"Predicate function for searching data per column"},filterPlaceholder:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Placeholder text for search input",defaultValue:{value:"messages.searchPlaceholder",computed:!0}},children:{type:{name:"node"},required:!0,description:"Column of any type (e.g. DisplayColumn)"},expandable:{type:{name:"bool"},required:!1,description:"Possibility to make rows expandable",defaultValue:{value:"true",computed:!1}},multipleRowsExpandable:{type:{name:"bool"},required:!1,description:"Multiple rows can be expanded at the same time",defaultValue:{value:"true",computed:!1}},renderExpanderContent:{type:{name:"func"},required:!1,description:"Content of the expandable rows"},headerMultiline:{type:{name:"bool"},required:!1,description:"If set to true header can be on 2 lines",defaultValue:{value:"false",computed:!1}},onRowClick:{type:{name:"func"},required:!1,description:"Callback for row click"},expandOnRowClick:{type:{name:"bool"},required:!1,description:"Row will expand on click"},selectOnRowClick:{type:{name:"bool"},required:!1,description:"Row will be selected on click"},selectionType:{type:{name:"enum",value:[{value:"'none'",computed:!1},{value:"'single'",computed:!1},{value:"'multi'",computed:!1}]},required:!1,description:"Configures row selection capability (none, single row, multi row)",defaultValue:{value:"'none'",computed:!1}},selectedRows:{type:{name:"arrayOf",value:{name:"custom",raw:"rowIdShape"}},required:!1,description:"Currently selected rows (passing value for this prop makes component fully controlled)"},selectionActions:{type:{name:"arrayOf",value:{name:"shape",value:{icon:{name:"string",required:!0},label:{name:"string",required:!0},callback:{name:"func",required:!0}}}},required:!1,description:"List of actions available for selection"},onSelectionChange:{type:{name:"func"},required:!1,description:"Callback to be invoked when selection changed"},columnsConfigurable:{type:{name:"bool"},required:!1,description:"If set to false, end user will not have a possibility to customize visibility of columns",defaultValue:{value:"true",computed:!1}},loadingText:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Text to show while data is loading, by default - 'Loading..'",defaultValue:{value:"messages.loadingText",computed:!0}},noDataText:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Text message, when no data present to be shown",defaultValue:{value:"messages.noDataText",computed:!0}},localSorting:{type:{name:"bool"},required:!1,description:"If set to true, sorting is happening locally after data is fetched\nOnly for async mode",defaultValue:{value:"false",computed:!1}},phone:{type:{name:"object"},required:!1,description:"Include any DataTable property to use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any DataTable property to use 'phoneWide' and 'phone' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any DataTable property to use at 'tablet', 'phoneWide' and 'phone' breakpoint"},onSaveRow:{type:{name:"func"},required:!1,description:"Callback (row, rowId) to be invoked when row is saved"},onEditCancel:{type:{name:"func"},required:!1,description:"Callback (row, rowId) to be invoked when row edit is canceled"},onEditStart:{type:{name:"func"},required:!1,description:"Callback (row, rowId) to be invoked when row edit is started"},path:{type:{name:"string"},required:!1,description:"The full path of view model, it also acts as an accessor for datatable's data"},onFetchData:{type:{name:"func"},required:!1,description:"Callback to be invoked when new data has to be fetched in async mode,\nwith one argument of the current state of config object '{ filterValue, sorted, pageSize, page }'.\nShould return a promise of an object '{ rows, numberOfRows }', in which 'rows' is the filtered data to be presented for the current page,\n'numberOfRows' is the total length of whole data.\nIt takes precedence over `data` and `numberOfRows` sync props"},onGetRowId:{type:{name:"func"},required:!1,description:"Callback (row) that returns unique id for the row.\nThe id should not change after editing the row.\nBy default index from data is used, but it does not work correctly when filtering.",defaultValue:{value:"(row, index) => index",computed:!1}},rowIdPath:{type:{name:"string"},required:!1,description:"Name of row object property containing the row id. Can accept nested paths. Takes precedence over onGetRowId prop."},tableLabel:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"Data table aria label",defaultValue:{value:"messages.tableLabel",computed:!0}},numberOfRows:{type:{name:"number"},required:!1,description:"Number of available rows"}}};