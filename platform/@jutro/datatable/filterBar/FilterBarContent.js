import _slicedToArray from"@babel/runtime-corejs3/helpers/slicedToArray";import React,{useContext,useCallback,useState}from"react";import{Button}from"@jutro/components";import set from"lodash/set";import get from"lodash/get";import isEmpty from"lodash/isEmpty";import{Flex}from"@jutro/layout";import{MetadataForm}from"@jutro/uiconfig";import{TranslatorContext}from"@jutro/locale";import{messages}from"./FilterBar.messages";import internalStyles from"./FilterBar.module.css";const FilterBarContentInternal=({styles:styles,metadata:metadata,onFiltersChange:onFiltersChange,componentMap:componentMap,callbackMap:callbackMap,isFiltersEmpty:isFiltersEmpty,initialFilters:initialFilters={}})=>{const translator=useContext(TranslatorContext),_useState=useState(initialFilters),_useState2=_slicedToArray(_useState,2),formData=_useState2[0],setFormData=_useState2[1],isFormEmpty=Object.values(formData).every(isEmpty),overrideProps={"@field":{className:internalStyles.filterItem}},applyFilters=useCallback((()=>{onFiltersChange(Object.entries(formData).reduce(((newFilters,[path,value])=>(null!=value&&""!==value&&(newFilters[path]=value),newFilters)),{}))}),[formData,onFiltersChange]),handleClearFilter=useCallback((()=>{setFormData({}),onFiltersChange({})}),[onFiltersChange,setFormData]),handleFormEnter=useCallback((event=>{"Enter"!==event.key||event.defaultPrevented||applyFilters()}),[applyFilters]);return React.createElement("div",{className:internalStyles.filterBar},React.createElement("div",{className:internalStyles.titleBar},React.createElement("div",{className:internalStyles.filterTitle},translator(messages.title)),React.createElement("div",null,!isFormEmpty&&!isFiltersEmpty&&React.createElement(Button,{id:"clearFilter",type:"text",size:"small",onClick:handleClearFilter},translator(messages.clearFilters)),React.createElement(Button,{id:"applyFilter",type:"filled",size:"small",disabled:isFormEmpty,onClick:applyFilters},translator(messages.applyFilters)))),React.createElement("hr",{className:internalStyles.titleDivider}),React.createElement(Flex,{gap:"small",onKeyDown:handleFormEnter,role:"presentation"},React.createElement(MetadataForm,{uiProps:metadata,onDataChange:(value,path)=>{setFormData((prevState=>{const newState={...prevState};return set(newState,path,value),newState}))},classNameMap:styles,resolveValue:(id,path)=>get(formData,path),callbackMap:callbackMap,componentMap:componentMap,overrideProps:overrideProps,data:formData})))};FilterBarContentInternal.displayName="FilterBarContent";export const FilterBarContent=React.memo(FilterBarContentInternal);FilterBarContentInternal.__docgenInfo={description:"",methods:[],displayName:"FilterBarContent",props:{initialFilters:{defaultValue:{value:"{}",computed:!1},required:!1}}},FilterBarContentInternal.__docgenInfo={componentName:"FilterBarContent",packageName:"@jutro/datatable",description:"",displayName:"FilterBarContent",methods:[],actualName:"FilterBarContentInternal",props:{initialFilters:{defaultValue:{value:"{}",computed:!1},required:!1}}};