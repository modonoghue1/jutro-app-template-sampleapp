import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import get from"lodash/get";import React,{useContext}from"react";import PropTypes from"prop-types";import{prepareComponentFromMetadata,renderComponentFromMetadata}from"@jutro/uiconfig";import{FieldValue}from"@jutro/components";import{TranslatorContext}from"@jutro/locale";import{TableColumn}from"../table/TableColumn";import styles from"./FieldColumn.module.css";import tableStyles from"../DataTable.module.css";export const FieldColumn=()=>React.createElement(React.Fragment,null);FieldColumn.propTypes={...TableColumn.propTypes,model:PropTypes.object,basePath:PropTypes.string,uiMetadata:PropTypes.object,pageProps:PropTypes.object,readOnly:PropTypes.bool,onAccessor:PropTypes.func};export const DefaultCell=({row:row,rowId:rowId,innerProps:innerProps})=>{const translator=useContext(TranslatorContext),path=innerProps.path,visible=innerProps.visible,fieldDatatype=innerProps.fieldDatatype,id=innerProps.id,_innerProps$available=innerProps.availableValues,availableValues=void 0===_innerProps$available?[]:_innerProps$available;if(!1===visible)return null;const cellValue=get(row,path),selectOption=availableValues.find((el=>{return(null!==(_option$code=null==(option=el)?void 0:option.code)&&void 0!==_option$code?_option$code:option.id)===(null==cellValue?void 0:cellValue.toString());var option,_option$code})),value=selectOption?null!==(_option$name=null==(option=selectOption)?void 0:option.name)&&void 0!==_option$name?_option$name:option.displayName:cellValue;var option,_option$name;return React.createElement(FieldValue,{id:`${id}_${rowId}`,datatype:fieldDatatype,value:translator(value)})};FieldColumn.defaultCell=(row,rowId,props)=>React.createElement(DefaultCell,{row:row,rowId:rowId,innerProps:props}),FieldColumn.editCell=({props:props,editProps:editProps,editActions:editActions})=>{const id=props.id,basePath=props.basePath,path=props.path,visible=props.visible,datatype=(props.fieldType,props.fieldDatatype),component=props.fieldComponent,rest=_objectWithoutProperties(props,["id","basePath","path","visible","fieldType","fieldDatatype","fieldComponent"]),row=editProps.row,rowId=editProps.rowId,index=editProps.index,update=editActions.update;if(!1===visible)return null;const results=prepareComponentFromMetadata({type:"field",datatype:datatype,component:component,componentProps:{...rest,id:`${id}_${rowId}`,hideLabel:!0,className:styles.fullWidth,value:get(row,props.path),path:basePath?`${basePath}.${index}.${path}`:path,onValueChange:newValue=>update(row,path,newValue)}});return renderComponentFromMetadata(results)},FieldColumn.editCellClass=tableStyles.editedCell,FieldColumn.displayName="FieldColumn",FieldColumn.defaultProps={renderCell:FieldColumn.defaultCell,renderEditCell:FieldColumn.editCell,columnProportion:1,fieldDatatype:"string"},FieldColumn.__docgenInfo={description:"@returns {null} - The FieldColumn component does not render anything\n\n@metadataType container",methods:[{name:"defaultCell",docblock:"Render the default cell\n@param {object} row - Each row in the data table\n@param {number | string} rowId - The index of the current row\n@param {object} props - the properties used by TableColumn\n\n@returns {React.ReactElement}",modifiers:["static"],params:[{name:"row",description:"Each row in the data table",type:{name:"object"},optional:!1},{name:"rowId",description:"The index of the current row",type:{name:"union",elements:[{name:"number"},{name:"string"}]},optional:!1},{name:"props",description:"the properties used by TableColumn",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"React.ReactElement"}},description:"Render the default cell"},{name:"editCell",docblock:null,modifiers:["static"],params:[{name:"{ props, editProps, editActions }",type:null}],returns:null}],displayName:"FieldColumn",props:{renderCell:{defaultValue:{value:"FieldColumn.defaultCell",computed:!0},required:!1},renderEditCell:{defaultValue:{value:"FieldColumn.editCell",computed:!0},required:!1},columnProportion:{defaultValue:{value:"1",computed:!1},required:!1},fieldDatatype:{defaultValue:{value:"'string'",computed:!1},required:!1},model:{type:{name:"object"},required:!1,description:""},basePath:{type:{name:"string"},required:!1,description:""},uiMetadata:{type:{name:"object"},required:!1,description:""},pageProps:{type:{name:"object"},required:!1,description:""},readOnly:{type:{name:"bool"},required:!1,description:""},onAccessor:{type:{name:"func"},required:!1,description:"Returns a value that will be used by the column to access the correct data of each row"}},composes:["../table/TableColumn"]},DefaultCell.__docgenInfo={description:"",methods:[],displayName:"DefaultCell"},FieldColumn.__docgenInfo={componentName:"FieldColumn",packageName:"@jutro/datatable",description:"",displayName:"FieldColumn",methods:[{name:"defaultCell",docblock:"Render the default cell\n@param {object} row - Each row in the data table\n@param {number | string} rowId - The index of the current row\n@param {object} props - the properties used by TableColumn\n\n@returns {React.ReactElement}",modifiers:["static"],params:[{name:"row",description:"Each row in the data table",type:{name:"object"},optional:!1},{name:"rowId",description:"The index of the current row",type:{name:"union",elements:[{name:"number"},{name:"string"}]},optional:!1},{name:"props",description:"the properties used by TableColumn",type:{name:"object"},optional:!1}],returns:{description:null,type:{name:"React.ReactElement"}},description:"Render the default cell"},{name:"editCell",docblock:null,modifiers:["static"],params:[{name:"{ props, editProps, editActions }",optional:void 0,type:null}],returns:null}],actualName:"FieldColumn",metadataType:"container",props:{model:{type:{name:"object"},required:!1,description:""},basePath:{type:{name:"string"},required:!1,description:""},uiMetadata:{type:{name:"object"},required:!1,description:""},pageProps:{type:{name:"object"},required:!1,description:""},readOnly:{type:{name:"bool"},required:!1,description:""},onAccessor:{type:{name:"func"},required:!1,description:"Returns a value that will be used by the column to access the correct data of each row"},renderCell:{defaultValue:{value:"FieldColumn.defaultCell",computed:!0},required:!1},renderEditCell:{defaultValue:{value:"FieldColumn.editCell",computed:!0},required:!1},columnProportion:{defaultValue:{value:"1",computed:!1},required:!1},fieldDatatype:{defaultValue:{value:"'string'",computed:!1},required:!1}},composes:["../table/TableColumn"]},DefaultCell.__docgenInfo={componentName:"DefaultCell",packageName:"@jutro/datatable",description:"",displayName:"DefaultCell",methods:[],actualName:"DefaultCell"};