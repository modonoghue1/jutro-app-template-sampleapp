import React,{useEffect}from"react";import isString from"lodash/isString";import uniq from"lodash/uniq";import{EVENT_ADDED,EVENT_EXPIRED,EVENT_RENEWED,EVENT_ERROR,EVENT_REMOVED}from"@okta/okta-auth-js";import{error}from"@jutro/logger";import{getConfigValue}from"@jutro/config";import{joinUrl}from"@jutro/platform";import{getTokenByKey,setToken,removeTokenByKey}from"./AuthTokenStorage";import{OKTA_NOT_FOUND}from"./errorcodes/errorcodes";import{useAuthState}from"./AuthStateProvider";import{AuthContext}from"./AuthContext";export const AuthContextProvider=({children:children})=>{const _useAuthState=useAuthState(),authState=_useAuthState.authState,oktaAuth=_useAuthState.oktaAuth,tokenManager=oktaAuth.tokenManager,basenameUri=getConfigValue("JUTRO_ROUTER_BASENAME","");useEffect((()=>{const autoRenew=getConfigValue("JUTRO_AUTH_AUTO_RENEW",!0),expiredHandler=()=>{autoRenew||logout()},addHandler=(key,token)=>{setToken(key,token.value)},errorHandler=()=>{error("Jutro Auth: failed to renew the token. Logging out..."),logout()},removeHandler=key=>{removeTokenByKey(key)};return tokenManager.on(EVENT_ADDED,addHandler),tokenManager.on(EVENT_RENEWED,addHandler),tokenManager.on(EVENT_REMOVED,removeHandler),tokenManager.on(EVENT_EXPIRED,expiredHandler),tokenManager.on(EVENT_ERROR,errorHandler),tokenManager.getTokens().then((({idToken:idToken,accessToken:accessToken})=>{idToken&&!tokenManager.hasExpired(idToken)&&setToken("idToken",idToken.idToken),accessToken&&!tokenManager.hasExpired(accessToken)&&setToken("accessToken",accessToken.accessToken)})),()=>{tokenManager.off(EVENT_ADDED,addHandler),tokenManager.off(EVENT_RENEWED,addHandler),tokenManager.off(EVENT_REMOVED,removeHandler),tokenManager.off(EVENT_EXPIRED,expiredHandler),tokenManager.off(EVENT_ERROR,errorHandler)}}),[tokenManager]);const allocateToken=async(scopes,newTokenKey)=>{if(!scopes||0===scopes.length){return void error("scopes are not provided")}if(!newTokenKey){return void error("newTokenKey is not provided")}const token=oktaAuth.token,defaultScopes=oktaAuth.options.scopes||[],tokenScopes=uniq(defaultScopes.concat(scopes)),accessToken=(await token.getWithoutPrompt({scopes:tokenScopes})).tokens.accessToken;return accessToken&&(setToken(newTokenKey,accessToken.accessToken),tokenManager.add(newTokenKey,accessToken)),getTokenByKey(newTokenKey)},login=async(fromUri,additionalParams={})=>{const loginRedirectFallBack=window.location.href.replace(joinUrl(window.location.origin,basenameUri),"");let loginUri=isString(fromUri)?fromUri:getConfigValue("JUTRO_AUTH_LOGIN_REDIRECT_PATH",loginRedirectFallBack);loginUri.includes("/logout")&&(loginUri="/");const idp=getConfigValue("JUTRO_AUTH_IDP"),params={...idp&&{idp:idp},...additionalParams};oktaAuth.setOriginalUri(joinUrl(window.location.origin,basenameUri,loginUri,{trailingSlash:!0})),await oktaAuth.signInWithRedirect(params)},logout=async fromUri=>{const logoutUri=isString(fromUri)?fromUri:getConfigValue("JUTRO_AUTH_LOGOUT_REDIRECT_PATH","/logout");return oktaAuth.signOut({postLogoutRedirectUri:joinUrl(window.location.origin,basenameUri,logoutUri)}).catch((err=>{const errorCode=err.errorCode,errorMsg=`Jutro Auth logout failure: ${errorCode}`;if(error(errorMsg),errorCode!==OKTA_NOT_FOUND)throw new Error(errorMsg)}))},getAccessToken=()=>oktaAuth.getAccessToken(),getIdToken=()=>oktaAuth.getIdToken(),decodeToken=token=>oktaAuth.token.decode(token),getDecodedIdToken=()=>{const token=getIdToken();if(token)return decodeToken(token)},getDecodedAccessToken=()=>{const token=getAccessToken();if(token)return decodeToken(token)};return React.createElement(AuthContext.Provider,{value:{...authState,authenticated:authState.isAuthenticated,tokenManager:tokenManager,allocateToken:allocateToken,decodeToken:decodeToken,getAccessToken:getAccessToken,getDecodedIdToken:getDecodedIdToken,getDecodedAccessToken:getDecodedAccessToken,getIdToken:getIdToken,login:login,logout:logout}},children)};AuthContextProvider.displayName="AuthContextProvider",AuthContextProvider.__docgenInfo={description:"",methods:[],displayName:"AuthContextProvider"},AuthContextProvider.__docgenInfo={componentName:"AuthContextProvider",packageName:"@jutro/auth",description:"",displayName:"AuthContextProvider",methods:[],actualName:"AuthContextProvider"};