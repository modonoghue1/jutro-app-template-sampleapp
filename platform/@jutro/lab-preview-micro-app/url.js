import _URL from"@babel/runtime-corejs3/core-js-stable/url";import escapeRegExp from"lodash/escapeRegExp";export const appendPath=(url,path)=>{const currentPath=trimSlashes(url.pathname,!1,!0),newPath=`/${trimSlashes(path,!0,!1)}`;return deduplicatePaths(new _URL(currentPath+newPath,url).href,url)};const deduplicatePaths=(target,referenceUrl)=>{if("/"===referenceUrl.pathname)return target;const escapedOrigin=escapeRegExp(referenceUrl.origin),escapedPath=escapeRegExp(trimSlashes(referenceUrl.pathname,!1));return target.replace(new RegExp(`(${escapedOrigin})(${escapedPath}){2}`,"g"),"$1$2")},trailingSlashes=/\/+$/,leadingSlashes=/^\/+/,trimSlashes=(s,trimStart=!0,trimEnd=!0)=>{let result=s;return trimStart&&(result=result.replace(leadingSlashes,"")),trimEnd&&(result=result.replace(trailingSlashes,"")),result};export const prependAbsoluteUrls=(allFileContents,allFilePaths,remoteUrl)=>{const escapedBasePath=escapeRegExp(trimSlashes(remoteUrl.pathname)),basePathMatcher=new RegExp(`^(\\.{0,2}/)?${escapedBasePath}`),allTrimmedPaths=`(${allFilePaths.map((filePath=>escapeRegExp(trimSlashes(filePath.replace(basePathMatcher,""))))).join("|")})`,relativeUrlMatcher=new RegExp(`([\\w\\.]+\\s?\\+\\s?)?(["'])?(\\.{0,2}/)?${`(${escapedBasePath}/)?`}${allTrimmedPaths}`,"g"),absoluteUrlReplacement=`$2${escapeRegExp(trimSlashes(remoteUrl.href,!1))}/$5`;return allFileContents.map((loadingResult=>{if("content"in loadingResult){const contentWithAbsoluteUrls=loadingResult.content.replace(relativeUrlMatcher,absoluteUrlReplacement);if(contentWithAbsoluteUrls!==loadingResult.content){const content=deduplicatePaths(contentWithAbsoluteUrls,remoteUrl);return{...loadingResult,content:content}}}return loadingResult}))};