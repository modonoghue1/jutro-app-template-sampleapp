import _URL from"@babel/runtime-corejs3/core-js-stable/url";import React from"react";import{getConfigValue}from"@jutro/config";import{ErrorBoundary}from"@jutro/components";import{MicroAppContainer}from"./MicroAppContainer";import{ErrorRenderer}from"./ErrorRenderer";import{getRemoteAddress}from"./config";import{getSharedLibs}from"./sharedLibs";import{appendPath,prependAbsoluteUrls}from"./url";const buildMicroAppModule=(remoteScope,ErrorBoundaryComponent,fetchError)=>({default:props=>React.createElement(ErrorBoundaryComponent,{noticeStyle:"card"},fetchError?React.createElement(ErrorRenderer,{error:fetchError}):React.createElement(MicroAppContainer,{props:props,remoteScope:remoteScope}))}),fetchFilesAndAttachToDOM=async remoteScope=>{const remoteAddress=getRemoteAddress(remoteScope),skippedFiles=new RegExp(getConfigValue(`microAppConfig.skippedFiles.${remoteScope}`,"^.*(service-worker|precache-manifest).*\\.js$")),res=await fetch(`${remoteAddress}/asset-manifest.json`),manifest=await res.json(),filesFromManifest=manifest.files?manifest.files:manifest,allFileNames=Object.keys(filesFromManifest),allFilePaths=Object.values(filesFromManifest);Object.assign(window,getSharedLibs());const remoteUrl=new _URL(remoteAddress),allFileContents=await Promise.all(allFileNames.filter((file=>(file.endsWith(".js")||file.endsWith(".css"))&&!skippedFiles.test(file))).map((fileName=>((remoteUrl,filePath,fileName)=>fetch(appendPath(remoteUrl,filePath)).then((res=>res.text())).then((content=>({fileName:fileName,content:content}))).catch((error=>({fileName:fileName,error:error}))))(remoteUrl,filesFromManifest[fileName],fileName))));prependAbsoluteUrls(allFileContents,allFilePaths,remoteUrl).forEach((loadingResult=>{"content"in loadingResult&&((fileName,content,remoteScope)=>{const isStyle=fileName.endsWith(".css"),elementType=isStyle?"style":"script",element=document.createElement(elementType);element.setAttribute("micro-app-name",remoteScope),element.innerHTML=content,element.id=`micro-app-${remoteScope}-${elementType}-${fileName}`,isStyle?document.head.insertBefore(element,document.head.firstChild):document.head.appendChild(element)})(loadingResult.fileName,loadingResult.content,remoteScope)}))};export const importMicroApp=(remoteScope,errorBoundary=ErrorBoundary)=>async()=>{try{return await fetchFilesAndAttachToDOM(remoteScope),buildMicroAppModule(remoteScope,errorBoundary)}catch(e){return buildMicroAppModule(remoteScope,errorBoundary,e)}};