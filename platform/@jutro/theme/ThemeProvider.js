import _classCallCheck from"@babel/runtime-corejs3/helpers/classCallCheck";import _createClass from"@babel/runtime-corejs3/helpers/createClass";import _assertThisInitialized from"@babel/runtime-corejs3/helpers/assertThisInitialized";import _inherits from"@babel/runtime-corejs3/helpers/inherits";import _possibleConstructorReturn from"@babel/runtime-corejs3/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime-corejs3/helpers/getPrototypeOf";import _defineProperty from"@babel/runtime-corejs3/helpers/defineProperty";function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}import React,{Component}from"react";import PropTypes from"prop-types";import cx from"classnames";import isEqual from"lodash/isEqual";import{log,warning}from"@jutro/logger";import{deprecated}from"@jutro/prop-types";import{createContextConsumerHOC,logDeprecationMessage}from"@jutro/platform";import{defaultThemeConfig,themeList}from"@jutro/theme-styles";import{DynamicStyleSheet}from"./DynamicStyleSheet";import{parseThemeConfig}from"./parseThemeHelper";import{ApplyElementClass}from"./ApplyElementClass";const customStyleSheet=new DynamicStyleSheet;export const THEMEPROVIDER_DEFAULT=defaultThemeConfig.name;function addLinkElement(id,href){const link=document.createElement("link");link.setAttribute("rel","stylesheet"),link.setAttribute("type","text/css"),link.setAttribute("id",id),link.setAttribute("href",href),document.head.appendChild(link)}function removeElement(id){const element=document.getElementById(id);element&&element.parentElement.removeChild(element)}export const defaultTheme={name:THEMEPROVIDER_DEFAULT,switchTheme:()=>{log.warning('You should not use "theme.switchTheme()" outside a <ThemeProvider>')}};export const ThemeContext=React.createContext(defaultTheme);export function withTheme(ComponentToWrap){return log.warning('You should use ThemeContext.Consumer directly, or alternatively "renderWithTheme(renderProp)" to consume theme without using a HOC'),createContextConsumerHOC({component:ComponentToWrap,context:ThemeContext,displayName:`Themed${ComponentToWrap.displayName||ComponentToWrap.name}`,mapContextToProps:(existingProps,context)=>({theme:context})})}export function renderWithTheme(renderProp){return React.createElement(ThemeContext.Consumer,null,(theme=>renderProp(theme)))}function removeStyleOverrides(){removeElement("jutro-variable-overrides"),removeElement("jutro-style-overrides")}export let ThemeProvider=function(_Component){_inherits(ThemeProvider,Component);var _super=_createSuper(ThemeProvider);function ThemeProvider(props){var _this;return _classCallCheck(this,ThemeProvider),_this=_super.call(this,props),_defineProperty(_assertThisInitialized(_this),"switchTheme",(newConfig=>{if(_this.state.config!==newConfig){const newState=_this.createStateFromConfig(newConfig);_this.setState(newState,(()=>{_this.removeDynamicStylesheet(),removeStyleOverrides(),_this.createDynamicStylesheet(),newState.useLegacySettings||_this.appendStyleOverrides()}))}})),_defineProperty(_assertThisInitialized(_this),"createStateFromConfig",(config=>{if(!config)return{useLegacySettings:!0,theme:{name:THEMEPROVIDER_DEFAULT,switchTheme:_this.switchTheme}};const useLegacySettings=config.rootStyle||config.componentStyles;useLegacySettings&&(config.baseTheme||config.styleOverrides||config.variableOverrides)&&logDeprecationMessage("Using deprecated configuration rootStyle/componentStyle, new settings baseTheme/stylesOverrides/variableOverrides will be ignored",void 0,void 0,"7.0.0");const combinedConfig={...config};if(!useLegacySettings&&config.baseTheme){const baseTheme=themeList.find((theme=>theme.name===config.baseTheme));baseTheme?combinedConfig.rootStyle=baseTheme.rootStyle:warning(`Unrecognized baseTheme ${baseTheme}`)}const _ref=parseThemeConfig(combinedConfig)||{},classNames=_ref.classNames,styles=_ref.styles,theme={name:config.name,switchTheme:_this.switchTheme};return{classNames:classNames,config:config,styles:styles,theme:theme,styleOverrides:null==config?void 0:config.styleOverrides,variableOverrides:null==config?void 0:config.variableOverrides,useLegacySettings:useLegacySettings}})),_defineProperty(_assertThisInitialized(_this),"getRootStyle",(()=>{const classNames=_this.state.classNames;return classNames?classNames.root:void 0})),_this.state=_this.createStateFromConfig(props.initialConfig),_this}return _createClass(ThemeProvider,[{key:"componentDidMount",value:function(){this.createDynamicStylesheet(),this.state.useLegacySettings||this.appendStyleOverrides(),!this.props.applyLocally&&ThemeProvider.bodyStylesMounted&&log.warning("Only a single ThemeProvider's styles set may be applied to document's body. Consider applying locally."),this.useBodyStyles&&(ThemeProvider.bodyStylesMounted=!0)}},{key:"componentDidUpdate",value:function(prevProps){const initialConfig=this.props.initialConfig,prevConfig=prevProps.initialConfig;if(this.updateCreatedStateIfNeeded(initialConfig,prevConfig),!initialConfig||initialConfig===prevConfig)return;const dropTarget=initialConfig.dropTarget;dropTarget&&logDeprecationMessage(`ThemeProvider: ${initialConfig.name} Theme`,void 0,void 0,dropTarget)}},{key:"componentWillUnmount",value:function(){this.useBodyStyles&&(ThemeProvider.bodyStylesMounted=!1),this.removeDynamicStylesheet(),removeStyleOverrides()}},{key:"useBodyStyles",get:function(){return!(this.props.applyLocally||ThemeProvider.bodyStyleMounted)}},{key:"themeRootStyles",get:function(){return["themeRoot",this.props.className].filter(Boolean)}},{key:"appendStyleOverrides",value:function(){this.state.variableOverrides&&addLinkElement("jutro-variable-overrides",this.state.variableOverrides),this.state.styleOverrides&&addLinkElement("jutro-style-overrides",this.state.styleOverrides)}},{key:"createDynamicStylesheet",value:function(){const styles=this.state.styles;styles&&(this.stylesheet=customStyleSheet,this.stylesheet.mount(),this.stylesheet.applyRules(styles))}},{key:"removeDynamicStylesheet",value:function(){this.stylesheet&&(this.stylesheet.unmount(),this.stylesheet=null)}},{key:"updateCreatedStateIfNeeded",value:function(initialConfig,prevConfig){isEqual(initialConfig,prevConfig)||this.switchTheme(initialConfig)}},{key:"renderContent",value:function(){const children=this.props.children,className=cx(this.themeRootStyles,this.getRootStyle());return this.useBodyStyles?React.createElement(React.Fragment,null,React.createElement(ApplyElementClass,{element:document.body,className:className}),children):React.createElement("div",{className:className},children)}},{key:"render",value:function(){return React.createElement(ThemeContext.Provider,{value:this.state.theme},this.renderContent())}}]),ThemeProvider}();_defineProperty(ThemeProvider,"propTypes",{initialConfig:PropTypes.shape({name:PropTypes.string.isRequired,rootStyle:deprecated(PropTypes.oneOfType([PropTypes.object,PropTypes.string]),"7.0.0","Provide theming variable overrides using the variableOverrides property"),componentStyles:deprecated(PropTypes.object,"7.0.0","Provide additional styles using the overrides property"),baseTheme:PropTypes.string,styleOverrides:PropTypes.string,variableOverrides:PropTypes.string}),className:PropTypes.string,children:PropTypes.node,applyLocally:PropTypes.bool}),_defineProperty(ThemeProvider,"bodyStylesMounted",!1),renderWithTheme.__docgenInfo={description:"Render by invoking a render prop with 'theme'.\nThis is an alternative to using ThemeContext.Consumer directly. Useful for consuming without\nusing a HOC.\n\n@param {Function} renderProp - render method to be invoked by the ThemeContext\n@returns {React.ReactNode} returns JSX wrapping the invocation of the 'renderProp'",methods:[],displayName:"renderWithTheme"},ThemeProvider.__docgenInfo={description:"A ThemeProvider that can be placed in the app component hierarchy. It takes a theme configuration object\nand injects a 'theme' object into any consumers.\n@extends Component<{}>",methods:[{name:"useBodyStyles",docblock:null,modifiers:["get"],params:[],returns:null},{name:"themeRootStyles",docblock:null,modifiers:["get"],params:[],returns:null},{name:"switchTheme",docblock:"Set the theme for this theme provider by providing another theme configuration.\nThis is to change the theme after the initial load at runtime\n\n@param {object} newConfig - new theme configuration object",modifiers:[],params:[{name:"newConfig",description:"new theme configuration object",type:{name:"object"},optional:!1}],returns:null,description:"Set the theme for this theme provider by providing another theme configuration.\nThis is to change the theme after the initial load at runtime"},{name:"createStateFromConfig",docblock:"create state from config\n@param {object} config configuration for the ThemeProvider\n@returns {object} ThemeProvider state",modifiers:[],params:[{name:"config",description:"configuration for the ThemeProvider",type:{name:"object"},optional:!1}],returns:{description:"ThemeProvider state",type:{name:"object"}},description:"create state from config"},{name:"getRootStyle",docblock:"Get the root style from a theme. This should be a single string.\n\n@returns {string} root style from theme or default style",modifiers:[],params:[],returns:{description:"root style from theme or default style",type:{name:"string"}},description:"Get the root style from a theme. This should be a single string."},{name:"appendStyleOverrides",docblock:null,modifiers:[],params:[],returns:null},{name:"createDynamicStylesheet",docblock:"Create dynamic style sheet for configuration styles",modifiers:[],params:[],returns:null,description:"Create dynamic style sheet for configuration styles"},{name:"removeDynamicStylesheet",docblock:"Remove dynamic style sheet",modifiers:[],params:[],returns:null,description:"Remove dynamic style sheet"},{name:"updateCreatedStateIfNeeded",docblock:null,modifiers:[],params:[{name:"initialConfig",optional:!1,type:null},{name:"prevConfig",optional:!1,type:null}],returns:null},{name:"renderContent",docblock:null,modifiers:[],params:[],returns:null}],displayName:"ThemeProvider",props:{initialConfig:{type:{name:"shape",value:{name:{name:"string",required:!0},rootStyle:{name:"custom",raw:"deprecated(\n    PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    '7.0.0',\n    'Provide theming variable overrides using the variableOverrides property'\n)",required:!1},componentStyles:{name:"custom",raw:"deprecated(\n    PropTypes.object,\n    '7.0.0',\n    'Provide additional styles using the overrides property'\n)",required:!1},baseTheme:{name:"string",required:!1},styleOverrides:{name:"string",required:!1},variableOverrides:{name:"string",required:!1}}},required:!1,description:"The initial state configuration object"},className:{type:{name:"string"},required:!1,description:"Additional component styling class name"},children:{type:{name:"node"},required:!1,description:"The component children wrapped by the theme provider"},applyLocally:{type:{name:"bool"},required:!1,description:"Flag for applying styles locally"}}},renderWithTheme.__docgenInfo={componentName:"renderWithTheme",packageName:"@jutro/theme",description:"Render by invoking a render prop with 'theme'.\nThis is an alternative to using ThemeContext.Consumer directly. Useful for consuming without\nusing a HOC.",displayName:"renderWithTheme",methods:[],actualName:"renderWithTheme"},ThemeProvider.__docgenInfo={componentName:"ThemeProvider",packageName:"@jutro/theme",description:"A ThemeProvider that can be placed in the app component hierarchy. It takes a theme configuration object\nand injects a 'theme' object into any consumers.",displayName:"ThemeProvider",methods:[{name:"useBodyStyles",docblock:null,modifiers:["get"],params:[],returns:null},{name:"themeRootStyles",docblock:null,modifiers:["get"],params:[],returns:null},{name:"switchTheme",docblock:"Set the theme for this theme provider by providing another theme configuration.\nThis is to change the theme after the initial load at runtime\n\n@param {object} newConfig - new theme configuration object",modifiers:[],params:[{name:"newConfig",description:"new theme configuration object",type:{name:"object"},optional:!1}],returns:null,description:"Set the theme for this theme provider by providing another theme configuration.\nThis is to change the theme after the initial load at runtime"},{name:"createStateFromConfig",docblock:"create state from config\n@param {object} config configuration for the ThemeProvider\n@returns {object} ThemeProvider state",modifiers:[],params:[{name:"config",description:"configuration for the ThemeProvider",type:{name:"object"},optional:!1}],returns:{description:"ThemeProvider state",type:{name:"object"}},description:"create state from config"},{name:"getRootStyle",docblock:"Get the root style from a theme. This should be a single string.\n\n@returns {string} root style from theme or default style",modifiers:[],params:[],returns:{description:"root style from theme or default style",type:{name:"string"}},description:"Get the root style from a theme. This should be a single string."},{name:"appendStyleOverrides",docblock:null,modifiers:[],params:[],returns:null},{name:"createDynamicStylesheet",docblock:"Create dynamic style sheet for configuration styles",modifiers:[],params:[],returns:null,description:"Create dynamic style sheet for configuration styles"},{name:"removeDynamicStylesheet",docblock:"Remove dynamic style sheet",modifiers:[],params:[],returns:null,description:"Remove dynamic style sheet"},{name:"updateCreatedStateIfNeeded",docblock:null,modifiers:[],params:[{name:"initialConfig",optional:!1,type:null},{name:"prevConfig",optional:!1,type:null}],returns:null},{name:"renderContent",docblock:null,modifiers:[],params:[],returns:null}],actualName:"ThemeProvider",props:{initialConfig:{type:{name:"shape",value:{name:{name:"string",required:!0},rootStyle:{name:"union",raw:"deprecated(\n    PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    '7.0.0',\n    'Provide theming variable overrides using the variableOverrides property'\n)",required:!1,description:"@deprecated",deprecationInfo:{version:"7.0.0",mapTo:null},value:[{name:"object"},{name:"string"}]},componentStyles:{name:"object",raw:"deprecated(\n    PropTypes.object,\n    '7.0.0',\n    'Provide additional styles using the overrides property'\n)",required:!1,description:"@deprecated",deprecationInfo:{version:"7.0.0",mapTo:null}},baseTheme:{name:"string",required:!1},styleOverrides:{name:"string",required:!1},variableOverrides:{name:"string",required:!1}}},required:!1,description:"The initial state configuration object"},className:{type:{name:"string"},required:!1,description:"Additional component styling class name"},children:{type:{name:"node"},required:!1,description:"The component children wrapped by the theme provider"},applyLocally:{type:{name:"bool"},required:!1,description:"Flag for applying styles locally"}}};