import React,{memo,useCallback,useContext,useEffect}from"react";import PropTypes from"prop-types";import isFunction from"lodash/isFunction";import{Card}from"@jutro/components";import{intlMessageShape}from"@jutro/prop-types";import{uniqueInnerId}from"@jutro/platform";import{prepareCallbacksInComponentProps}from"@jutro/uiconfig";import{WizardContext}from"../wizard/WizardContext";import{wizardCallbackProptype}from"../wizard/WizardProptypes";function WizardPageInternal({buttonProps:buttonProps,children:children,className:className,headerClass:headerClass,id:id,onLoad:onLoad,onNext:onNext,onPageEventInfo:onPageEventInfo,onPrevious:onPrevious,pageEventInfo:pageEventInfo,renderHeader:renderHeader,renderPanel:renderPanel,renderSubTitle:renderSubTitle,renderTitle:renderTitle,resolveCallbackMap:resolveCallbackMap,subTitle:subTitle,title:title,panelClassName:panelClassName}){const _useContext=useContext(WizardContext),wizardReducerDispatch=_useContext.wizardReducerDispatch,onWizardEvent=_useContext.onWizardEvent;useEffect((()=>{if(onNext){const resolvedCallbacks=prepareCallbacksInComponentProps({componentProps:{onNext:onNext},resolvers:{resolveCallbackMap:resolveCallbackMap}});resolvedCallbacks.onNext&&"function"==typeof resolvedCallbacks.onNext&&wizardReducerDispatch({type:"setWizardPageOnNextCallback",payload:{onNext:resolvedCallbacks.onNext}})}return()=>{wizardReducerDispatch({type:"clearWizardPageOnNextCallback"})}}),[onNext,resolveCallbackMap,wizardReducerDispatch]),useEffect((()=>{if(onPrevious){const resolvedCallbacks=prepareCallbacksInComponentProps({componentProps:{onPrevious:onPrevious},resolvers:{resolveCallbackMap:resolveCallbackMap}});null!=resolvedCallbacks&&resolvedCallbacks.onPrevious&&"function"==typeof resolvedCallbacks.onPrevious&&wizardReducerDispatch({type:"setWizardPageOnPreviousCallback",payload:{onPrevious:resolvedCallbacks.onPrevious}})}return()=>{wizardReducerDispatch({type:"clearWizardPageOnPreviousCallback"})}}),[onPrevious,resolveCallbackMap,wizardReducerDispatch]),useEffect((()=>{wizardReducerDispatch({type:"setButtonProps",payload:buttonProps})}),[buttonProps]),useEffect((()=>{const resolvedCallbacks=prepareCallbacksInComponentProps({componentProps:{onLoad:onLoad},resolvers:{resolveCallbackMap:resolveCallbackMap}});wizardReducerDispatch({type:"loadPage",payload:{onLoad:null==resolvedCallbacks?void 0:resolvedCallbacks.onLoad}}),notifyWizardEvent({eventName:"wizard-page-loaded",onWizardEvent:onWizardEvent,pageEventInfo:pageEventInfo||onPageEventInfo})}),[]);const renderPagePanel=useCallback((()=>{const panelId=uniqueInnerId(id,"panelId").panelId,resolvedTitle=renderTitle||title,resolvedSubTitle=renderSubTitle||subTitle;return void 0!==renderPanel&&"function"==typeof renderPanel?renderPanel(panelId,resolvedTitle,resolvedSubTitle,headerClass,renderHeader):React.createElement(Card,{id:panelId,className:panelClassName,title:resolvedTitle,subTitle:resolvedSubTitle,headerClass:headerClass,renderHeader:renderHeader,isPanel:!0},children)}),[children,headerClass,id,renderHeader,renderPanel,subTitle,renderSubTitle,title,renderTitle]);return React.createElement("div",{className:className},renderPagePanel())}WizardPageInternal.defaultProps={actionBarLayout:"default",buttonProps:{}},WizardPageInternal.propTypes={children:PropTypes.node,className:PropTypes.string,headerClass:PropTypes.string,id:PropTypes.string.isRequired,knockoutPath:PropTypes.string,location:PropTypes.object.isRequired,onLoad:wizardCallbackProptype,onNext:wizardCallbackProptype,onPrevious:wizardCallbackProptype,pageEventInfo:PropTypes.oneOfType([PropTypes.func,PropTypes.object]),onPageEventInfo:PropTypes.func,renderHeader:PropTypes.func,renderPanel:PropTypes.func,resolveCallbackMap:PropTypes.object,subTitle:PropTypes.oneOfType([intlMessageShape,PropTypes.func]),renderSubTitle:PropTypes.func,title:PropTypes.oneOfType([intlMessageShape,PropTypes.func]),renderTitle:PropTypes.func,buttonProps:PropTypes.object,panelClassName:PropTypes.string},WizardPageInternal.displayName="WizardPage";export const WizardPage=memo(WizardPageInternal);const notifyWizardEvent=({eventName:eventName,onWizardEvent:onWizardEvent,pageEventInfo:pageEventInfo})=>{onWizardEvent&&(isFunction(pageEventInfo)&&(pageEventInfo=pageEventInfo(eventName)),onWizardEvent(pageEventInfo,eventName))};WizardPageInternal.__docgenInfo={description:"WizardPage is an Jutro component.\n\nUse this component to render a wizard page. This component (or a parent) should be used in a step definition\npassed to a `<Wizard>` component.\n\n@returns {React.ReactElement} - WizardPage component\n@example\n<WizardPage\n    onNext={handleNextPage}\n    onPrev={handlePreviousPage}\n    renderActionBar={false}\n>",methods:[],displayName:"WizardPage",props:{actionBarLayout:{defaultValue:{value:"'default'",computed:!1},required:!1},buttonProps:{defaultValue:{value:"{}",computed:!1},type:{name:"object"},required:!1,description:"Overrides for action buttons"},children:{type:{name:"node"},required:!1,description:"The child element wrapped in the component"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},headerClass:{type:{name:"string"},required:!1,description:"Additional styles to be applied to default panel header"},id:{type:{name:"string"},required:!0,description:"id passed to page panel"},knockoutPath:{type:{name:"string"},required:!1,description:"Path to navigate on fail of 'next'; if none provided, no default failTo will be added to 'next' button"},location:{type:{name:"object"},required:!0,description:"location object with pathname of current url. Usually provided from location.pathname prop passed from router"},onLoad:{type:{name:"custom",raw:"wizardCallbackProptype"},required:!1,description:"Callback to invoke when page is loaded; return true, false or a promise"},onNext:{type:{name:"custom",raw:"wizardCallbackProptype"},required:!1,description:"Callback to invoke when 'next' button is clicked; return true, false or a promise"},onPrevious:{type:{name:"custom",raw:"wizardCallbackProptype"},required:!1,description:"Callback to invoke when 'next' button is clicked; return true, false or a promise"},pageEventInfo:{type:{name:"union",value:[{name:"func"},{name:"object"}]},required:!1,description:"Object or callback to get page event info to send with wizard event"},onPageEventInfo:{type:{name:"func"},required:!1,description:"Callback to get page event info to send with wizard event"},renderHeader:{type:{name:"func"},required:!1,description:"Function rendering panel header element instead of the default one"},renderPanel:{type:{name:"func"},required:!1,description:"Callback to render panel method; if null then render without panel"},resolveCallbackMap:{type:{name:"object"},required:!1,description:"Callback map for resolver"},subTitle:{type:{name:"union",value:[{name:"custom",raw:"intlMessageShape"},{name:"func"}]},required:!1,description:"Default panel subtitle expression"},renderSubTitle:{type:{name:"func"},required:!1,description:"Function to render custom subTitle"},title:{type:{name:"union",value:[{name:"custom",raw:"intlMessageShape"},{name:"func"}]},required:!1,description:"Default panel title expression"},renderTitle:{type:{name:"func"},required:!1,description:"Function to render custom title"},panelClassName:{type:{name:"string"},required:!1,description:"Additional class name for panel."}}},WizardPageInternal.__docgenInfo={componentName:"WizardPage",packageName:"@jutro/wizard-next",description:"WizardPage is an Jutro component.\n\nUse this component to render a wizard page. This component (or a parent) should be used in a step definition\npassed to a `<Wizard>` component.",displayName:"WizardPage",methods:[],actualName:"WizardPageInternal",props:{children:{type:{name:"node"},required:!1,description:"The child element wrapped in the component"},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},headerClass:{type:{name:"string"},required:!1,description:"Additional styles to be applied to default panel header"},id:{type:{name:"string"},required:!0,description:"id passed to page panel"},knockoutPath:{type:{name:"string"},required:!1,description:"Path to navigate on fail of 'next'; if none provided, no default failTo will be added to 'next' button"},location:{type:{name:"object"},required:!0,description:"location object with pathname of current url. Usually provided from location.pathname prop passed from router"},onLoad:{type:{name:"union",value:[{name:"string"},{name:"func"},{name:"shape",value:{callback:{name:"string",required:!1},callbackProps:{name:"shape",value:{type:{name:"enum",value:[{value:"'action'",computed:!1}],required:!1},args:{name:"array",required:!1},progress:{name:"shape",value:{message:{name:"string",required:!1}},required:!1},success:{name:"shape",value:{path:{name:"string",required:!1},message:{name:"string",required:!1}},required:!1},failure:{name:"shape",value:{path:{name:"string",required:!1},message:{name:"string",required:!1}},required:!1}},required:!1}}}]},required:!1,description:"Callback to invoke when page is loaded; return true, false or a promise"},onNext:{type:{name:"union",value:[{name:"string"},{name:"func"},{name:"shape",value:{callback:{name:"string",required:!1},callbackProps:{name:"shape",value:{type:{name:"enum",value:[{value:"'action'",computed:!1}],required:!1},args:{name:"array",required:!1},progress:{name:"shape",value:{message:{name:"string",required:!1}},required:!1},success:{name:"shape",value:{path:{name:"string",required:!1},message:{name:"string",required:!1}},required:!1},failure:{name:"shape",value:{path:{name:"string",required:!1},message:{name:"string",required:!1}},required:!1}},required:!1}}}]},required:!1,description:"Callback to invoke when 'next' button is clicked; return true, false or a promise"},onPrevious:{type:{name:"union",value:[{name:"string"},{name:"func"},{name:"shape",value:{callback:{name:"string",required:!1},callbackProps:{name:"shape",value:{type:{name:"enum",value:[{value:"'action'",computed:!1}],required:!1},args:{name:"array",required:!1},progress:{name:"shape",value:{message:{name:"string",required:!1}},required:!1},success:{name:"shape",value:{path:{name:"string",required:!1},message:{name:"string",required:!1}},required:!1},failure:{name:"shape",value:{path:{name:"string",required:!1},message:{name:"string",required:!1}},required:!1}},required:!1}}}]},required:!1,description:"Callback to invoke when 'next' button is clicked; return true, false or a promise"},pageEventInfo:{type:{name:"union",value:[{name:"func"},{name:"object"}]},required:!1,description:"Object or callback to get page event info to send with wizard event"},onPageEventInfo:{type:{name:"func"},required:!1,description:"Callback to get page event info to send with wizard event"},renderHeader:{type:{name:"func"},required:!1,description:"Function rendering panel header element instead of the default one"},renderPanel:{type:{name:"func"},required:!1,description:"Callback to render panel method; if null then render without panel"},resolveCallbackMap:{type:{name:"object"},required:!1,description:"Callback map for resolver"},subTitle:{type:{name:"union",value:[{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},{name:"func"}]},required:!1,description:"Default panel subtitle expression"},renderSubTitle:{type:{name:"func"},required:!1,description:"Function to render custom subTitle"},title:{type:{name:"union",value:[{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},{name:"func"}]},required:!1,description:"Default panel title expression"},renderTitle:{type:{name:"func"},required:!1,description:"Function to render custom title"},buttonProps:{type:{name:"object"},required:!1,description:"Overrides for action buttons",defaultValue:{value:"{}",computed:!1}},panelClassName:{type:{name:"string"},required:!1,description:"Additional class name for panel."},actionBarLayout:{defaultValue:{value:"'default'",computed:!1},required:!1}}};