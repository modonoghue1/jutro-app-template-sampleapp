import _extends from"@babel/runtime-corejs3/helpers/extends";import React,{memo,useMemo}from"react";import isString from"lodash/isString";import isPlainObject from"lodash/isPlainObject";import{Redirect,Route,Switch}from"react-router-dom";import{resolveComponent,UnresolvedComponent,isComponentUnresolved}from"@jutro/uiconfig";import{sanitizeUrl}from"@jutro/platform";import PropTypes from"prop-types";const renderPageWithProps=(PageComponent,routeProps,wizardProps)=>React.createElement(PageComponent,_extends({},routeProps,wizardProps)),renderStepRoute=({step:step,baseRoute:baseRoute,componentMap:componentMap})=>{const id=step.id,title=step.title,componentProps=step.componentProps,content=step.content,contentLayout=step.contentLayout,wizardPageProps=step.wizardPageProps,key=step.key,fullRoute=`${baseRoute}/${step.route}`,ResolvedPageComponent=((requestedPageComponent,componentMap)=>{const ResolvedPageComponent=isString(requestedPageComponent)?resolveComponent(requestedPageComponent,void 0,componentMap):requestedPageComponent;return isPlainObject(ResolvedPageComponent)&&ResolvedPageComponent.component===requestedPageComponent||isComponentUnresolved(ResolvedPageComponent)?()=>React.createElement(UnresolvedComponent,{id:requestedPageComponent}):ResolvedPageComponent})(step.component,componentMap),wizardProps={id:id,title:title,...componentProps,uiProps:content||contentLayout?{content:content,contentLayout:contentLayout}:void 0,wizardPageProps:wizardPageProps};return React.createElement(Route,{key:key||id,path:fullRoute,exact:!0},React.createElement(ResolvedPageComponent,wizardProps))},renderSubRoute=(subRoute,baseRoute,componentMap)=>{const key=subRoute.key,route=subRoute.route,component=subRoute.component,componentProps=subRoute.componentProps,fullRoute=`${baseRoute}/${route}`,resolvedComponent=isString(component)?resolveComponent(component,void 0,componentMap):component;return resolvedComponent?React.createElement(Route,{key:key,path:fullRoute,render:routeProps=>renderPageWithProps(resolvedComponent,routeProps,{...componentProps})}):null},RoutesInternal=({steps:steps,basePath:basePath,baseRoute:baseRoute,initialStepPath:initialStepPath,componentMap:componentMap,renderNotFound:renderNotFound,subRoutes:subRoutes})=>{const firstLink=initialStepPath||steps[0]&&steps[0].route,stepRoutes=useMemo((()=>steps.map((step=>renderStepRoute({step:step,baseRoute:baseRoute,componentMap:componentMap})))),[steps,basePath,componentMap]),subRoutesMap=useMemo((()=>subRoutes.map((step=>renderSubRoute(step,baseRoute,componentMap)))),[subRoutes,baseRoute,componentMap]);return React.createElement(Switch,null,stepRoutes,subRoutesMap,firstLink&&React.createElement(Route,{exact:!0,path:baseRoute},(()=>{return React.createElement(Redirect,{to:(route=firstLink,sanitizeUrl(`${basePath}/${route}`))});var route})),renderNotFound&&React.createElement(Route,{render:renderNotFound}))};RoutesInternal.displayName="Routes";export const Routes=memo(RoutesInternal);const routesPropTypes={steps:PropTypes.array.isRequired,renderNotFound:PropTypes.func,initialStepPath:PropTypes.string,basePath:PropTypes.string.isRequired,baseRoute:PropTypes.string.isRequired,componentMap:PropTypes.object,subRoutes:PropTypes.array.isRequired};RoutesInternal.propTypes=routesPropTypes,RoutesInternal.defaultProps={subRoutes:[]},RoutesInternal.__docgenInfo={description:"Renders routes and page props from steps or sub routes\n\n@type {React.FC<PropTypes.InferProps<typeof routesPropTypes>>}\n\n@returns {React.ReactElement} React Router Switch component with routes for different routes of the Wizard.",methods:[],displayName:"Routes",props:{subRoutes:{defaultValue:{value:"[]",computed:!1},type:{name:"array"},required:!1,description:"Array of subRoute metadata: { key, route, component, ...}"},steps:{type:{name:"array"},required:!0,description:"Array of step metadata: { key, route, component, ...}"},renderNotFound:{type:{name:"func"},required:!1,description:"Callback to render 'not found' content; if not provided, nothing will be rendered if path is not found"},initialStepPath:{type:{name:"string"},required:!1,description:"Path to initial step; if not provided, the first step will be displayed"},basePath:{type:{name:"string"},required:!0,description:"Base path for the wizard; used when building step links"},baseRoute:{type:{name:"string"},required:!0,description:"Base route for the wizard; used when building step routes"},componentMap:{type:{name:"object"},required:!1,description:"Component map for page component resolver"}}},renderPageWithProps.__docgenInfo={componentName:"renderPageWithProps",packageName:"@jutro/wizard-next",description:"Renders a page component with additional props.",displayName:"renderPageWithProps",methods:[],actualName:"renderPageWithProps"},renderStepRoute.__docgenInfo={componentName:"renderStepRoute",packageName:"@jutro/wizard-next",description:"Renders a single step `<Route>` with a `render={renderPageWithProps}` callback",displayName:"renderStepRoute",methods:[],actualName:"renderStepRoute"},renderSubRoute.__docgenInfo={componentName:"renderSubRoute",packageName:"@jutro/wizard-next",description:"Renders a single step `<Route>` with a `render={this.renderPageWithProps}` callback",displayName:"renderSubRoute",methods:[],actualName:"renderSubRoute"},RoutesInternal.__docgenInfo={componentName:"Routes",packageName:"@jutro/wizard-next",description:"Renders routes and page props from steps or sub routes",displayName:"Routes",methods:[],actualName:"RoutesInternal",props:{steps:{type:{name:"array"},required:!0,description:"Array of step metadata: { key, route, component, ...}"},renderNotFound:{type:{name:"func"},required:!1,description:"Callback to render 'not found' content; if not provided, nothing will be rendered if path is not found"},initialStepPath:{type:{name:"string"},required:!1,description:"Path to initial step; if not provided, the first step will be displayed"},basePath:{type:{name:"string"},required:!0,description:"Base path for the wizard; used when building step links"},baseRoute:{type:{name:"string"},required:!0,description:"Base route for the wizard; used when building step routes"},componentMap:{type:{name:"object"},required:!1,description:"Component map for page component resolver"},subRoutes:{type:{name:"array"},required:!1,description:"Array of subRoute metadata: { key, route, component, ...}",defaultValue:{value:"[]",computed:!1}}}};