import _extends from"@babel/runtime-corejs3/helpers/extends";import React from"react";import PropTypes from"prop-types";import{AsyncButtonLink,ButtonLink}from"@jutro/router";import{intlMessageShape}from"@jutro/prop-types";function generateLink(name,destinationPath){if(destinationPath)return{pathname:destinationPath,state:{action:name}}}export function WizardButton({children:children,className:className,failTo:failTo,href:href,message:message,to:to,trigger:trigger,name:name,...others}){const link=generateLink(name,to);return trigger?React.createElement(AsyncButtonLink,_extends({to:link,className:className,onTrigger:trigger,message:message,failTo:generateLink(name,failTo),allowNoLeadingSlash:!0},others),children):React.createElement(ButtonLink,_extends({to:link,href:href,className:className,allowNoLeadingSlash:!0},others),children)}WizardButton.propTypes={name:PropTypes.string.isRequired,children:PropTypes.oneOfType([PropTypes.node,intlMessageShape]).isRequired,to:PropTypes.string,href:PropTypes.string,className:PropTypes.string,trigger:PropTypes.func,failTo:PropTypes.string,message:intlMessageShape},WizardButton.__docgenInfo={description:"",methods:[],displayName:"WizardButton",props:{name:{type:{name:"string"},required:!0,description:"Name of action; it's used to identify in the wizard what is the action triggered"},children:{type:{name:"union",value:[{name:"node"},{name:"custom",raw:"intlMessageShape"}]},required:!0,description:"The child element wrapped in the component"},to:{type:{name:"string"},required:!1,description:"Internal path to be invoked when clicked in Wizardbutton; if this & href are not provided, the button is not rendered in <WizardActionBar>"},href:{type:{name:"string"},required:!1,description:"External path to be invoked when clicked in Wizardbutton; if this & to are not provided, the button is not rendered in <WizardActionBar>. Does not work with Async Buttons."},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},trigger:{type:{name:"func"},required:!1,description:"Callback to invoke when button is clicked; return true, false or a promise"},failTo:{type:{name:"string"},required:!1,description:"Path to be invoked when trigger method fail or returns false. Use for internal paths"},message:{type:{name:"custom",raw:"intlMessageShape"},required:!1,description:"The message shown when executing trigger/promise"}}},WizardButton.__docgenInfo={componentName:"WizardButton",packageName:"@jutro/wizard-next",description:"",displayName:"WizardButton",methods:[],actualName:"WizardButton",props:{name:{type:{name:"string"},required:!0,description:"Name of action; it's used to identify in the wizard what is the action triggered"},children:{type:{name:"union",value:[{name:"node"},{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]}]},required:!0,description:"The child element wrapped in the component"},to:{type:{name:"string"},required:!1,description:"Internal path to be invoked when clicked in Wizardbutton; if this & href are not provided, the button is not rendered in <WizardActionBar>"},href:{type:{name:"string"},required:!1,description:"External path to be invoked when clicked in Wizardbutton; if this & to are not provided, the button is not rendered in <WizardActionBar>. Does not work with Async Buttons."},className:{type:{name:"string"},required:!1,description:"CSS class name for this component"},trigger:{type:{name:"func"},required:!1,description:"Callback to invoke when button is clicked; return true, false or a promise"},failTo:{type:{name:"string"},required:!1,description:"Path to be invoked when trigger method fail or returns false. Use for internal paths"},message:{type:{name:"union",value:[{name:"string"},{name:"shape",value:{id:{name:"string",required:!1},defaultMessage:{name:"string",required:!1},args:{name:"shape",value:{},required:!1}}}]},required:!1,description:"The message shown when executing trigger/promise"}}};