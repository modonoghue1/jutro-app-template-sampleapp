import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React,{useMemo}from"react";import PropTypes from"prop-types";import cx from"classnames";import pickBy from"lodash/pickBy";import identity from"lodash/identity";import styles from"./Flex.module.css";import{useBreakpoint}from"../breakpoint/useBreakpoint";const alignSelfMapping={top:styles.gwAlignSelfStart,middle:styles.gwAlignSelfCenter,bottom:styles.gwAlignSelfEnd,left:styles.gwAlignSelfStart,center:styles.gwAlignSelfCenter,right:styles.gwAlignSelfEnd,baseline:styles.gwAlignSelfBaseline,stretch:styles.gwAlignSelfStretch},textAlignMapping={left:styles.gwTextLeft,center:styles.gwTextCenter,right:styles.gwTextRight};let styleMappings=null;window.__TEST__&&(styleMappings={alignSelf:alignSelfMapping,textAlign:textAlignMapping});export{styleMappings};export const FlexItem=props=>{const componentProps=useBreakpoint(props).breakpointProps,visible=componentProps.visible,grow=componentProps.grow,shrink=componentProps.shrink,alignSelf=componentProps.alignSelf,textAlign=componentProps.textAlign,tag=componentProps.tag,children=componentProps.children,className=componentProps.className,other=(componentProps.dangerouslySetInnerHTML,_objectWithoutProperties(componentProps,["visible","grow","shrink","alignSelf","textAlign","tag","children","className","dangerouslySetInnerHTML"])),Tag=tag,inlineStyles=useMemo((()=>{if(grow||shrink)return pickBy({flexGrow:grow,flexShrink:shrink},identity)}),[grow,shrink]);if(!1===visible)return null;const textAlignClass=textAlign&&textAlignMapping[textAlign],alignSelfClass=alignSelf&&alignSelfMapping[alignSelf],classes=cx(styles.gwFlexItem,textAlignClass,alignSelfClass,className);return React.createElement(Tag,_extends({className:classes,style:inlineStyles},other),children)};const flexItemPropTypes={visible:PropTypes.bool,grow:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),shrink:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),textAlign:PropTypes.oneOf(Object.keys(textAlignMapping)),alignSelf:PropTypes.oneOf(Object.keys(alignSelfMapping)),tag:PropTypes.elementType,className:PropTypes.string,children:PropTypes.node,phone:PropTypes.object,phoneWide:PropTypes.object,tablet:PropTypes.object};FlexItem.propTypes=flexItemPropTypes,FlexItem.defaultProps={tag:"div"},FlexItem.displayName="FlexItem",FlexItem.__docgenInfo={description:"Defines a css grid 'FlexItem'. This is used in conjunction with 'Grid' parent.\n\n@param {object} [props] - props for this component\n@returns {React.ReactElement}\n\n@example\n<FlexItem\n  textAlign=\"left\"\n  align=\"middle\"\n  tablet={{ textAlign: 'center' }}\n  phoneWide={{ textAlign: 'center' }}\n  phone={{ visible: false }}\n>\n  custom content\n</FlexItem>\n\n@metadataType layout",methods:[],displayName:"FlexItem",props:{tag:{defaultValue:{value:"'div'",computed:!1},type:{name:"elementType"},required:!1,description:"Dom tag to use"},visible:{type:{name:"bool"},required:!1,description:"Define whether FlexItem is visible"},grow:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Whether flex item can grow"},shrink:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Whether flex item can shrink"},textAlign:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1}]},required:!1,description:"Horizontally align the contents of the column"},alignSelf:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Align the flex item according to the cross axis of the flex direction."},className:{type:{name:"string"},required:!1,description:"Css class(es) to append to tag"},children:{type:{name:"node"},required:!1,description:"Children for this item"},phone:{type:{name:"object"},required:!1,description:"Include any FlexItem property for use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any FlexItem property for use at 'phoneWide' breakpoint;"},tablet:{type:{name:"object"},required:!1,description:"Include any FlexItem property for use at 'tablet' breakpoint;"}}},FlexItem.__docgenInfo={componentName:"FlexItem",packageName:"@jutro/layout",description:"Defines a css grid 'FlexItem'. This is used in conjunction with 'Grid' parent.",displayName:"FlexItem",methods:[],actualName:"FlexItem",metadataType:"layout",props:{visible:{type:{name:"bool"},required:!1,description:"Define whether FlexItem is visible"},grow:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Whether flex item can grow"},shrink:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Whether flex item can shrink"},textAlign:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1}]},required:!1,description:"Horizontally align the contents of the column"},alignSelf:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Align the flex item according to the cross axis of the flex direction."},tag:{type:{name:"elementType"},required:!1,description:"Dom tag to use",defaultValue:{value:"'div'",computed:!1}},className:{type:{name:"string"},required:!1,description:"Css class(es) to append to tag"},children:{type:{name:"node"},required:!1,description:"Children for this item"},phone:{type:{name:"object"},required:!1,description:"Include any FlexItem property for use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any FlexItem property for use at 'phoneWide' breakpoint;"},tablet:{type:{name:"object"},required:!1,description:"Include any FlexItem property for use at 'tablet' breakpoint;"}}};