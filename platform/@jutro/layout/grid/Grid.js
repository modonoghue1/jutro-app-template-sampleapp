import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import PropTypes from"prop-types";import React from"react";import cx from"classnames";import mapValues from"lodash/mapValues";import map from"lodash/fp/map";import styles from"./Grid.module.css";import{useBreakpoint}from"../breakpoint/useBreakpoint";const mapToFraction=map((el=>Number.isNaN(Number(el))?el:`${el}fr`));export const gaps={none:"None",small:"Small",medium:"Medium",large:"Large"};const vgapMapping=mapValues(gaps,(type=>styles[`vgap${type}`])),hgapMapping=mapValues(gaps,(type=>styles[`hgap${type}`])),alignments={top:"Start",middle:"Center",bottom:"End",baseline:"Baseline",stretch:"Stretch"};export const gridAlignments=Object.keys(alignments);const valignItemsMapping=mapValues(alignments,(type=>styles[`alignItems${type}`])),valignContentMapping=mapValues(alignments,(type=>styles[`alignContent${type}`])),justifications={left:"Start",center:"Center",right:"End",around:"Around",between:"Between",evenly:"Evenly",stretch:"Stretch"},justifyItemsMapping=mapValues(justifications,(type=>styles[`justifyItems${type}`])),justifyContentMapping=mapValues(justifications,(type=>styles[`justifyContent${type}`]));export let styleMappings=null;window.__TEST__&&(styleMappings={vgap:vgapMapping,hgap:hgapMapping,alignItems:valignItemsMapping,alignContent:valignContentMapping,justifyItems:justifyItemsMapping,justifyContent:justifyContentMapping});export const Grid=props=>{const breakpointProps=useBreakpoint(props).breakpointProps,columnsProp=breakpointProps.columns,repeat=breakpointProps.repeat,rowsProp=breakpointProps.rows,autoRows=breakpointProps.autoRows,gap=breakpointProps.gap,_breakpointProps$vgap=breakpointProps.vgap,vgap=void 0===_breakpointProps$vgap?gap:_breakpointProps$vgap,_breakpointProps$hgap=breakpointProps.hgap,hgap=void 0===_breakpointProps$hgap?gap:_breakpointProps$hgap,justifyContent=breakpointProps.justifyContent,valignContent=breakpointProps.valignContent,justifyItems=breakpointProps.justifyItems,valignItems=breakpointProps.valignItems,tag=breakpointProps.tag,children=breakpointProps.children,className=breakpointProps.className,blockPointerEvents=breakpointProps.blockPointerEvents,style=breakpointProps.style,other=(breakpointProps.dangerouslySetInnerHTML,_objectWithoutProperties(breakpointProps,["columns","repeat","rows","autoRows","gap","vgap","hgap","justifyContent","valignContent","justifyItems","valignItems","tag","children","className","blockPointerEvents","style","dangerouslySetInnerHTML"])),columns=mapToFraction(columnsProp),rows=mapToFraction(rowsProp),vgapClass=vgap&&vgapMapping[vgap],hgapClass=hgap&&hgapMapping[hgap],valignContentClass=valignContent&&valignContentMapping[valignContent],justifyContentClass=justifyContent&&justifyContentMapping[justifyContent],valignItemsClass=valignItems&&valignItemsMapping[valignItems],justifyItemsClass=justifyItems&&justifyItemsMapping[justifyItems],classes=cx(styles.grid,vgapClass,hgapClass,valignContentClass,justifyContentClass,valignItemsClass,justifyItemsClass,className);let gridColumns,gridRows,gridAutoRows,hasHiddenColumns=!1;if(columns)if(repeat)gridColumns=`repeat(${repeat}, ${columns.join(" ")}`;else{const filteredColumns=columns.filter((column=>"0fr"!==column));gridColumns=filteredColumns.join(" "),hasHiddenColumns=columns.length!==filteredColumns.length}rows&&(gridRows=rows.join(" ")),autoRows&&(gridAutoRows=autoRows.join(" "));const inlineStyles={...style};(gridColumns||gridRows||gridAutoRows)&&(gridColumns&&(inlineStyles.gridTemplateColumns=gridColumns),gridRows&&(inlineStyles.gridTemplateRows=gridRows),gridAutoRows&&(inlineStyles.gridAutoRows=gridAutoRows),blockPointerEvents&&(inlineStyles.pointerEvents="none"));let realChildren=children;if(hasHiddenColumns&&columns){const colLength=columns.length;realChildren=React.Children.map(children,((child,index)=>"0fr"!==columns[index%colLength]?child:null))}const Tag=tag;return React.createElement(Tag,_extends({className:classes,style:inlineStyles},other),realChildren)};export const gridPropTypes={columns:PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string,PropTypes.number]).isRequired),repeat:PropTypes.oneOfType([PropTypes.oneOf(["auto-fit","auto-fill"]),PropTypes.number,PropTypes.string]),rows:PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string,PropTypes.number]).isRequired),autoRows:PropTypes.array,gap:PropTypes.oneOf(Object.keys(gaps)),hgap:PropTypes.oneOf(Object.keys(gaps)),vgap:PropTypes.oneOf(Object.keys(gaps)),valignContent:PropTypes.oneOf(gridAlignments),justifyContent:PropTypes.oneOf(Object.keys(justifications)),valignItems:PropTypes.oneOf(gridAlignments),justifyItems:PropTypes.oneOf(Object.keys(justifications)),tag:PropTypes.elementType,className:PropTypes.string,children:PropTypes.node,style:PropTypes.object,phone:PropTypes.object,phoneWide:PropTypes.object,tablet:PropTypes.object,blockPointerEvents:PropTypes.bool};Grid.propTypes=gridPropTypes,Grid.defaultProps={gap:"medium",tag:"div"},Grid.displayName="Grid",Grid.__docgenInfo={description:"Renders a css grid. For each grid item, place its children in an Jutro `GridItem`.\n\n@metadataType layout",methods:[],displayName:"Grid",props:{gap:{defaultValue:{value:"'medium'",computed:!1},type:{name:"enum",value:[{value:'"none"',computed:!1},{value:'"small"',computed:!1},{value:'"medium"',computed:!1},{value:'"large"',computed:!1}]},required:!1,description:"Gap between rows and columns ('none', 'small', 'medium', 'large')"},tag:{defaultValue:{value:"'div'",computed:!1},type:{name:"elementType"},required:!1,description:"Optional dom tag to render"},columns:{type:{name:"arrayOf",value:{name:"union",value:[{name:"string"},{name:"number"}]}},required:!1,description:"Define explicit columns widths"},repeat:{type:{name:"union",value:[{name:"enum",value:[{value:"'auto-fit'",computed:!1},{value:"'auto-fill'",computed:!1}]},{name:"number"},{name:"string"}]},required:!1,description:"Repeat columns"},rows:{type:{name:"arrayOf",value:{name:"union",value:[{name:"string"},{name:"number"}]}},required:!1,description:"Define explicit rows heights"},autoRows:{type:{name:"array"},required:!1,description:"Define implicit rows"},hgap:{type:{name:"enum",value:[{value:'"none"',computed:!1},{value:'"small"',computed:!1},{value:'"medium"',computed:!1},{value:'"large"',computed:!1}]},required:!1,description:"Gap between columns ('none', 'small', 'medium', 'large')\nIf unspecified, will fallback to 'gap' property."},vgap:{type:{name:"enum",value:[{value:'"none"',computed:!1},{value:'"small"',computed:!1},{value:'"medium"',computed:!1},{value:'"large"',computed:!1}]},required:!1,description:"Gap between rows ('none', 'small', 'medium', 'large')\nIf unspecified, will fallback to 'gap' property."},valignContent:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Vertical align the grid within its container; default - 'stretch'"},justifyContent:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1},{value:'"around"',computed:!1},{value:'"between"',computed:!1},{value:'"evenly"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Justify the grid within its container (left, center, right, around, between, evenly)"},valignItems:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Vertical align all items within the grid; default - 'stretch'"},justifyItems:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1},{value:'"around"',computed:!1},{value:'"between"',computed:!1},{value:'"evenly"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Justify all items within the grid (left, center, right, around, between, evenly)"},className:{type:{name:"string"},required:!1,description:"Optional css class(es) to add to the grid tag"},children:{type:{name:"node"},required:!1,description:"Children; preferably 'GridItem'; works with any child"},style:{type:{name:"object"},required:!1,description:"DOM element styles"},phone:{type:{name:"object"},required:!1,description:"Include any Grid property for use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any Grid property for use at 'phoneWide' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any Grid property for use at 'tablet' and 'phone' breakpoint;"},blockPointerEvents:{type:{name:"bool"},required:!1,description:""}}},Grid.__docgenInfo={componentName:"Grid",packageName:"@jutro/layout",description:"Renders a css grid. For each grid item, place its children in an Jutro `GridItem`.",displayName:"Grid",methods:[],actualName:"Grid",metadataType:"layout",props:{columns:{type:{name:"arrayOf",value:{name:"union",value:[{name:"string"},{name:"number"}]}},required:!1,description:"Define explicit columns widths"},repeat:{type:{name:"union",value:[{name:"enum",value:[{value:"'auto-fit'",computed:!1},{value:"'auto-fill'",computed:!1}]},{name:"number"},{name:"string"}]},required:!1,description:"Repeat columns"},rows:{type:{name:"arrayOf",value:{name:"union",value:[{name:"string"},{name:"number"}]}},required:!1,description:"Define explicit rows heights"},autoRows:{type:{name:"array"},required:!1,description:"Define implicit rows"},gap:{type:{name:"enum",value:[{value:'"none"',computed:!1},{value:'"small"',computed:!1},{value:'"medium"',computed:!1},{value:'"large"',computed:!1}]},required:!1,description:"Gap between rows and columns ('none', 'small', 'medium', 'large')",defaultValue:{value:"'medium'",computed:!1}},hgap:{type:{name:"enum",value:[{value:'"none"',computed:!1},{value:'"small"',computed:!1},{value:'"medium"',computed:!1},{value:'"large"',computed:!1}]},required:!1,description:"Gap between columns ('none', 'small', 'medium', 'large')\nIf unspecified, will fallback to 'gap' property."},vgap:{type:{name:"enum",value:[{value:'"none"',computed:!1},{value:'"small"',computed:!1},{value:'"medium"',computed:!1},{value:'"large"',computed:!1}]},required:!1,description:"Gap between rows ('none', 'small', 'medium', 'large')\nIf unspecified, will fallback to 'gap' property."},valignContent:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Vertical align the grid within its container; default - 'stretch'"},justifyContent:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1},{value:'"around"',computed:!1},{value:'"between"',computed:!1},{value:'"evenly"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Justify the grid within its container (left, center, right, around, between, evenly)"},valignItems:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Vertical align all items within the grid; default - 'stretch'"},justifyItems:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1},{value:'"around"',computed:!1},{value:'"between"',computed:!1},{value:'"evenly"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Justify all items within the grid (left, center, right, around, between, evenly)"},tag:{type:{name:"elementType"},required:!1,description:"Optional dom tag to render",defaultValue:{value:"'div'",computed:!1}},className:{type:{name:"string"},required:!1,description:"Optional css class(es) to add to the grid tag"},children:{type:{name:"node"},required:!1,description:"Children; preferably 'GridItem'; works with any child"},style:{type:{name:"object"},required:!1,description:"DOM element styles"},phone:{type:{name:"object"},required:!1,description:"Include any Grid property for use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any Grid property for use at 'phoneWide' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any Grid property for use at 'tablet' and 'phone' breakpoint;"},blockPointerEvents:{type:{name:"bool"},required:!1,description:""}}};