import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import React from"react";import PropTypes from"prop-types";import{ComponentPropTypes}from"@jutro/prop-types";import{warning}from"@jutro/logger";import times from"lodash/times";import{GridLayout}from"./GridLayout";import{useBreakpoint}from"../breakpoint/useBreakpoint";import{mergeColumnsToFirst,mergeColumnsToLast,stackColumnsToFirst,stackColumnsToLast}from"./columnsRearrangeFunctions";const variantsMap={mergeColumnsToFirst:mergeColumnsToFirst,mergeColumnsToLast:mergeColumnsToLast,stackColumnsToFirst:stackColumnsToFirst,stackColumnsToLast:stackColumnsToLast,default:null};export const columnsLayoutVariants=Object.keys(variantsMap);const columnsLayoutChildrenPropType=ComponentPropTypes.childOfComponentType(GridLayout).isRequired,columnsLayoutColumnsPropType=ComponentPropTypes.withLength((props=>React.Children.count(props.children))),columnsLayoutProps={...GridLayout.propTypes,id:PropTypes.string.isRequired,children:columnsLayoutChildrenPropType,columns:columnsLayoutColumnsPropType,onColumnsRearrange:PropTypes.func,variant:PropTypes.oneOf(columnsLayoutVariants)};export const ColumnsLayout=({columns:columnsProp,children:childrenProp,gridItems:desktopGridItems,...props})=>{const desktopColumns=columnsProp||Array(React.Children.count(childrenProp)).fill(1),breakpointProps=useBreakpoint({gridItems:desktopGridItems,columns:desktopColumns,...props}).breakpointProps,columns=breakpointProps.columns,variant=breakpointProps.variant,onColumnsRearrange=breakpointProps.onColumnsRearrange,_breakpointProps$grid=breakpointProps.gridItems,gridItems=void 0===_breakpointProps$grid?[]:_breakpointProps$grid,rest=_objectWithoutProperties(breakpointProps,["columns","variant","onColumnsRearrange","gridItems"]),rearrangeFunction=onColumnsRearrange||variant&&variantsMap[variant];let children=childrenProp,rearrangedGridItems=gridItems;if(columns.length>1&&desktopColumns.length!==columns.length)if(rearrangeFunction){const rearrangedChildren=rearrangeFunction(React.Children.toArray(childrenProp),columns.length);rearrangedChildren.length!==columns.length&&warning(`GridLayout: onColumnsRearrange returned incorrect number of columns. Expected length: ${columns.length} but received ${rearrangedChildren.length}.`),children=rearrangedChildren}else rearrangedGridItems=[gridItems[0],...times(desktopColumns.length-2,(index=>({rowSpan:2,...gridItems[index+1]}))),gridItems[desktopColumns.length-1]];return React.createElement(GridLayout,_extends({valignItems:"top",columns:columns,gridItems:rearrangedGridItems},rest),children)};ColumnsLayout.propTypes=columnsLayoutProps,ColumnsLayout.defaultProps={gap:"large",tablet:{columns:[1],gridItems:[]},phoneWide:{columns:[1],gridItems:[]},phone:{columns:[1],gridItems:[]},tag:"section",variant:"default"},ColumnsLayout.displayName="ColumnsLayout",ColumnsLayout.__docgenInfo={description:"Renders number of independent columns and manages its order for different breakpoints.\nExtends GridLayout component.\nBy default for desktop, it divides columns to have equal width (e.g 3 columns => [1, 1, 1]),\nfor tablet and mobile renders single column grid.\n\n@metadataType layout",methods:[],displayName:"ColumnsLayout",props:{gap:{defaultValue:{value:"'large'",computed:!1},required:!1},tablet:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},required:!1},phoneWide:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},required:!1},phone:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},required:!1},tag:{defaultValue:{value:"'section'",computed:!1},required:!1},variant:{defaultValue:{value:"'default'",computed:!1},type:{name:"enum",value:[{value:'"mergeColumnsToFirst"',computed:!1},{value:'"mergeColumnsToLast"',computed:!1},{value:'"stackColumnsToFirst"',computed:!1},{value:'"stackColumnsToLast"',computed:!1},{value:'"default"',computed:!1}]},required:!1,description:"Specifies how the columns will be stacked or merged on the breakpoint.\nIgnored if `onColumnsRearrange` provided"},id:{type:{name:"string"},required:!0,description:"Unique identifier"},children:{type:{name:"custom",raw:"columnsLayoutChildrenPropType"},required:!1,description:"Each child is a separate column. Accepts only `GridLayout` components as children."},columns:{type:{name:"custom",raw:"columnsLayoutColumnsPropType"},required:!1,description:"Grid's columns width/ratio configuration.\nThe columns length for desktop have to be equal to number of children (columns).\nIf not provided, it will be inferred as the number of children with a width of one fraction for each column."},onColumnsRearrange:{type:{name:"custom",raw:"PropTypes.func as PropTypes.Requireable<ColumnsRearrangeFunction>"},required:!1,description:"Callback to rearrange children (columns) that will be invoked on the breakpoint change.\nIt is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`.\nWhen provided, it overrides the `variant` prop."}},composes:["./GridLayout"]},ColumnsLayout.__docgenInfo={componentName:"ColumnsLayout",packageName:"@jutro/layout",description:"Renders number of independent columns and manages its order for different breakpoints.\nExtends GridLayout component.\nBy default for desktop, it divides columns to have equal width (e.g 3 columns => [1, 1, 1]),\nfor tablet and mobile renders single column grid.",displayName:"ColumnsLayout",methods:[],actualName:"ColumnsLayout",metadataType:"layout",props:{id:{type:{name:"string"},required:!0,description:"Unique identifier"},children:{type:{name:"custom",raw:"columnsLayoutChildrenPropType"},required:!1,description:"Each child is a separate column. Accepts only `GridLayout` components as children."},columns:{type:{name:"custom",raw:"columnsLayoutColumnsPropType"},required:!1,description:"Grid's columns width/ratio configuration.\nThe columns length for desktop have to be equal to number of children (columns).\nIf not provided, it will be inferred as the number of children with a width of one fraction for each column."},onColumnsRearrange:{type:{name:"func"},required:!1,description:"Callback to rearrange children (columns) that will be invoked on the breakpoint change.\nIt is invoked with the arguments of an array of the children and breakpoint columns' length, `(children, columnsLength) => newChildren`.\nWhen provided, it overrides the `variant` prop."},variant:{type:{name:"enum",value:[{value:'"mergeColumnsToFirst"',computed:!1},{value:'"mergeColumnsToLast"',computed:!1},{value:'"stackColumnsToFirst"',computed:!1},{value:'"stackColumnsToLast"',computed:!1},{value:'"default"',computed:!1}]},required:!1,description:"Specifies how the columns will be stacked or merged on the breakpoint.\nIgnored if `onColumnsRearrange` provided",defaultValue:{value:"'default'",computed:!1}},gap:{defaultValue:{value:"'large'",computed:!1},required:!1},tablet:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},required:!1},phoneWide:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},required:!1},phone:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},required:!1},tag:{defaultValue:{value:"'section'",computed:!1},required:!1}},composes:["./GridLayout"]};