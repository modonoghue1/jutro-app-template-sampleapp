import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";import PropTypes from"prop-types";import React from"react";import cx from"classnames";import{warning}from"@jutro/logger";import styles from"./Grid.module.css";import{useBreakpoint}from"../breakpoint/useBreakpoint";const valignMapping={top:styles.alignSelfStart,middle:styles.alignSelfCenter,bottom:styles.alignSelfEnd,baseline:styles.alignSelfBaseline,stretch:styles.alignSelfStretch},alignMapping={start:styles.justifySelfStart,center:styles.justifySelfCenter,end:styles.justifySelfEnd,stretch:styles.justifySelfStretch},textAlignMapping={left:styles.textLeft,center:styles.textCenter,right:styles.textRight};export let styleMappings=null;window.__TEST__&&(styleMappings={valign:valignMapping,textAlign:textAlignMapping,align:alignMapping});export const GridItem=props=>{const breakpointProps=useBreakpoint(props).breakpointProps,colSpan=breakpointProps.colSpan,colStart=breakpointProps.colStart,clone=breakpointProps.clone,fullWidth=breakpointProps.fullWidth,rowSpan=breakpointProps.rowSpan,rowStart=breakpointProps.rowStart,visible=breakpointProps.visible,align=breakpointProps.align,valign=breakpointProps.valign,textAlign=breakpointProps.textAlign,tag=breakpointProps.tag,children=breakpointProps.children,className=breakpointProps.className,style=breakpointProps.style,other=(breakpointProps.dangerouslySetInnerHTML,_objectWithoutProperties(breakpointProps,["colSpan","colStart","clone","fullWidth","rowSpan","rowStart","visible","align","valign","textAlign","tag","children","className","style","dangerouslySetInnerHTML"])),Tag=tag;if(!1===visible)return null;const classes=cx(textAlign&&textAlignMapping[textAlign],valign&&valignMapping[valign],align&&alignMapping[align],className),inlineStyles={...style};colStart||colSpan?(colStart&&(inlineStyles.gridColumnStart=colStart),colSpan&&(inlineStyles.gridColumnEnd=`span ${colSpan}`),fullWidth&&warning("GridItem: fullWidth property is ignored because colStart or colSpan is provided.")):fullWidth&&(inlineStyles.gridColumnStart=1,inlineStyles.gridColumnEnd=-1),rowStart&&(inlineStyles.gridRowStart=rowStart),rowSpan&&(inlineStyles.gridRowEnd=`span ${rowSpan}`);const renderWithWrapper=wrappedChildren=>React.createElement(Tag,_extends({className:classes,style:inlineStyles},other),wrappedChildren);return clone?React.createElement(React.Fragment,null,React.Children.map(children,(child=>React.isValidElement(child)?React.cloneElement(child,{...other,className:cx(child.props.className,classes),style:{...child.props.style,...inlineStyles}}):renderWithWrapper(child)))):renderWithWrapper(children)};const gridItemPropTypes={clone:PropTypes.bool,fullWidth:PropTypes.bool,visible:PropTypes.bool,rowSpan:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),rowStart:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),colSpan:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),colStart:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),textAlign:PropTypes.oneOf(Object.keys(textAlignMapping)),valign:PropTypes.oneOf(Object.keys(valignMapping)),align:PropTypes.oneOf(Object.keys(alignMapping)),tag:PropTypes.elementType,className:PropTypes.string,children:PropTypes.node,style:PropTypes.object,phone:PropTypes.object,phoneWide:PropTypes.object,tablet:PropTypes.object};GridItem.propTypes=gridItemPropTypes,GridItem.defaultProps={tag:"div"},GridItem.displayName="GridItem",GridItem.__docgenInfo={description:"Defines a css grid 'GridItem'. This is used in conjunction with 'Grid' parent.\n\n@param {object} [props] - props for this component\n@returns {React.ReactElement}\n\n@example\n<GridItem\n  textAlign=\"left\"\n  valign=\"middle\"\n  align=\"center\"\n  tablet={{ textAlign: 'center' }}\n  phoneWide={{ textAlign: 'center' }}\n  phone={{ visible: false }}\n>\n  custom content\n</GridItem>\n\n@metadataType layout",methods:[],displayName:"GridItem",props:{tag:{defaultValue:{value:"'div'",computed:!1},type:{name:"elementType"},required:!1,description:"Dom tag to use"},clone:{type:{name:"bool"},required:!1,description:"Render the child without tag wrapper. It passes classNames and styles directly to child element if possible.\nIf not possible, it falls back to wrapping with a tag (for not valid React elements)"},fullWidth:{type:{name:"bool"},required:!1,description:"If true, item takes full width of parent grid.\nIgnored if colStart or colSpan is specified."},visible:{type:{name:"bool"},required:!1,description:"Specify whether Grid item should be visible"},rowSpan:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"How many rows it takes"},rowStart:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Row number to start"},colSpan:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"How many columns it takes"},colStart:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Column number to start"},textAlign:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1}]},required:!1,description:"Horizontally align the contents of the column"},valign:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Vertically align the column (relative to other columns in the same row). By default the column will be stretched to equal height."},align:{type:{name:"enum",value:[{value:'"start"',computed:!1},{value:'"center"',computed:!1},{value:'"end"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Align the column. By default the column will be stretched horizontally."},className:{type:{name:"string"},required:!1,description:"Css class(es) to append to tag"},children:{type:{name:"node"},required:!1,description:"Children for this item"},style:{type:{name:"object"},required:!1,description:"DOM element styles"},phone:{type:{name:"object"},required:!1,description:"Include any GridItem property for use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any GridItem property for use at 'phoneWide' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any GridItem property for use at 'tablet' breakpoint"}}},GridItem.__docgenInfo={componentName:"GridItem",packageName:"@jutro/layout",description:"Defines a css grid 'GridItem'. This is used in conjunction with 'Grid' parent.",displayName:"GridItem",methods:[],actualName:"GridItem",metadataType:"layout",props:{clone:{type:{name:"bool"},required:!1,description:"Render the child without tag wrapper. It passes classNames and styles directly to child element if possible.\nIf not possible, it falls back to wrapping with a tag (for not valid React elements)"},fullWidth:{type:{name:"bool"},required:!1,description:"If true, item takes full width of parent grid.\nIgnored if colStart or colSpan is specified."},visible:{type:{name:"bool"},required:!1,description:"Specify whether Grid item should be visible"},rowSpan:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"How many rows it takes"},rowStart:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Row number to start"},colSpan:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"How many columns it takes"},colStart:{type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1,description:"Column number to start"},textAlign:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1}]},required:!1,description:"Horizontally align the contents of the column"},valign:{type:{name:"enum",value:[{value:'"top"',computed:!1},{value:'"middle"',computed:!1},{value:'"bottom"',computed:!1},{value:'"baseline"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Vertically align the column (relative to other columns in the same row). By default the column will be stretched to equal height."},align:{type:{name:"enum",value:[{value:'"start"',computed:!1},{value:'"center"',computed:!1},{value:'"end"',computed:!1},{value:'"stretch"',computed:!1}]},required:!1,description:"Align the column. By default the column will be stretched horizontally."},tag:{type:{name:"elementType"},required:!1,description:"Dom tag to use",defaultValue:{value:"'div'",computed:!1}},className:{type:{name:"string"},required:!1,description:"Css class(es) to append to tag"},children:{type:{name:"node"},required:!1,description:"Children for this item"},style:{type:{name:"object"},required:!1,description:"DOM element styles"},phone:{type:{name:"object"},required:!1,description:"Include any GridItem property for use at 'phone' breakpoint"},phoneWide:{type:{name:"object"},required:!1,description:"Include any GridItem property for use at 'phoneWide' breakpoint"},tablet:{type:{name:"object"},required:!1,description:"Include any GridItem property for use at 'tablet' breakpoint"}}};