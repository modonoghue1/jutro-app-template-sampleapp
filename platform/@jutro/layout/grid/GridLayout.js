import _extends from"@babel/runtime-corejs3/helpers/extends";import _objectWithoutProperties from"@babel/runtime-corejs3/helpers/objectWithoutProperties";var _Grid$propTypes,_Grid$propTypes2;import React from"react";import PropTypes from"prop-types";import omit from"lodash/omit";import{ComponentPropTypes}from"@jutro/prop-types";import{Grid}from"./Grid";import{GridItem}from"./GridItem";import{useBreakpoint}from"../breakpoint/useBreakpoint";const gridItemOptions=omit(GridItem.propTypes,["children"]),gridItemOptionsShape=PropTypes.shape(gridItemOptions),elementsWithId=ComponentPropTypes.elementsWithId,gridLayoutProps={...Grid.propTypes,id:PropTypes.string.isRequired,children:elementsWithId.isRequired,defaultGridItem:gridItemOptionsShape,gridItems:PropTypes.arrayOf(gridItemOptionsShape),gap:null===(_Grid$propTypes=Grid.propTypes)||void 0===_Grid$propTypes?void 0:_Grid$propTypes.gap,tag:null===(_Grid$propTypes2=Grid.propTypes)||void 0===_Grid$propTypes2?void 0:_Grid$propTypes2.tag,phone:PropTypes.object,phoneWide:PropTypes.object,tablet:PropTypes.object};export const GridLayout=props=>{const breakpointProps=useBreakpoint(props).breakpointProps,gridItems=breakpointProps.gridItems,defaultGridItem=breakpointProps.defaultGridItem,children=breakpointProps.children,gap=breakpointProps.gap,other=_objectWithoutProperties(breakpointProps,["gridItems","defaultGridItem","children","gap"]);return React.createElement(Grid,_extends({},other,{gap:gap}),React.Children.map(children,((child,index)=>{if(!child)return null;const itemOptions=null==gridItems?void 0:gridItems[index];return React.createElement(GridItem,_extends({key:child.props.id,clone:!0},defaultGridItem,itemOptions),child)})))};GridLayout.propTypes=gridLayoutProps,GridLayout.defaultProps={...omit(Grid.defaultProps,["children"]),gridItems:[],tablet:{columns:[1],gridItems:[]},phoneWide:{columns:[1],gridItems:[]},phone:{columns:[1],gridItems:[]},gap:"large",tag:"section"},GridLayout.displayName="GridLayout",GridLayout.__docgenInfo={description:"Renders a CSS Grid and applies GridItem styles to each child\n(using GridItem's `clone` property (React.cloneElement)).\nFor tablet and mobile renders single column grid by default.\n\n@metadataType layout",methods:[],displayName:"GridLayout",props:{gridItems:{defaultValue:{value:"[]",computed:!1},type:{name:"arrayOf",value:{name:"custom",raw:"gridItemOptionsShape"}},required:!1,description:"An array of GridItem properties to be applied to child with the same index.\nIf provided, it will extends/override the `defaultGridItem` properties for each item.\nPassing `null` or `undefined` will skip applying it to GridItem."},tablet:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},type:{name:"object"},required:!1,description:"Include any GridLayout property for use at 'tablet' and 'phone' breakpoint;"},phoneWide:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},type:{name:"object"},required:!1,description:"Include any GridLayout property for use at 'phoneWide' breakpoint"},phone:{defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1},type:{name:"object"},required:!1,description:"Include any GridLayout property for use at 'phone' breakpoint"},gap:{defaultValue:{value:"'large'",computed:!1},type:{name:"custom",raw:"Grid.propTypes?.gap"},required:!1,description:"Gap between rows and columns"},tag:{defaultValue:{value:"'section'",computed:!1},type:{name:"custom",raw:"Grid.propTypes?.tag"},required:!1,description:"Optional dom tag to render"},id:{type:{name:"string"},required:!0,description:"Unique identifier"},children:{type:{name:"custom",raw:"elementsWithId.isRequired"},required:!1,description:"React elements with `id` properties"},defaultGridItem:{type:{name:"custom",raw:"gridItemOptionsShape"},required:!1,description:"`GridItem` properties that will to be applied to each child by default."}},composes:["./Grid"]},GridLayout.__docgenInfo={componentName:"GridLayout",packageName:"@jutro/layout",description:"Renders a CSS Grid and applies GridItem styles to each child\n(using GridItem's `clone` property (React.cloneElement)).\nFor tablet and mobile renders single column grid by default.",displayName:"GridLayout",methods:[],actualName:"GridLayout",metadataType:"layout",props:{id:{type:{name:"string"},required:!0,description:"Unique identifier"},children:{type:{name:"custom",raw:"elementsWithId"},required:!0,description:"React elements with `id` properties"},defaultGridItem:{type:{name:"custom",raw:"gridItemOptionsShape"},required:!1,description:"`GridItem` properties that will to be applied to each child by default."},gridItems:{type:{name:"arrayOf",value:{name:"custom",raw:"gridItemOptionsShape"}},required:!1,description:"An array of GridItem properties to be applied to child with the same index.\nIf provided, it will extends/override the `defaultGridItem` properties for each item.\nPassing `null` or `undefined` will skip applying it to GridItem.",defaultValue:{value:"[]",computed:!1}},gap:{type:{name:"custom",raw:"Grid.propTypes?.gap"},required:!1,description:"Gap between rows and columns",defaultValue:{value:"'large'",computed:!1}},tag:{type:{name:"custom",raw:"Grid.propTypes?.tag"},required:!1,description:"Optional dom tag to render",defaultValue:{value:"'section'",computed:!1}},phone:{type:{name:"object"},required:!1,description:"Include any GridLayout property for use at 'phone' breakpoint",defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1}},phoneWide:{type:{name:"object"},required:!1,description:"Include any GridLayout property for use at 'phoneWide' breakpoint",defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1}},tablet:{type:{name:"object"},required:!1,description:"Include any GridLayout property for use at 'tablet' and 'phone' breakpoint;",defaultValue:{value:"{\n    columns: [1],\n    gridItems: [],\n}",computed:!1}}},composes:["./Grid"]};