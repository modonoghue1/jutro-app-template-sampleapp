{"version":3,"sources":["../../../src/columns/WarningColumn.js"],"names":["React","Icon","Flex","FlexItem","DisplayColumn","WarningColumn","__DEV__","Error","defaultCell","row","rowId","id","path","warningPath","visible","value","get","warning","displayName","defaultProps","renderCell"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,eAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC/B,MAAIC,OAAJ,EAAa;AACT,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACH;;AACD,SAAO,oBAAC,KAAD,CAAO,QAAP,OAAP;AACH,CALM;;AAOPF,aAAa,CAACG,WAAd,GAA4B,UACxBC,GADwB,EAExBC,KAFwB,QAIvB;AAAA;;AAAA,MADCC,EACD,QADCA,EACD;AAAA,MADKC,IACL,QADKA,IACL;AAAA,MADWC,WACX,QADWA,WACX;AAAA,MADwBC,OACxB,QADwBA,OACxB;;AACD,MAAIA,OAAO,KAAK,KAAhB,EAAuB;AACnB,WAAO,IAAP;AACH;;AAED,MAAMC,KAAK,GAAGC,GAAG,CAACP,GAAD,EAAMG,IAAN,CAAjB;;AAEA,MAAI,CAACG,KAAL,EAAY;AACR,WAAOX,aAAa,CAACI,WAAd,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AAAEC,MAAAA,EAAE,EAAFA,EAAF;AAAMC,MAAAA,IAAI,EAAJA;AAAN,KAAtC,CAAP;AACH;;AAED,MAAMK,OAAO,GAAGD,GAAG,CAACP,GAAD,EAAMI,WAAN,CAAnB;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,GAAG,EAAC;AAA9B,KACI,oBAAC,QAAD,QAAWE,KAAX,CADJ,EAEKE,OAAO,IAAI,oBAAC,IAAD;AAAM,IAAA,EAAE,+CAAKN,EAAL,uBAAWD,KAAX,UAAR;AAAiC,IAAA,IAAI,EAAC;AAAtC,IAFhB,CADJ;AAMH,CAvBD;;AAyBAL,aAAa,CAACa,WAAd,GAA4B,eAA5B;AAEAb,aAAa,CAACc,YAAd,mCACOf,aAAa,CAACe,YADrB;AAEIC,EAAAA,UAAU,EAAEf,aAAa,CAACG;AAF9B","sourcesContent":["import React from 'react';\nimport { get } from 'lodash';\nimport { Icon } from '@jutro/components';\nimport { Flex, FlexItem } from '@jutro/layout';\nimport { DisplayColumn } from '@jutro/datatable';\n\nexport const WarningColumn = () => {\n    if (__DEV__) {\n        throw new Error('Component <WarningColumn /> should never render');\n    }\n    return <React.Fragment />;\n};\n\nWarningColumn.defaultCell = (\n    row,\n    rowId,\n    { id, path, warningPath, visible }\n) => {\n    if (visible === false) {\n        return null;\n    }\n\n    const value = get(row, path);\n\n    if (!value) {\n        return DisplayColumn.defaultCell(row, rowId, { id, path });\n    }\n\n    const warning = get(row, warningPath);\n\n    return (\n        <Flex alignItems=\"center\" gap=\"small\">\n            <FlexItem>{value}</FlexItem>\n            {warning && <Icon id={`${id}_${rowId}_icon`} icon=\"mi-warning\" />}\n        </Flex>\n    );\n};\n\nWarningColumn.displayName = 'WarningColumn';\n\nWarningColumn.defaultProps = {\n    ...DisplayColumn.defaultProps,\n    renderCell: WarningColumn.defaultCell,\n};\n"],"file":"WarningColumn.js"}