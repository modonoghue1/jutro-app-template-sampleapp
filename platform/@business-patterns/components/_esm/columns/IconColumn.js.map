{"version":3,"sources":["../../../src/columns/IconColumn.js"],"names":["React","Icon","DisplayColumn","Flex","FlexItem","IconColumn","__DEV__","Error","defaultCell","row","rowId","id","path","visible","iconOnly","iconMap","value","get","icon","displayName","defaultProps","renderCell"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,eAA/B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B,MAAIC,OAAJ,EAAa;AACT,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,SAAO,oBAAC,KAAD,CAAO,QAAP,OAAP;AACH,CALM;;AAOPF,UAAU,CAACG,WAAX,GAAyB,UACrBC,GADqB,EAErBC,KAFqB,QAIpB;AAAA;;AAAA,MADCC,EACD,QADCA,EACD;AAAA,MADKC,IACL,QADKA,IACL;AAAA,MADWC,OACX,QADWA,OACX;AAAA,MADoBC,QACpB,QADoBA,QACpB;AAAA,MAD8BC,OAC9B,QAD8BA,OAC9B;;AACD,MAAIF,OAAO,KAAK,KAAhB,EAAuB;AACnB,WAAO,IAAP;AACH;;AAED,MAAMG,KAAK,GAAGC,GAAG,CAACR,GAAD,EAAMG,IAAN,CAAjB;;AAEA,MAAI,CAACI,KAAL,EAAY;AACR,WAAOd,aAAa,CAACM,WAAd,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AAAEC,MAAAA,EAAE,EAAFA,EAAF;AAAMC,MAAAA,IAAI,EAAJA;AAAN,KAAtC,CAAP;AACH;;AAED,MAAMM,IAAI,GACN,oBAAC,IAAD;AAAM,IAAA,EAAE,+CAAKP,EAAL,uBAAWD,KAAX,CAAR;AAA4B,IAAA,IAAI,oBAAEK,OAAO,CAACC,KAAD,CAAT,2DAAoB;AAApD,IADJ;AAIA,SAAOF,QAAQ,GACXI,IADW,GAGX,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAC;AAAjB,KACI,oBAAC,QAAD,QAAWA,IAAX,CADJ,EAEI,oBAAC,QAAD,QAAWF,KAAX,CAFJ,CAHJ;AAQH,CA3BD;;AA6BAX,UAAU,CAACc,WAAX,GAAyB,YAAzB;AAEAd,UAAU,CAACe,YAAX,mCACOlB,aAAa,CAACkB,YADrB;AAEIL,EAAAA,OAAO,EAAE,EAFb;AAGIM,EAAAA,UAAU,EAAEhB,UAAU,CAACG;AAH3B","sourcesContent":["import React from 'react';\nimport { get } from 'lodash';\nimport { Icon } from '@jutro/components';\nimport { DisplayColumn } from '@jutro/datatable';\nimport { Flex, FlexItem } from '@jutro/layout';\n\nexport const IconColumn = () => {\n    if (__DEV__) {\n        throw new Error('Component <IconColumn /> should never render');\n    }\n    return <React.Fragment />;\n};\n\nIconColumn.defaultCell = (\n    row,\n    rowId,\n    { id, path, visible, iconOnly, iconMap }\n) => {\n    if (visible === false) {\n        return null;\n    }\n\n    const value = get(row, path);\n\n    if (!value) {\n        return DisplayColumn.defaultCell(row, rowId, { id, path });\n    }\n\n    const icon = (\n        <Icon id={`${id}_${rowId}`} icon={iconMap[value] ?? 'mi-help'} />\n    );\n\n    return iconOnly ? (\n        icon\n    ) : (\n        <Flex alignItems=\"center\">\n            <FlexItem>{icon}</FlexItem>\n            <FlexItem>{value}</FlexItem>\n        </Flex>\n    );\n};\n\nIconColumn.displayName = 'IconColumn';\n\nIconColumn.defaultProps = {\n    ...DisplayColumn.defaultProps,\n    iconMap: {},\n    renderCell: IconColumn.defaultCell,\n};\n"],"file":"IconColumn.js"}