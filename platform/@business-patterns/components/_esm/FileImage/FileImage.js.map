{"version":3,"sources":["../../../src/FileImage/FileImage.js"],"names":["React","useEffect","useMemo","useState","Image","useImageAsDataUrl","file","dataUrl","setDataUrl","reader","FileReader","Blob","undefined","onload","result","readAsDataURL","omitMetadataProps","omit","FileImage","value","hideLoader","rest","imageProps"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,KAAT,QAAsB,mBAAtB;;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI,EAAI;AAC9B,kBAA8BH,QAAQ,EAAtC;AAAA;AAAA,MAAOI,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,MAAM,GAAGP,OAAO,CAAC;AAAA,WAAM,IAAIQ,UAAJ,EAAN;AAAA,GAAD,EAAyB,EAAzB,CAAtB;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACK,IAAD,IAAS,EAAEA,IAAI,YAAYK,IAAlB,CAAb,EAAsC;AAClCH,MAAAA,UAAU,CAACI,SAAD,CAAV;AACA;AACH;;AACDH,IAAAA,MAAM,CAACI,MAAP,GAAgB;AAAA,aAAML,UAAU,CAACC,MAAM,CAACK,MAAR,CAAhB;AAAA,KAAhB;;AACAL,IAAAA,MAAM,CAACM,aAAP,CAAqBT,IAArB;AACH,GAPQ,EAON,CAACA,IAAD,EAAOG,MAAP,CAPM,CAAT;AASA,SAAOF,OAAP;AACH,CAdD;;AAgBA,IAAMS,iBAAiB,GAAGC,IAAI,CAAC,CAC3B,cAD2B,EAE3B,cAF2B,EAG3B,YAH2B,EAI3B,oBAJ2B,EAK3B,eAL2B,CAAD,CAA9B;AAQA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA4C;AAAA,MAAzCC,KAAyC,QAAzCA,KAAyC;AAAA,6BAAlCC,UAAkC;AAAA,MAAlCA,UAAkC,gCAArB,KAAqB;AAAA,MAAXC,IAAW;;AACjE,MAAMC,UAAU,GAAGN,iBAAiB,CAACK,IAAD,CAApC;AACA,MAAMd,OAAO,GAAGF,iBAAiB,CAACc,KAAD,CAAjC;;AAEA,MAAI,CAACA,KAAD,IAAWA,KAAK,IAAI,CAACZ,OAAV,IAAqBa,UAApC,EAAiD;AAC7C,WAAO,IAAP;AACH;;AACD,SAAO,oBAAC,KAAD,eAAWE,UAAX;AAAuB,IAAA,GAAG,EAAEf;AAA5B,KAAP;AACH,CARM","sourcesContent":["// @ts - check\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Image } from '@jutro/components';\nimport { omit } from 'lodash/fp';\n\nconst useImageAsDataUrl = file => {\n    const [dataUrl, setDataUrl] = useState();\n    const reader = useMemo(() => new FileReader(), []);\n\n    useEffect(() => {\n        if (!file || !(file instanceof Blob)) {\n            setDataUrl(undefined);\n            return;\n        }\n        reader.onload = () => setDataUrl(reader.result);\n        reader.readAsDataURL(file);\n    }, [file, reader]);\n\n    return dataUrl;\n};\n\nconst omitMetadataProps = omit([\n    'showRequired',\n    'showOptional',\n    'showErrors',\n    'onValidationChange',\n    'onValueChange',\n]);\n\nexport const FileImage = ({ value, hideLoader = false, ...rest }) => {\n    const imageProps = omitMetadataProps(rest);\n    const dataUrl = useImageAsDataUrl(value);\n\n    if (!value || (value && !dataUrl && hideLoader)) {\n        return null;\n    }\n    return <Image {...imageProps} src={dataUrl} />;\n};\n"],"file":"FileImage.js"}