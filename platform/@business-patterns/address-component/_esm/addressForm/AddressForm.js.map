{"version":3,"sources":["../../../src/addressForm/AddressForm.js"],"names":["React","useMemo","useContext","PropTypes","MetadataForm","TranslatorContext","intlMessageShape","GridLayout","GridItem","AddressReadonly","labelMessages","defaultLayoutTypes","type1","columns","colspan","affectedFieldsName","type2","type3","type4","type5","type6","AddressForm","value","onValueChange","countryData","uiProps","showErrors","readOnly","readOnlyFormat","readOnlyLabel","metadataFormKey","id","customLayoutTypes","onValidationChange","alwaysShowMaskPostalCode","translator","layoutTypes","layoutType","fieldsLayoutType","undefined","columnsLayout","componentUiProps","isEmpty","newUiProps","content","fields","field","fieldName","name","fieldPath","path","fieldValues","fieldPattern","pattern","fieldMaxLength","maxLength","fieldLabel","label","fieldMask","mask","fieldTooltip","tooltip","translatedFieldValues","fieldValue","code","isRequired","requiredFields","some","requiredField","component","fieldMetadata","type","componentProps","colSpan","phone","phoneWide","tablet","availableValues","required","labelClassName","dataType","alwaysShowMask","maskChar","validator","message","patternValidationError","resolveSmallToBigValue","fieldsOrderForCountry","valueForReadOnly","reduce","sortedValue","push","country","Boolean","layoutTypesShape","shape","arrayOf","string","number","propTypes","object","func","bool","oneOf","objectOf"],"mappings":"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","sourcesContent":["import React, { useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\nimport { MetadataForm } from '@jutro/uiconfig';\nimport { TranslatorContext } from '@jutro/locale';\nimport { intlMessageShape } from '@jutro/prop-types';\nimport { GridLayout, GridItem } from '@jutro/layout';\nimport { AddressReadonly } from '../addressReadOnly/AddressReadonly';\nimport { labelMessages } from '../AddressComponent.messages';\n\nconst defaultLayoutTypes = {\n    type1: {\n        columns: ['84px', 'auto'],\n        colspan: 2,\n        affectedFieldsName: ['postalCode', 'city'],\n    },\n    type2: {\n        columns: ['auto', '84px'],\n        colspan: 2,\n        affectedFieldsName: ['city', 'postalCode'],\n    },\n    type3: {\n        columns: ['auto', '128px', '84px'],\n        colspan: 3,\n        affectedFieldsName: [\n            'city',\n            'state',\n            'province',\n            'department',\n            'oblast',\n            'postalCode',\n        ],\n    },\n    type4: {\n        columns: ['84px', 'auto'],\n        colspan: 2,\n        affectedFieldsName: ['postalCode'],\n    },\n    type5: {\n        columns: ['84px', 'auto'],\n        colspan: 2,\n        affectedFieldsName: ['postalCode'],\n    },\n    type6: {\n        columns: ['auto', '84px', '128px'],\n        colspan: 3,\n        affectedFieldsName: ['city', 'state', 'postalCode'],\n    },\n};\n\nexport const AddressForm = ({\n    value,\n    onValueChange,\n    countryData,\n    uiProps,\n    showErrors,\n    readOnly,\n    readOnlyFormat,\n    readOnlyLabel,\n    metadataFormKey,\n    id,\n    customLayoutTypes,\n    onValidationChange,\n    alwaysShowMaskPostalCode = true,\n}) => {\n    const translator = useContext(TranslatorContext);\n    const layoutTypes = customLayoutTypes\n        ? { ...defaultLayoutTypes, ...customLayoutTypes }\n        : defaultLayoutTypes;\n    const layoutType = countryData?.fieldsLayoutType\n        ? layoutTypes[countryData.fieldsLayoutType]\n        : undefined;\n    const columnsLayout = {\n        columns: layoutType ? layoutType.columns : ['1fr'],\n        colspan: layoutType ? layoutType.colspan : 1,\n        affectedFieldsName: layoutType ? layoutType.affectedFieldsName : [],\n    };\n    const componentUiProps = useMemo(() => {\n        if (countryData && isEmpty(uiProps)) {\n            const newUiProps = {};\n\n            newUiProps.content = countryData.fields.map(field => {\n                const {\n                    name: fieldName,\n                    path: fieldPath,\n                    values: fieldValues,\n                    pattern: fieldPattern,\n                    maxLength: fieldMaxLength,\n                    label: fieldLabel,\n                    mask: fieldMask,\n                    tooltip: fieldTooltip,\n                } = field;\n\n                const translatedFieldValues = fieldValues?.map(fieldValue => {\n                    return {\n                        code: fieldValue.code,\n                        name: translator(fieldValue.name),\n                    };\n                });\n\n                const isRequired = countryData.requiredFields?.some(\n                    requiredField => requiredField === fieldName\n                );\n                const colspan = columnsLayout.affectedFieldsName.includes(\n                    fieldName\n                )\n                    ? 1\n                    : columnsLayout.colspan;\n\n                const component = () => {\n                    if (fieldValues) {\n                        return 'DropdownSelect';\n                    }\n                    // InputMask usage should be uncommented after finishing current epic with address theming\n                    // and jutro peer dependencies should be updated to ^6.2.0 and then new package published\n                    // because even proper postal code gives wrong validation before fix on 6.2.0\n                    // validation is correct if you type right postal code and delete one char\n                    // as stated in the bug descritipion - validation for input mask is returned for one value back\n                    // see JUT-8079\n\n                    // if (fieldName === 'postalCode' && fieldMask) {\n                    //     return 'InputMask';\n                    // }\n                    return 'Input';\n                };\n\n                const fieldMetadata = {\n                    id: `${fieldName}_wrapper`,\n                    type: 'element',\n                    component: GridItem,\n                    componentProps: {\n                        colSpan: colspan,\n                        phone: { colSpan: 1 },\n                        phoneWide: { colSpan: colspan },\n                        tablet: { colSpan: colspan },\n                    },\n                    content: [\n                        {\n                            id: `${id}_${fieldName}`,\n                            type: 'field',\n                            component: component(),\n                            componentProps: {\n                                path: fieldPath,\n                                label: translator(\n                                    fieldLabel || labelMessages[fieldName]\n                                ),\n                                availableValues: translatedFieldValues,\n                                required: isRequired,\n                                labelClassName: 'addressField',\n                                dataType: fieldValues ? 'object' : undefined,\n                                mask: fieldMask,\n                                tooltip: fieldTooltip,\n                                alwaysShowMask: alwaysShowMaskPostalCode,\n                                maskChar: '#',\n                            },\n                        },\n                    ],\n                };\n\n                if (fieldPattern) {\n                    fieldMetadata.content[0].componentProps.validator = {\n                        pattern: fieldPattern,\n                        message: translator(\n                            labelMessages.patternValidationError\n                        ),\n                    };\n                }\n\n                if (!fieldValues) {\n                    fieldMetadata.content[0].componentProps.maxLength =\n                        fieldMaxLength || 60;\n                }\n\n                return fieldMetadata;\n            });\n\n            return newUiProps;\n        }\n\n        return uiProps;\n    }, [\n        countryData,\n        uiProps,\n        columnsLayout.affectedFieldsName,\n        columnsLayout.colspan,\n        id,\n        translator,\n        alwaysShowMaskPostalCode,\n    ]);\n\n    const resolveSmallToBigValue = useMemo(() => {\n        const fieldsOrderForCountry = countryData?.fields || [];\n\n        const valueForReadOnly = fieldsOrderForCountry.reduce(\n            (sortedValue, field) => sortedValue.concat(value?.[field.name]),\n            []\n        );\n\n        valueForReadOnly.push(value?.country);\n\n        return valueForReadOnly.filter(Boolean);\n    }, [countryData, value]);\n\n    if (readOnly) {\n        return (\n            <AddressReadonly\n                address={resolveSmallToBigValue}\n                format={readOnlyFormat}\n                label={readOnlyLabel}\n                id={id}\n            />\n        );\n    }\n\n    return (\n        <GridLayout\n            id=\"addressLayout\"\n            columns={columnsLayout.columns}\n            hgap=\"large\"\n            vgap=\"medium\"\n            phone={{ columns: [1] }}\n            phoneWide={{ columns: columnsLayout.columns }}\n            tablet={{ columns: columnsLayout.columns }}\n        >\n            <MetadataForm\n                uiProps={componentUiProps}\n                data={value}\n                onDataChange={onValueChange}\n                showRequired\n                showErrors={showErrors}\n                key={metadataFormKey}\n                onValidationChange={onValidationChange}\n                id=\"addressMetadataForm\"\n            />\n        </GridLayout>\n    );\n};\n\nexport const layoutTypesShape = PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n    colspan: PropTypes.number.isRequired,\n    affectedFieldsName: PropTypes.arrayOf(PropTypes.string.isRequired)\n        .isRequired,\n});\n\nAddressForm.propTypes = {\n    value: PropTypes.object,\n    onValueChange: PropTypes.func,\n    onValidationChange: PropTypes.func,\n    countryData: PropTypes.object,\n    uiProps: PropTypes.object,\n    showErrors: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    readOnlyFormat: PropTypes.oneOf([\n        'oneLine',\n        'envelopeBigToSmall',\n        'envelopeSmallToBig',\n    ]),\n    readOnlyLabel: intlMessageShape,\n    metadataFormKey: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    customLayoutTypes: PropTypes.objectOf(layoutTypesShape.isRequired),\n    alwaysShowMaskPostalCode: PropTypes.bool,\n};\n"],"file":"AddressForm.js"}