{"version":3,"sources":["../../../src/addressReadOnly/AddressReadonly.js"],"names":["React","useContext","PropTypes","TranslatorContext","intlMessageShape","InputField","css","mapAddressEntry","addressEntry","name","getAddressLine","format","address","addressValues","join","Error","AddressReadonly","id","label","translator","addressReadonly","propTypes","arrayOf","oneOfType","string","shape","isRequired","oneOf"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,GAAP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,YAAY;AAAA,SAChC,OAAOA,YAAP,KAAwB,QAAxB,GAAmCA,YAAnC,GAAkDA,YAAY,CAACC,IAD/B;AAAA,CAApC;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,OAAT,EAAqB;AACxC,MAAIA,OAAJ,EAAa;AACT,QAAMC,aAAa,GAAG,qBAAAD,OAAO,MAAP,CAAAA,OAAO,EAAKL,eAAL,CAA7B;;AACA,YAAQI,MAAR;AACI,WAAK,oBAAL;AAA2B;AACvB,iBAAOE,aAAa,CAACC,IAAd,CAAmB,MAAnB,CAAP;AACH;;AACD,WAAK,oBAAL;AAA2B;AACvB,iBAAO,yBAAAD,aAAa,MAAb,CAAAA,aAAa,EAAWC,IAAxB,CAA6B,MAA7B,CAAP;AACH;;AACD,WAAK,SAAL;AAAgB;AACZ,iBAAOD,aAAa,CAACC,IAAd,CAAmB,IAAnB,CAAP;AACH;;AACD;AAAS;AACL,gBAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACH;AAZL;AAcH;AACJ,CAlBD;;AAoBA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAgD;AAAA,MAA7CC,EAA6C,QAA7CA,EAA6C;AAAA,MAAzCC,KAAyC,QAAzCA,KAAyC;AAAA,yBAAlCP,MAAkC;AAAA,MAAlCA,MAAkC,4BAAzB,SAAyB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC3E,MAAMO,UAAU,GAAGlB,UAAU,CAACE,iBAAD,CAA7B;AAEA,SACI,oBAAC,UAAD;AACI,IAAA,KAAK,EAAEgB,UAAU,CAACD,KAAD,CADrB;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,SAAS,EAAEP,MAAM,KAAK,SAAX,GAAuBL,GAAG,CAACc,eAA3B,GAA6C,IAH5D;AAII,IAAA,KAAK,EAAEV,cAAc,CAACC,MAAD,EAASC,OAAT,CAJzB;AAKI,IAAA,EAAE,EAAEK;AALR,IADJ;AASH,CAZM;AAcPD,eAAe,CAACK,SAAhB,GAA4B;AACxBT,EAAAA,OAAO,EAAEV,SAAS,CAACoB,OAAV,CACLpB,SAAS,CAACqB,SAAV,CAAoB,CAChBrB,SAAS,CAACsB,MADM,EAEhBtB,SAAS,CAACuB,KAAV,CAAgB;AACZhB,IAAAA,IAAI,EAAEP,SAAS,CAACsB;AADJ,GAAhB,CAFgB,CAApB,CADK,EAOPE,UARsB;AASxBf,EAAAA,MAAM,EAAET,SAAS,CAACyB,KAAV,CAAgB,CACpB,SADoB,EAEpB,oBAFoB,EAGpB,oBAHoB,CAAhB,CATgB;AAcxBT,EAAAA,KAAK,EAAEd,gBAdiB;AAexBa,EAAAA,EAAE,EAAEf,SAAS,CAACsB,MAAV,CAAiBE;AAfG,CAA5B","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { TranslatorContext } from '@jutro/locale';\nimport { intlMessageShape } from '@jutro/prop-types';\nimport { InputField } from '@jutro/components';\nimport css from './AddressReadonly.module.scss';\n\nconst mapAddressEntry = addressEntry =>\n    typeof addressEntry === 'string' ? addressEntry : addressEntry.name;\n\nconst getAddressLine = (format, address) => {\n    if (address) {\n        const addressValues = address.map(mapAddressEntry);\n        switch (format) {\n            case 'envelopeSmallToBig': {\n                return addressValues.join(', \\n');\n            }\n            case 'envelopeBigToSmall': {\n                return addressValues.reverse().join(', \\n');\n            }\n            case 'oneLine': {\n                return addressValues.join(', ');\n            }\n            default: {\n                throw new Error('Wrong format');\n            }\n        }\n    }\n};\n\nexport const AddressReadonly = ({ id, label, format = 'oneLine', address }) => {\n    const translator = useContext(TranslatorContext);\n\n    return (\n        <InputField\n            label={translator(label)}\n            readOnly\n            className={format !== 'oneLine' ? css.addressReadonly : null}\n            value={getAddressLine(format, address)}\n            id={id}\n        />\n    );\n};\n\nAddressReadonly.propTypes = {\n    address: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.shape({\n                name: PropTypes.string,\n            }),\n        ])\n    ).isRequired,\n    format: PropTypes.oneOf([\n        'oneLine',\n        'envelopeBigToSmall',\n        'envelopeSmallToBig',\n    ]),\n    label: intlMessageShape,\n    id: PropTypes.string.isRequired,\n};\n"],"file":"AddressReadonly.js"}