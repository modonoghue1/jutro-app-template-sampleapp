{"version":3,"sources":["../../src/AddressComponent.js"],"names":["React","useContext","useCallback","useMemo","useState","PropTypes","TypeaheadMultiSelectField","TranslatorContext","intlMessageShape","Grid","useSetComponentValue","useSetDefaultCountry","useSetComponentValidation","useSetValueForUnknownCountry","AddressForm","labelMessages","countriesAddressData","defaultCountryForm","AddressComponent","value","onValueChange","onValidationChange","countriesData","defaultCountry","readOnly","readOnlyFormat","readOnlyLabel","showCountrySelection","id","path","showErrors","alwaysShowMaskPostalCode","translator","componentValue","setComponentValue","isComponentValid","setIsComponentValid","countriesDataMerged","data","pickBy","isObject","resolveCountriesForDropdown","availableCountries","country","countryCode","code","name","every","unknownCountryDropdownOption","push","countriesDropdownAlphabeticalOrder","validateAddressComponent","isFormValid","handleWrite","fieldValue","fieldPath","prevState","newState","set","toUpperCase","omit","handleCountryDropdownWrite","dropdownValue","countryValueWithCountryName","resolveCountryToRender","valueCountryCode","countryFromValue","readOnlyValue","countryLabel","propTypes","object","func","string","bool","oneOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TypeaheadMultiSelectField } from '@jutro/components';\nimport { set, omit, pickBy, isObject } from 'lodash';\nimport { TranslatorContext } from '@jutro/locale';\nimport { intlMessageShape } from '@jutro/prop-types';\nimport { Grid } from '@jutro/layout';\nimport {\n    useSetComponentValue,\n    useSetDefaultCountry,\n    useSetComponentValidation,\n    useSetValueForUnknownCountry,\n} from './AddressComponents.hooks';\nimport { AddressForm } from './addressForm/AddressForm';\nimport { labelMessages } from './AddressComponent.messages';\nimport { countriesAddressData, defaultCountryForm } from './defaultCountryData';\n\nexport const AddressComponent = ({\n    value,\n    onValueChange,\n    onValidationChange,\n    countriesData,\n    defaultCountry,\n    readOnly,\n    readOnlyFormat,\n    readOnlyLabel,\n    showCountrySelection = 'selectable',\n    id,\n    path,\n    showErrors,\n    alwaysShowMaskPostalCode,\n}) => {\n    const translator = useContext(TranslatorContext);\n    const [componentValue, setComponentValue] = useState(value);\n    const [isComponentValid, setIsComponentValid] = useState(true);\n\n    const countriesDataMerged = useMemo(() => {\n        const data = countriesData\n            ? { ...countriesData }\n            : { ...countriesAddressData };\n        return pickBy(data, isObject);\n    }, [countriesData]);\n\n    const resolveCountriesForDropdown = useMemo(() => {\n        const availableCountries = Object.keys(countriesDataMerged)?.map(\n            country => {\n                const countryCode = countriesDataMerged[country].countryCode;\n\n                return {\n                    code: countryCode,\n                    name: translator(countriesDataMerged[countryCode]?.country),\n                };\n            }\n        );\n\n        if (\n            availableCountries.every(\n                country => country?.code !== value?.country\n            )\n        ) {\n            const unknownCountryDropdownOption = {\n                code: value?.country,\n                name: value?.country,\n            };\n            availableCountries.push(unknownCountryDropdownOption);\n        }\n\n        const countriesDropdownAlphabeticalOrder = availableCountries\n            .map(country => country.name)\n            .sort();\n\n        return countriesDropdownAlphabeticalOrder.map(\n            country =>\n                availableCountries.filter(({ name }) => name === country)[0]\n        );\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useSetComponentValidation(isComponentValid, onValidationChange);\n\n    useSetComponentValue(componentValue, onValueChange, path);\n\n    useSetDefaultCountry(\n        defaultCountry,\n        countriesDataMerged,\n        resolveCountriesForDropdown,\n        setComponentValue\n    );\n\n    useSetValueForUnknownCountry(\n        value,\n        countriesDataMerged,\n        defaultCountryForm,\n        setComponentValue\n    );\n\n    const validateAddressComponent = useCallback(isFormValid => {\n        setIsComponentValid(isFormValid);\n    }, []);\n\n    const handleWrite = useCallback((fieldValue, fieldPath) => {\n        setComponentValue(prevState => {\n            let newState = { ...prevState };\n            fieldPath.endsWith('postalCode')\n                ? set(newState, fieldPath, fieldValue.toUpperCase())\n                : set(newState, fieldPath, fieldValue);\n            if (!fieldValue) {\n                newState = omit(newState, [fieldPath]);\n            }\n            return newState;\n        });\n    }, []);\n\n    const handleCountryDropdownWrite = useCallback(dropdownValue => {\n        setComponentValue(prevState => {\n            if (prevState?.country !== dropdownValue?.code) {\n                return { country: dropdownValue?.code };\n            }\n            return prevState;\n        });\n    }, []);\n\n    const countryValueWithCountryName = {\n        code: componentValue?.country,\n        name:\n            translator(countriesDataMerged[componentValue?.country]?.country) ||\n            componentValue?.country,\n    };\n\n    const resolveCountryToRender = useMemo(() => {\n        const valueCountryCode = componentValue?.country;\n        const countryFromValue = countriesDataMerged?.[valueCountryCode];\n\n        if (!countryFromValue) {\n            return defaultCountryForm;\n        }\n\n        return countryFromValue;\n    }, [countriesDataMerged, componentValue?.country]);\n\n    if (readOnly) {\n        // resolve country name for readonly\n        const readOnlyValue = { ...componentValue };\n        readOnlyValue.country = countryValueWithCountryName;\n\n        return (\n            <AddressForm\n                value={readOnlyValue}\n                countryData={resolveCountryToRender}\n                readOnly={readOnly}\n                readOnlyFormat={readOnlyFormat}\n                readOnlyLabel={readOnlyLabel}\n                id={id}\n            />\n        );\n    }\n\n    if (showCountrySelection === 'hidden') {\n        return (\n            <AddressForm\n                value={componentValue}\n                onValueChange={handleWrite}\n                countryData={resolveCountryToRender}\n                id={id}\n                onValidationChange={validateAddressComponent}\n                showErrors={showErrors}\n            />\n        );\n    }\n\n    return (\n        <Grid hgap=\"large\" vgap=\"medium\">\n            <TypeaheadMultiSelectField\n                id={`${id}_countrySelect`}\n                path=\"country\"\n                label={translator(labelMessages.countryLabel)}\n                availableValues={resolveCountriesForDropdown}\n                onValueChange={handleCountryDropdownWrite}\n                value={countryValueWithCountryName}\n                singleSelect\n                dataType=\"object\"\n                readOnly={showCountrySelection === 'readOnly'}\n                onValidationChange={validateAddressComponent}\n                showErrors={showErrors}\n            />\n            <AddressForm\n                value={componentValue}\n                onValueChange={handleWrite}\n                countryData={resolveCountryToRender}\n                metadataFormKey={componentValue?.country}\n                id={id}\n                onValidationChange={validateAddressComponent}\n                showErrors={showErrors}\n                alwaysShowMaskPostalCode={alwaysShowMaskPostalCode}\n            />\n        </Grid>\n    );\n};\n\nAddressComponent.propTypes = {\n    value: PropTypes.object,\n    onValueChange: PropTypes.func,\n    onValidationChange: PropTypes.func,\n    countriesData: PropTypes.object,\n    defaultCountry: PropTypes.string,\n    readOnly: PropTypes.bool,\n    readOnlyFormat: PropTypes.oneOf([\n        'oneLine',\n        'envelopeBigToSmall',\n        'envelopeSmallToBig',\n    ]),\n    readOnlyLabel: intlMessageShape,\n    showCountrySelection: PropTypes.oneOf(['selectable', 'readOnly', 'hidden']),\n    id: PropTypes.string.isRequired,\n    path: PropTypes.string,\n    showErrors: PropTypes.bool,\n    /**\n     * If true, the mask for postal code will be visible if it is contained in the config, if false postal code will display the placeholder if not focused and empty.\n     */\n    alwaysShowMaskPostalCode: PropTypes.bool,\n};\n"],"file":"AddressComponent.js"}