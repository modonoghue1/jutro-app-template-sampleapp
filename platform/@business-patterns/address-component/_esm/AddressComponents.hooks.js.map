{"version":3,"sources":["../../src/AddressComponents.hooks.js"],"names":["useEffect","getDefaultCountryCode","useSetDefaultCountry","defaultCountry","countriesDataMerged","countriesForDropdown","setComponentValue","defaultCountryCode","countryToSetAsDefault","country","code","countryToRenderAsDefault","length","prevValue","useSetComponentValue","componentValue","onValueChange","path","useSetComponentValidation","isComponentValid","onValidationChange","useSetValueForUnknownCountry","value","defaultCountryForm","defultFormFields","fields","field","name","valueFromUknownFields","fieldsToOmitFromTheValue","fieldName","forEach","push","firstEmptyAddressLine","addressLine3","newValue","omit","join","isEqual"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { omit, isEqual } from 'lodash';\nimport { getDefaultCountryCode } from '@jutro/locale';\n\nexport const useSetDefaultCountry = (\n    defaultCountry,\n    countriesDataMerged,\n    countriesForDropdown,\n    setComponentValue\n) => {\n    useEffect(() => {\n        const defaultCountryCode =\n            defaultCountry || getDefaultCountryCode() || 'US';\n\n        const countryToSetAsDefault = countriesForDropdown.filter(\n            country => country.code === defaultCountryCode\n        );\n\n        const countryToRenderAsDefault = countryToSetAsDefault.length\n            ? countryToSetAsDefault[0].code\n            : countriesForDropdown[0].code;\n\n        setComponentValue(prevValue => {\n            if (!prevValue?.country) {\n                return {\n                    country: countryToRenderAsDefault,\n                };\n            }\n            return prevValue;\n        });\n    }, [\n        defaultCountry,\n        countriesDataMerged,\n        setComponentValue,\n        countriesForDropdown,\n    ]);\n};\n\nexport const useSetComponentValue = (componentValue, onValueChange, path) => {\n    useEffect(() => {\n        onValueChange && onValueChange(componentValue, path);\n    }, [componentValue, onValueChange, path]);\n};\n\nexport const useSetComponentValidation = (\n    isComponentValid,\n    onValidationChange\n) => {\n    useEffect(() => {\n        onValidationChange && onValidationChange(isComponentValid);\n    }, [isComponentValid, onValidationChange]);\n};\n\nexport const useSetValueForUnknownCountry = (\n    value,\n    countriesDataMerged,\n    defaultCountryForm,\n    setComponentValue\n) => {\n    useEffect(() => {\n        if (\n            value &&\n            !Object.keys(countriesDataMerged).includes(value.country)\n        ) {\n            const defultFormFields = defaultCountryForm.fields.map(\n                field => field?.name\n            );\n            const valueFromUknownFields = [];\n            const fieldsToOmitFromTheValue = [];\n            Object.keys(value)\n                .filter(fieldName => fieldName !== 'country')\n                .forEach(field => {\n                    if (!defultFormFields.includes(field)) {\n                        valueFromUknownFields.push(\n                            value[field].name || value[field]\n                        );\n                        fieldsToOmitFromTheValue.push(field);\n                    }\n                });\n\n            if (valueFromUknownFields.length) {\n                const firstEmptyAddressLine = value.addressLine3\n                    ? 'addressLine3'\n                    : 'addressLine2';\n\n                setComponentValue(prevValue => {\n                    const newValue = omit(prevValue, fieldsToOmitFromTheValue);\n                    if (prevValue[firstEmptyAddressLine]) {\n                        newValue[firstEmptyAddressLine] = `${\n                            prevValue[firstEmptyAddressLine]\n                        }, ${valueFromUknownFields.join(', ')}`;\n                    } else {\n                        newValue[\n                            firstEmptyAddressLine\n                        ] = valueFromUknownFields.join(', ');\n                    }\n\n                    return isEqual(prevValue, newValue) ? prevValue : newValue;\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n};\n"],"file":"AddressComponents.hooks.js"}